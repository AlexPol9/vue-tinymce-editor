{"version":3,"sources":["webpack:///static/js/42.e49fa7af95a438b1662c.js","webpack:///./~/tinymce/plugins/anchor/index.js","webpack:///./~/tinymce/plugins/anchor/plugin.js"],"names":["webpackJsonp","/Xt6","module","exports","__webpack_require__","3saF","Plugin","global","tinymce","util","Tools","resolve","isValidId","id","test","getId","editor","selectedNode","selection","getNode","tagName","dom","getAttrib","name","insert","removeAttribute","undoManager","add","focus","collapse","execCommand","createHTML","Anchor","insertAnchor","newId","windowManager","alert","open","currentId","title","body","type","size","label","value","onsubmit","e","data","preventDefault","Dialog","register","addCommand","Commands","isAnchorNode","node","attr","firstChild","setContentEditable","state","nodes","i","length","setup","on","parser","addNodeFilter","serializer","FilterContent","register$1","addButton","icon","tooltip","cmd","stateSelector","addMenuItem","text","context","Buttons"],"mappings":"AAAAA,cAAc,KAERC,OACA,SAAUC,EAAQC,EAASC,GCGjC,EAAQ,SDSFC,OACA,SAAUH,EAAQC,IEhBxB,YACc,WACV,YA6GA,SAASG,MA3GT,GAAIC,GAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAY,SAAUC,GACxB,MAAO,8BAA8BC,KAAKD,IAExCE,EAAQ,SAAUC,GACpB,GAAIC,GAAeD,EAAOE,UAAUC,SAEpC,OADwC,MAAzBF,EAAaG,SAAkE,KAA/CJ,EAAOK,IAAIC,UAAUL,EAAc,QAChEA,EAAaJ,IAAMI,EAAaM,KAAO,IAEvDC,EAAS,SAAUR,EAAQH,GAC7B,GAAII,GAAeD,EAAOE,UAAUC,SACI,OAAzBF,EAAaG,SAAkE,KAA/CJ,EAAOK,IAAIC,UAAUL,EAAc,SAEhFA,EAAaQ,gBAAgB,QAC7BR,EAAaJ,GAAKA,EAClBG,EAAOU,YAAYC,QAEnBX,EAAOY,QACPZ,EAAOE,UAAUW,UAAS,GAC1Bb,EAAOc,YAAY,oBAAoB,EAAOd,EAAOK,IAAIU,WAAW,KAAOlB,GAAIA,OAG/EmB,GACFpB,UAAWA,EACXG,MAAOA,EACPS,OAAQA,GAGNS,EAAe,SAAUjB,EAAQkB,GACnC,MAAKF,GAAOpB,UAAUsB,IAIpBF,EAAOR,OAAOR,EAAQkB,IACf,IAJPlB,EAAOmB,cAAcC,MAAM,2GACpB,IAMPC,EAAO,SAAUrB,GACnB,GAAIsB,GAAYN,EAAOjB,MAAMC,EAC7BA,GAAOmB,cAAcE,MACnBE,MAAO,SACPC,MACEC,KAAM,UACNlB,KAAM,KACNmB,KAAM,GACNC,MAAO,KACPC,MAAON,GAETO,SAAU,SAAUC,GAClB,GAAIZ,GAAQY,EAAEC,KAAKlC,EACfoB,GAAajB,EAAQkB,IACvBY,EAAEE,qBAKNC,GAAWZ,KAAMA,GAEjBa,EAAW,SAAUlC,GACvBA,EAAOmC,WAAW,YAAa,WAC7BF,EAAOZ,KAAKrB,MAGZoC,GAAaF,SAAUA,GAEvBG,EAAe,SAAUC,GAC3B,OAAQA,EAAKC,KAAK,UAAYD,EAAKC,KAAK,OAASD,EAAKC,KAAK,WAAaD,EAAKE,YAE3EC,EAAqB,SAAUC,GACjC,MAAO,UAAUC,GACf,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAC5BP,EAAaM,EAAMC,KACrBD,EAAMC,GAAGL,KAAK,kBAAmBG,KAKrCI,EAAQ,SAAU9C,GACpBA,EAAO+C,GAAG,UAAW,WACnB/C,EAAOgD,OAAOC,cAAc,IAAKR,EAAmB,UACpDzC,EAAOkD,WAAWD,cAAc,IAAKR,EAAmB,UAGxDU,GAAkBL,MAAOA,GAEzBM,EAAa,SAAUpD,GACzBA,EAAOqD,UAAU,UACfC,KAAM,SACNC,QAAS,SACTC,IAAK,YACLC,cAAe,kBAEjBzD,EAAO0D,YAAY,UACjBJ,KAAM,SACNK,KAAM,SACNC,QAAS,SACTJ,IAAK,eAGLK,GAAY3B,SAAUkB,EAE1B7D,GAAOoB,IAAI,SAAU,SAAUX,GAC7BmD,EAAcL,MAAM9C,GACpBoC,EAASF,SAASlC,GAClB6D,EAAQ3B,SAASlC","file":"static/js/42.e49fa7af95a438b1662c.js","sourcesContent":["webpackJsonp([42],{\n\n/***/ \"/Xt6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"anchor\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/anchor')\n//   ES2015:\n//     import 'tinymce/plugins/anchor'\n__webpack_require__(\"3saF\");\n\n/***/ }),\n\n/***/ \"3saF\":\n/***/ (function(module, exports) {\n\n(function () {\nvar anchor = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var isValidId = function (id) {\n      return /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    };\n    var getId = function (editor) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      return isAnchor ? selectedNode.id || selectedNode.name : '';\n    };\n    var insert = function (editor, id) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      if (isAnchor) {\n        selectedNode.removeAttribute('name');\n        selectedNode.id = id;\n        editor.undoManager.add();\n      } else {\n        editor.focus();\n        editor.selection.collapse(true);\n        editor.execCommand('mceInsertContent', false, editor.dom.createHTML('a', { id: id }));\n      }\n    };\n    var Anchor = {\n      isValidId: isValidId,\n      getId: getId,\n      insert: insert\n    };\n\n    var insertAnchor = function (editor, newId) {\n      if (!Anchor.isValidId(newId)) {\n        editor.windowManager.alert('Id should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n        return true;\n      } else {\n        Anchor.insert(editor, newId);\n        return false;\n      }\n    };\n    var open = function (editor) {\n      var currentId = Anchor.getId(editor);\n      editor.windowManager.open({\n        title: 'Anchor',\n        body: {\n          type: 'textbox',\n          name: 'id',\n          size: 40,\n          label: 'Id',\n          value: currentId\n        },\n        onsubmit: function (e) {\n          var newId = e.data.id;\n          if (insertAnchor(editor, newId)) {\n            e.preventDefault();\n          }\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor) {\n      editor.addCommand('mceAnchor', function () {\n        Dialog.open(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var isAnchorNode = function (node) {\n      return !node.attr('href') && (node.attr('id') || node.attr('name')) && !node.firstChild;\n    };\n    var setContentEditable = function (state) {\n      return function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n          if (isAnchorNode(nodes[i])) {\n            nodes[i].attr('contenteditable', state);\n          }\n        }\n      };\n    };\n    var setup = function (editor) {\n      editor.on('PreInit', function () {\n        editor.parser.addNodeFilter('a', setContentEditable('false'));\n        editor.serializer.addNodeFilter('a', setContentEditable(null));\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.addButton('anchor', {\n        icon: 'anchor',\n        tooltip: 'Anchor',\n        cmd: 'mceAnchor',\n        stateSelector: 'a:not([href])'\n      });\n      editor.addMenuItem('anchor', {\n        icon: 'anchor',\n        text: 'Anchor',\n        context: 'insert',\n        cmd: 'mceAnchor'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('anchor', function (editor) {\n      FilterContent.setup(editor);\n      Commands.register(editor);\n      Buttons.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/42.e49fa7af95a438b1662c.js","// Exports the \"anchor\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/anchor')\n//   ES2015:\n//     import 'tinymce/plugins/anchor'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/anchor/index.js\n// module id = /Xt6\n// module chunks = 42","(function () {\nvar anchor = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var isValidId = function (id) {\n      return /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    };\n    var getId = function (editor) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      return isAnchor ? selectedNode.id || selectedNode.name : '';\n    };\n    var insert = function (editor, id) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      if (isAnchor) {\n        selectedNode.removeAttribute('name');\n        selectedNode.id = id;\n        editor.undoManager.add();\n      } else {\n        editor.focus();\n        editor.selection.collapse(true);\n        editor.execCommand('mceInsertContent', false, editor.dom.createHTML('a', { id: id }));\n      }\n    };\n    var Anchor = {\n      isValidId: isValidId,\n      getId: getId,\n      insert: insert\n    };\n\n    var insertAnchor = function (editor, newId) {\n      if (!Anchor.isValidId(newId)) {\n        editor.windowManager.alert('Id should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n        return true;\n      } else {\n        Anchor.insert(editor, newId);\n        return false;\n      }\n    };\n    var open = function (editor) {\n      var currentId = Anchor.getId(editor);\n      editor.windowManager.open({\n        title: 'Anchor',\n        body: {\n          type: 'textbox',\n          name: 'id',\n          size: 40,\n          label: 'Id',\n          value: currentId\n        },\n        onsubmit: function (e) {\n          var newId = e.data.id;\n          if (insertAnchor(editor, newId)) {\n            e.preventDefault();\n          }\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor) {\n      editor.addCommand('mceAnchor', function () {\n        Dialog.open(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var isAnchorNode = function (node) {\n      return !node.attr('href') && (node.attr('id') || node.attr('name')) && !node.firstChild;\n    };\n    var setContentEditable = function (state) {\n      return function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n          if (isAnchorNode(nodes[i])) {\n            nodes[i].attr('contenteditable', state);\n          }\n        }\n      };\n    };\n    var setup = function (editor) {\n      editor.on('PreInit', function () {\n        editor.parser.addNodeFilter('a', setContentEditable('false'));\n        editor.serializer.addNodeFilter('a', setContentEditable(null));\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.addButton('anchor', {\n        icon: 'anchor',\n        tooltip: 'Anchor',\n        cmd: 'mceAnchor',\n        stateSelector: 'a:not([href])'\n      });\n      editor.addMenuItem('anchor', {\n        icon: 'anchor',\n        text: 'Anchor',\n        context: 'insert',\n        cmd: 'mceAnchor'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('anchor', function (editor) {\n      FilterContent.setup(editor);\n      Commands.register(editor);\n      Buttons.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/anchor/plugin.js\n// module id = 3saF\n// module chunks = 42"],"sourceRoot":""}