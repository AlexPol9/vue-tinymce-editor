{"version":3,"sources":["webpack:///static/js/22.0cc4bad9b5f20695f768.js","webpack:///./~/tinymce/plugins/legacyoutput/index.js","webpack:///./~/tinymce/plugins/legacyoutput/plugin.js"],"names":["webpackJsonp","YR2B","module","exports","__webpack_require__","nv1V","Plugin","global","tinymce","util","Tools","resolve","global$1","overrideFormats","editor","alignElements","fontSizes","explode","settings","font_size_style_values","schema","formatter","register","alignleft","selector","attributes","align","aligncenter","alignright","alignjustify","bold","inline","remove","styles","fontWeight","italic","fontStyle","underline","textDecoration","exact","strikethrough","fontname","face","fontsize","size","vars","inArray","value","forecolor","color","hilitecolor","backgroundColor","each","split","name","addValidElements","getElementRule","rule","attributesOrder","push","setup","inline_styles","on","Formats","addButton","items","fontsizeFormats","$","i","item","text","values","length","type","tooltip","fixedWidth","onPostRender","self","this","fontElm","dom","getParent","selection","getNode","onclick","e","control","execCommand","fonts","formats","replace","font_formats","font","raw","textStyle","indexOf","onselect","Buttons","add"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCGjC,EAAQ,SDSFC,KACA,SAAUH,EAAQC,IEhBxB,YACoB,WAChB,YAmNA,SAASG,MAjNT,GAAIC,GAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCE,EAAkB,SAAUC,GAC9B,GAAIC,GAAgB,mDAAoDC,EAAYJ,EAASK,QAAQH,EAAOI,SAASC,wBAAyBC,EAASN,EAAOM,MAC9JN,GAAOO,UAAUC,UACfC,WACEC,SAAUT,EACVU,YAAcC,MAAO,SAEvBC,aACEH,SAAUT,EACVU,YAAcC,MAAO,WAEvBE,YACEJ,SAAUT,EACVU,YAAcC,MAAO,UAEvBG,cACEL,SAAUT,EACVU,YAAcC,MAAO,YAEvBI,OAEIC,OAAQ,IACRC,OAAQ,QAGRD,OAAQ,SACRC,OAAQ,QAGRD,OAAQ,OACRE,QAAUC,WAAY,UAG1BC,SAEIJ,OAAQ,IACRC,OAAQ,QAGRD,OAAQ,KACRC,OAAQ,QAGRD,OAAQ,OACRE,QAAUG,UAAW,YAGzBC,YAEIN,OAAQ,IACRC,OAAQ,QAGRD,OAAQ,OACRE,QAAUK,eAAgB,aAC1BC,OAAO,IAGXC,gBAEIT,OAAQ,SACRC,OAAQ,QAGRD,OAAQ,OACRE,QAAUK,eAAgB,gBAC1BC,OAAO,IAGXE,UACEV,OAAQ,OACRN,YAAciB,KAAM,WAEtBC,UACEZ,OAAQ,OACRN,YACEmB,KAAM,SAAUC,GACd,MAAOjC,GAASkC,QAAQ9B,EAAW6B,EAAKE,OAAS,KAIvDC,WACEjB,OAAQ,OACRN,YAAcwB,MAAO,WAEvBC,aACEnB,OAAQ,OACRE,QAAUkB,gBAAiB,aAG/BvC,EAASwC,KAAK,eAAeC,MAAM,KAAM,SAAUC,GACjDlC,EAAOmC,iBAAiBD,EAAO,SAE5BlC,EAAOoC,eAAe,SACzBpC,EAAOmC,iBAAiB,+BAE1B3C,EAASwC,KAAKrC,EAAcsC,MAAM,KAAM,SAAUC,GAChD,GAAIG,GAAOrC,EAAOoC,eAAeF,EAC7BG,KACGA,EAAKhC,WAAWC,QACnB+B,EAAKhC,WAAWC,SAChB+B,EAAKC,gBAAgBC,KAAK,cAK9BC,EAAQ,SAAU9C,GACpBA,EAAOI,SAAS2C,eAAgB,EAChC/C,EAAOgD,GAAG,OAAQ,WAChBjD,EAAgBC,MAGhBiD,GAAYH,MAAOA,GAEnBtC,EAAW,SAAUR,GACvBA,EAAOkD,UAAU,iBAAkB,WACjC,GAAIC,MACAC,EAAkBpD,EAAOI,SAASgD,iBADG,iDAczC,OAZApD,GAAOqD,EAAEf,KAAKc,EAAgBb,MAAM,KAAM,SAAUe,EAAGC,GACrD,GAAIC,GAAOD,EAAMtB,EAAQsB,EACrBE,EAASF,EAAKhB,MAAM,IACpBkB,GAAOC,OAAS,IAClBF,EAAOC,EAAO,GACdxB,EAAQwB,EAAO,IAEjBN,EAAMN,MACJW,KAAMA,EACNvB,MAAOA,OAIT0B,KAAM,UACNH,KAAM,aACNI,QAAS,aACTH,OAAQN,EACRU,YAAY,EACZC,aAAc,WACZ,GAAIC,GAAOC,IACXhE,GAAOgD,GAAG,aAAc,WACtB,GAAIiB,EACJA,GAAUjE,EAAOkE,IAAIC,UAAUnE,EAAOoE,UAAUC,UAAW,QACvDJ,EACFF,EAAK9B,MAAMgC,EAAQnC,MAEnBiC,EAAK9B,MAAM,OAIjBqC,QAAS,SAAUC,GACbA,EAAEC,QAAQpE,SAAS6B,OACrBjC,EAAOyE,YAAY,YAAY,EAAOF,EAAEC,QAAQpE,SAAS6B,WAKjEjC,EAAOkD,UAAU,aAAc,WAS7B,GACIC,MAAYuB,EAThB,SAAuBC,GACrBA,EAAUA,EAAQC,QAAQ,KAAM,IAAIrC,MAAM,IAE1C,KADA,GAAIe,GAAIqB,EAAQjB,OACTJ,KACLqB,EAAQrB,GAAKqB,EAAQrB,GAAGf,MAAM,IAEhC,OAAOoC,IAG6B3E,EAAOI,SAASyE,cAD5B,ukBAS1B,OAPA7E,GAAOqD,EAAEf,KAAKoC,EAAO,SAAUpB,EAAGwB,GAChC3B,EAAMN,MACJW,MAAQuB,IAAKD,EAAK,IAClB7C,MAAO6C,EAAK,GACZE,WAAyC,IAA9BF,EAAK,GAAGG,QAAQ,SAAkB,eAAiBH,EAAK,GAAK,QAI1EnB,KAAM,UACNH,KAAM,cACNI,QAAS,cACTH,OAAQN,EACRU,YAAY,EACZC,aAAc,WACZ,GAAIC,GAAOC,IACXhE,GAAOgD,GAAG,aAAc,WACtB,GAAIiB,EACJA,GAAUjE,EAAOkE,IAAIC,UAAUnE,EAAOoE,UAAUC,UAAW,QACvDJ,EACFF,EAAK9B,MAAMgC,EAAQrC,MAEnBmC,EAAK9B,MAAM,OAIjBiD,SAAU,SAAUX,GACdA,EAAEC,QAAQpE,SAAS6B,OACrBjC,EAAOyE,YAAY,YAAY,EAAOF,EAAEC,QAAQpE,SAAS6B,YAM/DkD,GAAY3E,SAAUA,EAE1Bf,GAAO2F,IAAI,eAAgB,SAAUpF,GACnCiD,EAAQH,MAAM9C,GACdmF,EAAQ3E,SAASR","file":"static/js/22.0cc4bad9b5f20695f768.js","sourcesContent":["webpackJsonp([22],{\n\n/***/ \"YR2B\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"legacyoutput\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/legacyoutput')\n//   ES2015:\n//     import 'tinymce/plugins/legacyoutput'\n__webpack_require__(\"nv1V\");\n\n/***/ }),\n\n/***/ \"nv1V\":\n/***/ (function(module, exports) {\n\n(function () {\nvar legacyoutput = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var overrideFormats = function (editor) {\n      var alignElements = 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li,table,img', fontSizes = global$1.explode(editor.settings.font_size_style_values), schema = editor.schema;\n      editor.formatter.register({\n        alignleft: {\n          selector: alignElements,\n          attributes: { align: 'left' }\n        },\n        aligncenter: {\n          selector: alignElements,\n          attributes: { align: 'center' }\n        },\n        alignright: {\n          selector: alignElements,\n          attributes: { align: 'right' }\n        },\n        alignjustify: {\n          selector: alignElements,\n          attributes: { align: 'justify' }\n        },\n        bold: [\n          {\n            inline: 'b',\n            remove: 'all'\n          },\n          {\n            inline: 'strong',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { fontWeight: 'bold' }\n          }\n        ],\n        italic: [\n          {\n            inline: 'i',\n            remove: 'all'\n          },\n          {\n            inline: 'em',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { fontStyle: 'italic' }\n          }\n        ],\n        underline: [\n          {\n            inline: 'u',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { textDecoration: 'underline' },\n            exact: true\n          }\n        ],\n        strikethrough: [\n          {\n            inline: 'strike',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { textDecoration: 'line-through' },\n            exact: true\n          }\n        ],\n        fontname: {\n          inline: 'font',\n          attributes: { face: '%value' }\n        },\n        fontsize: {\n          inline: 'font',\n          attributes: {\n            size: function (vars) {\n              return global$1.inArray(fontSizes, vars.value) + 1;\n            }\n          }\n        },\n        forecolor: {\n          inline: 'font',\n          attributes: { color: '%value' }\n        },\n        hilitecolor: {\n          inline: 'font',\n          styles: { backgroundColor: '%value' }\n        }\n      });\n      global$1.each('b,i,u,strike'.split(','), function (name) {\n        schema.addValidElements(name + '[*]');\n      });\n      if (!schema.getElementRule('font')) {\n        schema.addValidElements('font[face|size|color|style]');\n      }\n      global$1.each(alignElements.split(','), function (name) {\n        var rule = schema.getElementRule(name);\n        if (rule) {\n          if (!rule.attributes.align) {\n            rule.attributes.align = {};\n            rule.attributesOrder.push('align');\n          }\n        }\n      });\n    };\n    var setup = function (editor) {\n      editor.settings.inline_styles = false;\n      editor.on('init', function () {\n        overrideFormats(editor);\n      });\n    };\n    var Formats = { setup: setup };\n\n    var register = function (editor) {\n      editor.addButton('fontsizeselect', function () {\n        var items = [], defaultFontsizeFormats = '8pt=1 10pt=2 12pt=3 14pt=4 18pt=5 24pt=6 36pt=7';\n        var fontsizeFormats = editor.settings.fontsizeFormats || defaultFontsizeFormats;\n        editor.$.each(fontsizeFormats.split(' '), function (i, item) {\n          var text = item, value = item;\n          var values = item.split('=');\n          if (values.length > 1) {\n            text = values[0];\n            value = values[1];\n          }\n          items.push({\n            text: text,\n            value: value\n          });\n        });\n        return {\n          type: 'listbox',\n          text: 'Font Sizes',\n          tooltip: 'Font Sizes',\n          values: items,\n          fixedWidth: true,\n          onPostRender: function () {\n            var self = this;\n            editor.on('NodeChange', function () {\n              var fontElm;\n              fontElm = editor.dom.getParent(editor.selection.getNode(), 'font');\n              if (fontElm) {\n                self.value(fontElm.size);\n              } else {\n                self.value('');\n              }\n            });\n          },\n          onclick: function (e) {\n            if (e.control.settings.value) {\n              editor.execCommand('FontSize', false, e.control.settings.value);\n            }\n          }\n        };\n      });\n      editor.addButton('fontselect', function () {\n        function createFormats(formats) {\n          formats = formats.replace(/;$/, '').split(';');\n          var i = formats.length;\n          while (i--) {\n            formats[i] = formats[i].split('=');\n          }\n          return formats;\n        }\n        var defaultFontsFormats = 'Andale Mono=andale mono,monospace;' + 'Arial=arial,helvetica,sans-serif;' + 'Arial Black=arial black,sans-serif;' + 'Book Antiqua=book antiqua,palatino,serif;' + 'Comic Sans MS=comic sans ms,sans-serif;' + 'Courier New=courier new,courier,monospace;' + 'Georgia=georgia,palatino,serif;' + 'Helvetica=helvetica,arial,sans-serif;' + 'Impact=impact,sans-serif;' + 'Symbol=symbol;' + 'Tahoma=tahoma,arial,helvetica,sans-serif;' + 'Terminal=terminal,monaco,monospace;' + 'Times New Roman=times new roman,times,serif;' + 'Trebuchet MS=trebuchet ms,geneva,sans-serif;' + 'Verdana=verdana,geneva,sans-serif;' + 'Webdings=webdings;' + 'Wingdings=wingdings,zapf dingbats';\n        var items = [], fonts = createFormats(editor.settings.font_formats || defaultFontsFormats);\n        editor.$.each(fonts, function (i, font) {\n          items.push({\n            text: { raw: font[0] },\n            value: font[1],\n            textStyle: font[1].indexOf('dings') === -1 ? 'font-family:' + font[1] : ''\n          });\n        });\n        return {\n          type: 'listbox',\n          text: 'Font Family',\n          tooltip: 'Font Family',\n          values: items,\n          fixedWidth: true,\n          onPostRender: function () {\n            var self = this;\n            editor.on('NodeChange', function () {\n              var fontElm;\n              fontElm = editor.dom.getParent(editor.selection.getNode(), 'font');\n              if (fontElm) {\n                self.value(fontElm.face);\n              } else {\n                self.value('');\n              }\n            });\n          },\n          onselect: function (e) {\n            if (e.control.settings.value) {\n              editor.execCommand('FontName', false, e.control.settings.value);\n            }\n          }\n        };\n      });\n    };\n    var Buttons = { register: register };\n\n    global.add('legacyoutput', function (editor) {\n      Formats.setup(editor);\n      Buttons.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/22.0cc4bad9b5f20695f768.js","// Exports the \"legacyoutput\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/legacyoutput')\n//   ES2015:\n//     import 'tinymce/plugins/legacyoutput'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/legacyoutput/index.js\n// module id = YR2B\n// module chunks = 22","(function () {\nvar legacyoutput = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var overrideFormats = function (editor) {\n      var alignElements = 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li,table,img', fontSizes = global$1.explode(editor.settings.font_size_style_values), schema = editor.schema;\n      editor.formatter.register({\n        alignleft: {\n          selector: alignElements,\n          attributes: { align: 'left' }\n        },\n        aligncenter: {\n          selector: alignElements,\n          attributes: { align: 'center' }\n        },\n        alignright: {\n          selector: alignElements,\n          attributes: { align: 'right' }\n        },\n        alignjustify: {\n          selector: alignElements,\n          attributes: { align: 'justify' }\n        },\n        bold: [\n          {\n            inline: 'b',\n            remove: 'all'\n          },\n          {\n            inline: 'strong',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { fontWeight: 'bold' }\n          }\n        ],\n        italic: [\n          {\n            inline: 'i',\n            remove: 'all'\n          },\n          {\n            inline: 'em',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { fontStyle: 'italic' }\n          }\n        ],\n        underline: [\n          {\n            inline: 'u',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { textDecoration: 'underline' },\n            exact: true\n          }\n        ],\n        strikethrough: [\n          {\n            inline: 'strike',\n            remove: 'all'\n          },\n          {\n            inline: 'span',\n            styles: { textDecoration: 'line-through' },\n            exact: true\n          }\n        ],\n        fontname: {\n          inline: 'font',\n          attributes: { face: '%value' }\n        },\n        fontsize: {\n          inline: 'font',\n          attributes: {\n            size: function (vars) {\n              return global$1.inArray(fontSizes, vars.value) + 1;\n            }\n          }\n        },\n        forecolor: {\n          inline: 'font',\n          attributes: { color: '%value' }\n        },\n        hilitecolor: {\n          inline: 'font',\n          styles: { backgroundColor: '%value' }\n        }\n      });\n      global$1.each('b,i,u,strike'.split(','), function (name) {\n        schema.addValidElements(name + '[*]');\n      });\n      if (!schema.getElementRule('font')) {\n        schema.addValidElements('font[face|size|color|style]');\n      }\n      global$1.each(alignElements.split(','), function (name) {\n        var rule = schema.getElementRule(name);\n        if (rule) {\n          if (!rule.attributes.align) {\n            rule.attributes.align = {};\n            rule.attributesOrder.push('align');\n          }\n        }\n      });\n    };\n    var setup = function (editor) {\n      editor.settings.inline_styles = false;\n      editor.on('init', function () {\n        overrideFormats(editor);\n      });\n    };\n    var Formats = { setup: setup };\n\n    var register = function (editor) {\n      editor.addButton('fontsizeselect', function () {\n        var items = [], defaultFontsizeFormats = '8pt=1 10pt=2 12pt=3 14pt=4 18pt=5 24pt=6 36pt=7';\n        var fontsizeFormats = editor.settings.fontsizeFormats || defaultFontsizeFormats;\n        editor.$.each(fontsizeFormats.split(' '), function (i, item) {\n          var text = item, value = item;\n          var values = item.split('=');\n          if (values.length > 1) {\n            text = values[0];\n            value = values[1];\n          }\n          items.push({\n            text: text,\n            value: value\n          });\n        });\n        return {\n          type: 'listbox',\n          text: 'Font Sizes',\n          tooltip: 'Font Sizes',\n          values: items,\n          fixedWidth: true,\n          onPostRender: function () {\n            var self = this;\n            editor.on('NodeChange', function () {\n              var fontElm;\n              fontElm = editor.dom.getParent(editor.selection.getNode(), 'font');\n              if (fontElm) {\n                self.value(fontElm.size);\n              } else {\n                self.value('');\n              }\n            });\n          },\n          onclick: function (e) {\n            if (e.control.settings.value) {\n              editor.execCommand('FontSize', false, e.control.settings.value);\n            }\n          }\n        };\n      });\n      editor.addButton('fontselect', function () {\n        function createFormats(formats) {\n          formats = formats.replace(/;$/, '').split(';');\n          var i = formats.length;\n          while (i--) {\n            formats[i] = formats[i].split('=');\n          }\n          return formats;\n        }\n        var defaultFontsFormats = 'Andale Mono=andale mono,monospace;' + 'Arial=arial,helvetica,sans-serif;' + 'Arial Black=arial black,sans-serif;' + 'Book Antiqua=book antiqua,palatino,serif;' + 'Comic Sans MS=comic sans ms,sans-serif;' + 'Courier New=courier new,courier,monospace;' + 'Georgia=georgia,palatino,serif;' + 'Helvetica=helvetica,arial,sans-serif;' + 'Impact=impact,sans-serif;' + 'Symbol=symbol;' + 'Tahoma=tahoma,arial,helvetica,sans-serif;' + 'Terminal=terminal,monaco,monospace;' + 'Times New Roman=times new roman,times,serif;' + 'Trebuchet MS=trebuchet ms,geneva,sans-serif;' + 'Verdana=verdana,geneva,sans-serif;' + 'Webdings=webdings;' + 'Wingdings=wingdings,zapf dingbats';\n        var items = [], fonts = createFormats(editor.settings.font_formats || defaultFontsFormats);\n        editor.$.each(fonts, function (i, font) {\n          items.push({\n            text: { raw: font[0] },\n            value: font[1],\n            textStyle: font[1].indexOf('dings') === -1 ? 'font-family:' + font[1] : ''\n          });\n        });\n        return {\n          type: 'listbox',\n          text: 'Font Family',\n          tooltip: 'Font Family',\n          values: items,\n          fixedWidth: true,\n          onPostRender: function () {\n            var self = this;\n            editor.on('NodeChange', function () {\n              var fontElm;\n              fontElm = editor.dom.getParent(editor.selection.getNode(), 'font');\n              if (fontElm) {\n                self.value(fontElm.face);\n              } else {\n                self.value('');\n              }\n            });\n          },\n          onselect: function (e) {\n            if (e.control.settings.value) {\n              editor.execCommand('FontName', false, e.control.settings.value);\n            }\n          }\n        };\n      });\n    };\n    var Buttons = { register: register };\n\n    global.add('legacyoutput', function (editor) {\n      Formats.setup(editor);\n      Buttons.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/legacyoutput/plugin.js\n// module id = nv1V\n// module chunks = 22"],"sourceRoot":""}