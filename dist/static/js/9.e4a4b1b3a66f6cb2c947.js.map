{"version":3,"sources":["webpack:///static/js/9.e4a4b1b3a66f6cb2c947.js","webpack:///./~/tinymce/plugins/tabfocus/plugin.js","webpack:///./~/tinymce/plugins/tabfocus/index.js"],"names":["webpackJsonp","1+T2","module","exports","domGlobals","Plugin","global","tinymce","util","Tools","resolve","global$1","global$2","global$3","global$4","global$5","global$6","getTabFocusElements","editor","getParam","getTabFocus","Settings","DOM","tabCancel","e","keyCode","TAB","ctrlKey","altKey","metaKey","preventDefault","setup","tabHandler","find","direction","canSelectRecursive","nodeName","type","style","display","visibility","parentNode","canSelect","el","test","tagName","get","id","tabIndex","select","each","i","x","length","v","isDefaultPrevented","explode","shiftKey","focusEditor","name","focus","setTimeout","webkit","window","on","inline","setAttrib","getBody","gecko","Keyboard","add","UFS3","__webpack_require__"],"mappings":"AAAAA,cAAc,IAERC,OACA,SAAUC,EAAQC,ICHxB,YACgB,SAAUC,GACtB,YAmHA,SAASC,MAjHT,GAAIC,GAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,wBAEtCE,EAAWL,QAAQC,KAAKC,MAAMC,QAAQ,yBAEtCG,EAAWN,QAAQC,KAAKC,MAAMC,QAAQ,eAEtCI,EAAWP,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCK,EAAWR,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCM,EAAWT,QAAQC,KAAKC,MAAMC,QAAQ,mBAEtCO,EAAsB,SAAUC,GAClC,MAAOA,GAAOC,SAAS,oBAAqB,gBAE1CC,EAAc,SAAUF,GAC1B,MAAOA,GAAOC,SAAS,YAAaF,EAAoBC,KAEtDG,GAAaD,YAAaA,GAE1BE,EAAMX,EAASW,IACfC,EAAY,SAAUC,GACpBA,EAAEC,UAAYT,EAASU,KAAQF,EAAEG,SAAYH,EAAEI,QAAWJ,EAAEK,SAC9DL,EAAEM,kBAGFC,EAAQ,SAAUb,GACpB,QAASc,GAAWR,GAKlB,QAASS,GAAKC,GAEZ,QAASC,GAAmBX,GAC1B,MAAsB,SAAfA,EAAEY,UAAkC,WAAXZ,EAAEa,MAAyC,SAApBb,EAAEc,MAAMC,SAA6C,WAAvBf,EAAEc,MAAME,YAA2BL,EAAmBX,EAAEiB,YAE/I,QAASC,GAAUC,GACjB,MAAO,wBAAwBC,KAAKD,EAAGE,UAAYjC,EAASkC,IAAItB,EAAEuB,MAAwB,IAAjBJ,EAAGK,UAAmBb,EAAmBQ,GAQpH,GAbAA,EAAKrB,EAAI2B,OAAO,0CAOhBlC,EAASmC,KAAKP,EAAI,SAAUnB,EAAG2B,GAC7B,GAAI3B,EAAEuB,KAAO7B,EAAO6B,GAElB,MADAK,GAAID,GACG,IAGPjB,EAAY,GACd,IAAKiB,EAAIC,EAAI,EAAGD,EAAIR,EAAGU,OAAQF,IAC7B,GAAIT,EAAUC,EAAGQ,IACf,MAAOR,GAAGQ,OAId,KAAKA,EAAIC,EAAI,EAAGD,GAAK,EAAGA,IACtB,GAAIT,EAAUC,EAAGQ,IACf,MAAOR,GAAGQ,EAIhB,OAAO,MA/BT,GAAIC,GAAGT,EAAIW,EAAGH,CACd,MAAI3B,EAAEC,UAAYT,EAASU,KAAOF,EAAEG,SAAWH,EAAEI,QAAUJ,EAAEK,SAAWL,EAAE+B,wBAgC1ED,EAAIvC,EAASyC,QAAQnC,EAASD,YAAYF,IACzB,IAAboC,EAAED,SACJC,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK,SAILX,EAFAnB,EAAEiC,SACS,UAATH,EAAE,GACCrB,GAAM,GAENX,EAAIwB,IAAIQ,EAAE,IAGJ,UAATA,EAAE,GACCrB,EAAK,GAELX,EAAIwB,IAAIQ,EAAE,KAGX,CACN,GAAII,GAAc9C,EAASkC,IAAIH,EAAGI,IAAMJ,EAAGgB,KACvChB,GAAGI,IAAMW,EACXA,EAAYE,QAEZ9C,EAAS+C,WAAW,WACbhD,EAASiD,QACZ1D,EAAW2D,OAAOH,QAEpBjB,EAAGiB,SACF,IAELpC,EAAEM,kBAGNZ,EAAO8C,GAAG,OAAQ,WACZ9C,EAAO+C,QACT3C,EAAI4C,UAAUhD,EAAOiD,UAAW,WAAY,MAE9CjD,EAAO8C,GAAG,QAASzC,GACfV,EAASuD,MACXlD,EAAO8C,GAAG,mBAAoBhC,GAE9Bd,EAAO8C,GAAG,UAAWhC,MAIvBqC,GAAatC,MAAOA,EAExBzB,GAAOgE,IAAI,WAAY,SAAUpD,GAC/BmD,EAAStC,MAAMb,MAOnB6C,YDWIQ,KACA,SAAUrE,EAAQC,EAASqE,GEhIjC,EAAQ","file":"static/js/9.e4a4b1b3a66f6cb2c947.js","sourcesContent":["webpackJsonp([9],{\n\n/***/ \"1+T2\":\n/***/ (function(module, exports) {\n\n(function () {\nvar tabfocus = (function (domGlobals) {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$5 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var global$6 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var getTabFocusElements = function (editor) {\n      return editor.getParam('tabfocus_elements', ':prev,:next');\n    };\n    var getTabFocus = function (editor) {\n      return editor.getParam('tab_focus', getTabFocusElements(editor));\n    };\n    var Settings = { getTabFocus: getTabFocus };\n\n    var DOM = global$1.DOM;\n    var tabCancel = function (e) {\n      if (e.keyCode === global$6.TAB && !e.ctrlKey && !e.altKey && !e.metaKey) {\n        e.preventDefault();\n      }\n    };\n    var setup = function (editor) {\n      function tabHandler(e) {\n        var x, el, v, i;\n        if (e.keyCode !== global$6.TAB || e.ctrlKey || e.altKey || e.metaKey || e.isDefaultPrevented()) {\n          return;\n        }\n        function find(direction) {\n          el = DOM.select(':input:enabled,*[tabindex]:not(iframe)');\n          function canSelectRecursive(e) {\n            return e.nodeName === 'BODY' || e.type !== 'hidden' && e.style.display !== 'none' && e.style.visibility !== 'hidden' && canSelectRecursive(e.parentNode);\n          }\n          function canSelect(el) {\n            return /INPUT|TEXTAREA|BUTTON/.test(el.tagName) && global$2.get(e.id) && el.tabIndex !== -1 && canSelectRecursive(el);\n          }\n          global$5.each(el, function (e, i) {\n            if (e.id === editor.id) {\n              x = i;\n              return false;\n            }\n          });\n          if (direction > 0) {\n            for (i = x + 1; i < el.length; i++) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          } else {\n            for (i = x - 1; i >= 0; i--) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          }\n          return null;\n        }\n        v = global$5.explode(Settings.getTabFocus(editor));\n        if (v.length === 1) {\n          v[1] = v[0];\n          v[0] = ':prev';\n        }\n        if (e.shiftKey) {\n          if (v[0] === ':prev') {\n            el = find(-1);\n          } else {\n            el = DOM.get(v[0]);\n          }\n        } else {\n          if (v[1] === ':next') {\n            el = find(1);\n          } else {\n            el = DOM.get(v[1]);\n          }\n        }\n        if (el) {\n          var focusEditor = global$2.get(el.id || el.name);\n          if (el.id && focusEditor) {\n            focusEditor.focus();\n          } else {\n            global$4.setTimeout(function () {\n              if (!global$3.webkit) {\n                domGlobals.window.focus();\n              }\n              el.focus();\n            }, 10);\n          }\n          e.preventDefault();\n        }\n      }\n      editor.on('init', function () {\n        if (editor.inline) {\n          DOM.setAttrib(editor.getBody(), 'tabIndex', null);\n        }\n        editor.on('keyup', tabCancel);\n        if (global$3.gecko) {\n          editor.on('keypress keydown', tabHandler);\n        } else {\n          editor.on('keydown', tabHandler);\n        }\n      });\n    };\n    var Keyboard = { setup: setup };\n\n    global.add('tabfocus', function (editor) {\n      Keyboard.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n/***/ }),\n\n/***/ \"UFS3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"tabfocus\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/tabfocus')\n//   ES2015:\n//     import 'tinymce/plugins/tabfocus'\n__webpack_require__(\"1+T2\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/9.e4a4b1b3a66f6cb2c947.js","(function () {\nvar tabfocus = (function (domGlobals) {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$5 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var global$6 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var getTabFocusElements = function (editor) {\n      return editor.getParam('tabfocus_elements', ':prev,:next');\n    };\n    var getTabFocus = function (editor) {\n      return editor.getParam('tab_focus', getTabFocusElements(editor));\n    };\n    var Settings = { getTabFocus: getTabFocus };\n\n    var DOM = global$1.DOM;\n    var tabCancel = function (e) {\n      if (e.keyCode === global$6.TAB && !e.ctrlKey && !e.altKey && !e.metaKey) {\n        e.preventDefault();\n      }\n    };\n    var setup = function (editor) {\n      function tabHandler(e) {\n        var x, el, v, i;\n        if (e.keyCode !== global$6.TAB || e.ctrlKey || e.altKey || e.metaKey || e.isDefaultPrevented()) {\n          return;\n        }\n        function find(direction) {\n          el = DOM.select(':input:enabled,*[tabindex]:not(iframe)');\n          function canSelectRecursive(e) {\n            return e.nodeName === 'BODY' || e.type !== 'hidden' && e.style.display !== 'none' && e.style.visibility !== 'hidden' && canSelectRecursive(e.parentNode);\n          }\n          function canSelect(el) {\n            return /INPUT|TEXTAREA|BUTTON/.test(el.tagName) && global$2.get(e.id) && el.tabIndex !== -1 && canSelectRecursive(el);\n          }\n          global$5.each(el, function (e, i) {\n            if (e.id === editor.id) {\n              x = i;\n              return false;\n            }\n          });\n          if (direction > 0) {\n            for (i = x + 1; i < el.length; i++) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          } else {\n            for (i = x - 1; i >= 0; i--) {\n              if (canSelect(el[i])) {\n                return el[i];\n              }\n            }\n          }\n          return null;\n        }\n        v = global$5.explode(Settings.getTabFocus(editor));\n        if (v.length === 1) {\n          v[1] = v[0];\n          v[0] = ':prev';\n        }\n        if (e.shiftKey) {\n          if (v[0] === ':prev') {\n            el = find(-1);\n          } else {\n            el = DOM.get(v[0]);\n          }\n        } else {\n          if (v[1] === ':next') {\n            el = find(1);\n          } else {\n            el = DOM.get(v[1]);\n          }\n        }\n        if (el) {\n          var focusEditor = global$2.get(el.id || el.name);\n          if (el.id && focusEditor) {\n            focusEditor.focus();\n          } else {\n            global$4.setTimeout(function () {\n              if (!global$3.webkit) {\n                domGlobals.window.focus();\n              }\n              el.focus();\n            }, 10);\n          }\n          e.preventDefault();\n        }\n      }\n      editor.on('init', function () {\n        if (editor.inline) {\n          DOM.setAttrib(editor.getBody(), 'tabIndex', null);\n        }\n        editor.on('keyup', tabCancel);\n        if (global$3.gecko) {\n          editor.on('keypress keydown', tabHandler);\n        } else {\n          editor.on('keydown', tabHandler);\n        }\n      });\n    };\n    var Keyboard = { setup: setup };\n\n    global.add('tabfocus', function (editor) {\n      Keyboard.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/tabfocus/plugin.js\n// module id = 1+T2\n// module chunks = 9","// Exports the \"tabfocus\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/tabfocus')\n//   ES2015:\n//     import 'tinymce/plugins/tabfocus'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/tabfocus/index.js\n// module id = UFS3\n// module chunks = 9"],"sourceRoot":""}