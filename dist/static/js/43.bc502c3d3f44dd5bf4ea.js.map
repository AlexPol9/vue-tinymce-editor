{"version":3,"sources":["webpack:///static/js/43.bc502c3d3f44dd5bf4ea.js","webpack:///./~/tinymce/plugins/advlist/index.js","webpack:///./~/tinymce/plugins/advlist/plugin.js"],"names":["webpackJsonp","Abny","module","exports","__webpack_require__","tfhO","Plugin","global","tinymce","util","Tools","resolve","global$1","applyListFormat","editor","listName","styleValue","cmd","execCommand","Actions","register","addCommand","ui","value","Commands","getNumberStyles","styles","getParam","split","getBulletStyles","Settings","isChildOfBody","elm","$","contains","getBody","isTableCellNode","node","test","nodeName","isListNode","getSelectedStyleType","listElm","dom","getParent","selection","getNode","getStyle","ListUtils","styleValueToText","replace","chr","toUpperCase","toMenuItems","map","text","data","ListStyles","findIndex","list","predicate","index","length","listState","e","ctrl","control","on","tableCellIndex","parents","slice","lists","grep","active","updateSelection","listStyleType","items","each","settings","addSplitButton","id","tooltip","addButton","type","menu","onPostRender","onshow","onselect","onclick","addControl","register$1","Buttons","add","plugin","plugins","inArray"],"mappings":"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","file":"static/js/43.bc502c3d3f44dd5bf4ea.js","sourcesContent":["webpackJsonp([43],{\n\n/***/ \"Abny\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"advlist\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/advlist')\n//   ES2015:\n//     import 'tinymce/plugins/advlist'\n__webpack_require__(\"tfhO\");\n\n/***/ }),\n\n/***/ \"tfhO\":\n/***/ (function(module, exports) {\n\n(function () {\nvar advlist = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var applyListFormat = function (editor, listName, styleValue) {\n      var cmd = listName === 'UL' ? 'InsertUnorderedList' : 'InsertOrderedList';\n      editor.execCommand(cmd, false, styleValue === false ? null : { 'list-style-type': styleValue });\n    };\n    var Actions = { applyListFormat: applyListFormat };\n\n    var register = function (editor) {\n      editor.addCommand('ApplyUnorderedListStyle', function (ui, value) {\n        Actions.applyListFormat(editor, 'UL', value['list-style-type']);\n      });\n      editor.addCommand('ApplyOrderedListStyle', function (ui, value) {\n        Actions.applyListFormat(editor, 'OL', value['list-style-type']);\n      });\n    };\n    var Commands = { register: register };\n\n    var getNumberStyles = function (editor) {\n      var styles = editor.getParam('advlist_number_styles', 'default,lower-alpha,lower-greek,lower-roman,upper-alpha,upper-roman');\n      return styles ? styles.split(/[ ,]/) : [];\n    };\n    var getBulletStyles = function (editor) {\n      var styles = editor.getParam('advlist_bullet_styles', 'default,circle,disc,square');\n      return styles ? styles.split(/[ ,]/) : [];\n    };\n    var Settings = {\n      getNumberStyles: getNumberStyles,\n      getBulletStyles: getBulletStyles\n    };\n\n    var isChildOfBody = function (editor, elm) {\n      return editor.$.contains(editor.getBody(), elm);\n    };\n    var isTableCellNode = function (node) {\n      return node && /^(TH|TD)$/.test(node.nodeName);\n    };\n    var isListNode = function (editor) {\n      return function (node) {\n        return node && /^(OL|UL|DL)$/.test(node.nodeName) && isChildOfBody(editor, node);\n      };\n    };\n    var getSelectedStyleType = function (editor) {\n      var listElm = editor.dom.getParent(editor.selection.getNode(), 'ol,ul');\n      return editor.dom.getStyle(listElm, 'listStyleType') || '';\n    };\n    var ListUtils = {\n      isTableCellNode: isTableCellNode,\n      isListNode: isListNode,\n      getSelectedStyleType: getSelectedStyleType\n    };\n\n    var styleValueToText = function (styleValue) {\n      return styleValue.replace(/\\-/g, ' ').replace(/\\b\\w/g, function (chr) {\n        return chr.toUpperCase();\n      });\n    };\n    var toMenuItems = function (styles) {\n      return global$1.map(styles, function (styleValue) {\n        var text = styleValueToText(styleValue);\n        var data = styleValue === 'default' ? '' : styleValue;\n        return {\n          text: text,\n          data: data\n        };\n      });\n    };\n    var ListStyles = { toMenuItems: toMenuItems };\n\n    var findIndex = function (list, predicate) {\n      for (var index = 0; index < list.length; index++) {\n        var element = list[index];\n        if (predicate(element)) {\n          return index;\n        }\n      }\n      return -1;\n    };\n    var listState = function (editor, listName) {\n      return function (e) {\n        var ctrl = e.control;\n        editor.on('NodeChange', function (e) {\n          var tableCellIndex = findIndex(e.parents, ListUtils.isTableCellNode);\n          var parents = tableCellIndex !== -1 ? e.parents.slice(0, tableCellIndex) : e.parents;\n          var lists = global$1.grep(parents, ListUtils.isListNode(editor));\n          ctrl.active(lists.length > 0 && lists[0].nodeName === listName);\n        });\n      };\n    };\n    var updateSelection = function (editor) {\n      return function (e) {\n        var listStyleType = ListUtils.getSelectedStyleType(editor);\n        e.control.items().each(function (ctrl) {\n          ctrl.active(ctrl.settings.data === listStyleType);\n        });\n      };\n    };\n    var addSplitButton = function (editor, id, tooltip, cmd, nodeName, styles) {\n      editor.addButton(id, {\n        active: false,\n        type: 'splitbutton',\n        tooltip: tooltip,\n        menu: ListStyles.toMenuItems(styles),\n        onPostRender: listState(editor, nodeName),\n        onshow: updateSelection(editor),\n        onselect: function (e) {\n          Actions.applyListFormat(editor, nodeName, e.control.settings.data);\n        },\n        onclick: function () {\n          editor.execCommand(cmd);\n        }\n      });\n    };\n    var addButton = function (editor, id, tooltip, cmd, nodeName, styles) {\n      editor.addButton(id, {\n        active: false,\n        type: 'button',\n        tooltip: tooltip,\n        onPostRender: listState(editor, nodeName),\n        onclick: function () {\n          editor.execCommand(cmd);\n        }\n      });\n    };\n    var addControl = function (editor, id, tooltip, cmd, nodeName, styles) {\n      if (styles.length > 0) {\n        addSplitButton(editor, id, tooltip, cmd, nodeName, styles);\n      } else {\n        addButton(editor, id, tooltip, cmd, nodeName);\n      }\n    };\n    var register$1 = function (editor) {\n      addControl(editor, 'numlist', 'Numbered list', 'InsertOrderedList', 'OL', Settings.getNumberStyles(editor));\n      addControl(editor, 'bullist', 'Bullet list', 'InsertUnorderedList', 'UL', Settings.getBulletStyles(editor));\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('advlist', function (editor) {\n      var hasPlugin = function (editor, plugin) {\n        var plugins = editor.settings.plugins ? editor.settings.plugins : '';\n        return global$1.inArray(plugins.split(/[ ,]/), plugin) !== -1;\n      };\n      if (hasPlugin(editor, 'lists')) {\n        Buttons.register(editor);\n        Commands.register(editor);\n      }\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/43.bc502c3d3f44dd5bf4ea.js","// Exports the \"advlist\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/advlist')\n//   ES2015:\n//     import 'tinymce/plugins/advlist'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/advlist/index.js\n// module id = Abny\n// module chunks = 43","(function () {\nvar advlist = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var applyListFormat = function (editor, listName, styleValue) {\n      var cmd = listName === 'UL' ? 'InsertUnorderedList' : 'InsertOrderedList';\n      editor.execCommand(cmd, false, styleValue === false ? null : { 'list-style-type': styleValue });\n    };\n    var Actions = { applyListFormat: applyListFormat };\n\n    var register = function (editor) {\n      editor.addCommand('ApplyUnorderedListStyle', function (ui, value) {\n        Actions.applyListFormat(editor, 'UL', value['list-style-type']);\n      });\n      editor.addCommand('ApplyOrderedListStyle', function (ui, value) {\n        Actions.applyListFormat(editor, 'OL', value['list-style-type']);\n      });\n    };\n    var Commands = { register: register };\n\n    var getNumberStyles = function (editor) {\n      var styles = editor.getParam('advlist_number_styles', 'default,lower-alpha,lower-greek,lower-roman,upper-alpha,upper-roman');\n      return styles ? styles.split(/[ ,]/) : [];\n    };\n    var getBulletStyles = function (editor) {\n      var styles = editor.getParam('advlist_bullet_styles', 'default,circle,disc,square');\n      return styles ? styles.split(/[ ,]/) : [];\n    };\n    var Settings = {\n      getNumberStyles: getNumberStyles,\n      getBulletStyles: getBulletStyles\n    };\n\n    var isChildOfBody = function (editor, elm) {\n      return editor.$.contains(editor.getBody(), elm);\n    };\n    var isTableCellNode = function (node) {\n      return node && /^(TH|TD)$/.test(node.nodeName);\n    };\n    var isListNode = function (editor) {\n      return function (node) {\n        return node && /^(OL|UL|DL)$/.test(node.nodeName) && isChildOfBody(editor, node);\n      };\n    };\n    var getSelectedStyleType = function (editor) {\n      var listElm = editor.dom.getParent(editor.selection.getNode(), 'ol,ul');\n      return editor.dom.getStyle(listElm, 'listStyleType') || '';\n    };\n    var ListUtils = {\n      isTableCellNode: isTableCellNode,\n      isListNode: isListNode,\n      getSelectedStyleType: getSelectedStyleType\n    };\n\n    var styleValueToText = function (styleValue) {\n      return styleValue.replace(/\\-/g, ' ').replace(/\\b\\w/g, function (chr) {\n        return chr.toUpperCase();\n      });\n    };\n    var toMenuItems = function (styles) {\n      return global$1.map(styles, function (styleValue) {\n        var text = styleValueToText(styleValue);\n        var data = styleValue === 'default' ? '' : styleValue;\n        return {\n          text: text,\n          data: data\n        };\n      });\n    };\n    var ListStyles = { toMenuItems: toMenuItems };\n\n    var findIndex = function (list, predicate) {\n      for (var index = 0; index < list.length; index++) {\n        var element = list[index];\n        if (predicate(element)) {\n          return index;\n        }\n      }\n      return -1;\n    };\n    var listState = function (editor, listName) {\n      return function (e) {\n        var ctrl = e.control;\n        editor.on('NodeChange', function (e) {\n          var tableCellIndex = findIndex(e.parents, ListUtils.isTableCellNode);\n          var parents = tableCellIndex !== -1 ? e.parents.slice(0, tableCellIndex) : e.parents;\n          var lists = global$1.grep(parents, ListUtils.isListNode(editor));\n          ctrl.active(lists.length > 0 && lists[0].nodeName === listName);\n        });\n      };\n    };\n    var updateSelection = function (editor) {\n      return function (e) {\n        var listStyleType = ListUtils.getSelectedStyleType(editor);\n        e.control.items().each(function (ctrl) {\n          ctrl.active(ctrl.settings.data === listStyleType);\n        });\n      };\n    };\n    var addSplitButton = function (editor, id, tooltip, cmd, nodeName, styles) {\n      editor.addButton(id, {\n        active: false,\n        type: 'splitbutton',\n        tooltip: tooltip,\n        menu: ListStyles.toMenuItems(styles),\n        onPostRender: listState(editor, nodeName),\n        onshow: updateSelection(editor),\n        onselect: function (e) {\n          Actions.applyListFormat(editor, nodeName, e.control.settings.data);\n        },\n        onclick: function () {\n          editor.execCommand(cmd);\n        }\n      });\n    };\n    var addButton = function (editor, id, tooltip, cmd, nodeName, styles) {\n      editor.addButton(id, {\n        active: false,\n        type: 'button',\n        tooltip: tooltip,\n        onPostRender: listState(editor, nodeName),\n        onclick: function () {\n          editor.execCommand(cmd);\n        }\n      });\n    };\n    var addControl = function (editor, id, tooltip, cmd, nodeName, styles) {\n      if (styles.length > 0) {\n        addSplitButton(editor, id, tooltip, cmd, nodeName, styles);\n      } else {\n        addButton(editor, id, tooltip, cmd, nodeName);\n      }\n    };\n    var register$1 = function (editor) {\n      addControl(editor, 'numlist', 'Numbered list', 'InsertOrderedList', 'OL', Settings.getNumberStyles(editor));\n      addControl(editor, 'bullist', 'Bullet list', 'InsertUnorderedList', 'UL', Settings.getBulletStyles(editor));\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('advlist', function (editor) {\n      var hasPlugin = function (editor, plugin) {\n        var plugins = editor.settings.plugins ? editor.settings.plugins : '';\n        return global$1.inArray(plugins.split(/[ ,]/), plugin) !== -1;\n      };\n      if (hasPlugin(editor, 'lists')) {\n        Buttons.register(editor);\n        Commands.register(editor);\n      }\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/advlist/plugin.js\n// module id = tfhO\n// module chunks = 43"],"sourceRoot":""}