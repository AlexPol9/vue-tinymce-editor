{"version":3,"sources":["webpack:///static/js/39.994dd37a30133d81e73f.js","webpack:///./~/tinymce/plugins/autosave/plugin.js","webpack:///./~/tinymce/plugins/autosave/index.js"],"names":["webpackJsonp","eRbm","module","exports","domGlobals","curry","fn","initialArgs","_i","arguments","length","restArgs","all","concat","apply","Plugin","Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","global$1","global$2","fireRestoreDraft","editor","fire","fireStoreDraft","fireRemoveDraft","parse","timeString","defaultTime","multiples","s","m","toParse","parsedTime","exec","parseInt","shouldAskBeforeUnload","getParam","getAutoSavePrefix","prefix","replace","document","location","pathname","search","hash","id","shouldRestoreWhenEmpty","getAutoSaveInterval","settings","autosave_interval","getAutoSaveRetention","autosave_retention","isEmpty","html","forcedRootBlockName","forced_root_block","trim","getBody","innerHTML","RegExp","test","hasDraft","time","getItem","Date","getTime","removeDraft","removeItem","storeDraft","isDirty","setItem","getContent","format","no_events","toString","restoreDraft","setContent","startStoreDraft","started","interval","setInterval","removed","restoreLastDraft","undoManager","transact","focus","global$3","_beforeUnloadHandler","msg","each","plugins","autosave","translate","setup","window","onbeforeunload","postRender","e","ctrl","control","disabled","on","register","addButton","title","onclick","onPostRender","addMenuItem","text","context","add","dom","mV4C","__webpack_require__"],"mappings":"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","file":"static/js/39.994dd37a30133d81e73f.js","sourcesContent":["webpackJsonp([39],{\n\n/***/ \"eRbm\":\n/***/ (function(module, exports) {\n\n(function () {\nvar autosave = (function (domGlobals) {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.LocalStorage');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var fireRestoreDraft = function (editor) {\n      return editor.fire('RestoreDraft');\n    };\n    var fireStoreDraft = function (editor) {\n      return editor.fire('StoreDraft');\n    };\n    var fireRemoveDraft = function (editor) {\n      return editor.fire('RemoveDraft');\n    };\n\n    var parse = function (timeString, defaultTime) {\n      var multiples = {\n        s: 1000,\n        m: 60000\n      };\n      var toParse = timeString || defaultTime;\n      var parsedTime = /^(\\d+)([ms]?)$/.exec('' + toParse);\n      return (parsedTime[2] ? multiples[parsedTime[2]] : 1) * parseInt(toParse, 10);\n    };\n\n    var shouldAskBeforeUnload = function (editor) {\n      return editor.getParam('autosave_ask_before_unload', true);\n    };\n    var getAutoSavePrefix = function (editor) {\n      var prefix = editor.getParam('autosave_prefix', 'tinymce-autosave-{path}{query}{hash}-{id}-');\n      prefix = prefix.replace(/\\{path\\}/g, domGlobals.document.location.pathname);\n      prefix = prefix.replace(/\\{query\\}/g, domGlobals.document.location.search);\n      prefix = prefix.replace(/\\{hash\\}/g, domGlobals.document.location.hash);\n      prefix = prefix.replace(/\\{id\\}/g, editor.id);\n      return prefix;\n    };\n    var shouldRestoreWhenEmpty = function (editor) {\n      return editor.getParam('autosave_restore_when_empty', false);\n    };\n    var getAutoSaveInterval = function (editor) {\n      return parse(editor.settings.autosave_interval, '30s');\n    };\n    var getAutoSaveRetention = function (editor) {\n      return parse(editor.settings.autosave_retention, '20m');\n    };\n\n    var isEmpty = function (editor, html) {\n      var forcedRootBlockName = editor.settings.forced_root_block;\n      html = global$2.trim(typeof html === 'undefined' ? editor.getBody().innerHTML : html);\n      return html === '' || new RegExp('^<' + forcedRootBlockName + '[^>]*>((\\xA0|&nbsp;|[ \\t]|<br[^>]*>)+?|)</' + forcedRootBlockName + '>|<br>$', 'i').test(html);\n    };\n    var hasDraft = function (editor) {\n      var time = parseInt(global$1.getItem(getAutoSavePrefix(editor) + 'time'), 10) || 0;\n      if (new Date().getTime() - time > getAutoSaveRetention(editor)) {\n        removeDraft(editor, false);\n        return false;\n      }\n      return true;\n    };\n    var removeDraft = function (editor, fire) {\n      var prefix = getAutoSavePrefix(editor);\n      global$1.removeItem(prefix + 'draft');\n      global$1.removeItem(prefix + 'time');\n      if (fire !== false) {\n        fireRemoveDraft(editor);\n      }\n    };\n    var storeDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (!isEmpty(editor) && editor.isDirty()) {\n        global$1.setItem(prefix + 'draft', editor.getContent({\n          format: 'raw',\n          no_events: true\n        }));\n        global$1.setItem(prefix + 'time', new Date().getTime().toString());\n        fireStoreDraft(editor);\n      }\n    };\n    var restoreDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (hasDraft(editor)) {\n        editor.setContent(global$1.getItem(prefix + 'draft'), { format: 'raw' });\n        fireRestoreDraft(editor);\n      }\n    };\n    var startStoreDraft = function (editor, started) {\n      var interval = getAutoSaveInterval(editor);\n      if (!started.get()) {\n        setInterval(function () {\n          if (!editor.removed) {\n            storeDraft(editor);\n          }\n        }, interval);\n        started.set(true);\n      }\n    };\n    var restoreLastDraft = function (editor) {\n      editor.undoManager.transact(function () {\n        restoreDraft(editor);\n        removeDraft(editor);\n      });\n      editor.focus();\n    };\n\n    function curry(fn) {\n      var initialArgs = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        initialArgs[_i - 1] = arguments[_i];\n      }\n      return function () {\n        var restArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          restArgs[_i] = arguments[_i];\n        }\n        var all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n      };\n    }\n\n    var get = function (editor) {\n      return {\n        hasDraft: curry(hasDraft, editor),\n        storeDraft: curry(storeDraft, editor),\n        restoreDraft: curry(restoreDraft, editor),\n        removeDraft: curry(removeDraft, editor),\n        isEmpty: curry(isEmpty, editor)\n      };\n    };\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    global$3._beforeUnloadHandler = function () {\n      var msg;\n      global$2.each(global$3.get(), function (editor) {\n        if (editor.plugins.autosave) {\n          editor.plugins.autosave.storeDraft();\n        }\n        if (!msg && editor.isDirty() && shouldAskBeforeUnload(editor)) {\n          msg = editor.translate('You have unsaved changes are you sure you want to navigate away?');\n        }\n      });\n      return msg;\n    };\n    var setup = function (editor) {\n      domGlobals.window.onbeforeunload = global$3._beforeUnloadHandler;\n    };\n\n    var postRender = function (editor, started) {\n      return function (e) {\n        var ctrl = e.control;\n        ctrl.disabled(!hasDraft(editor));\n        editor.on('StoreDraft RestoreDraft RemoveDraft', function () {\n          ctrl.disabled(!hasDraft(editor));\n        });\n        startStoreDraft(editor, started);\n      };\n    };\n    var register = function (editor, started) {\n      editor.addButton('restoredraft', {\n        title: 'Restore last draft',\n        onclick: function () {\n          restoreLastDraft(editor);\n        },\n        onPostRender: postRender(editor, started)\n      });\n      editor.addMenuItem('restoredraft', {\n        text: 'Restore last draft',\n        onclick: function () {\n          restoreLastDraft(editor);\n        },\n        onPostRender: postRender(editor, started),\n        context: 'file'\n      });\n    };\n\n    global.add('autosave', function (editor) {\n      var started = Cell(false);\n      setup();\n      register(editor, started);\n      editor.on('init', function () {\n        if (shouldRestoreWhenEmpty(editor) && editor.dom.isEmpty(editor.getBody())) {\n          restoreDraft(editor);\n        }\n      });\n      return get(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n/***/ }),\n\n/***/ \"mV4C\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"autosave\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autosave')\n//   ES2015:\n//     import 'tinymce/plugins/autosave'\n__webpack_require__(\"eRbm\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/39.994dd37a30133d81e73f.js","(function () {\nvar autosave = (function (domGlobals) {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.LocalStorage');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var fireRestoreDraft = function (editor) {\n      return editor.fire('RestoreDraft');\n    };\n    var fireStoreDraft = function (editor) {\n      return editor.fire('StoreDraft');\n    };\n    var fireRemoveDraft = function (editor) {\n      return editor.fire('RemoveDraft');\n    };\n\n    var parse = function (timeString, defaultTime) {\n      var multiples = {\n        s: 1000,\n        m: 60000\n      };\n      var toParse = timeString || defaultTime;\n      var parsedTime = /^(\\d+)([ms]?)$/.exec('' + toParse);\n      return (parsedTime[2] ? multiples[parsedTime[2]] : 1) * parseInt(toParse, 10);\n    };\n\n    var shouldAskBeforeUnload = function (editor) {\n      return editor.getParam('autosave_ask_before_unload', true);\n    };\n    var getAutoSavePrefix = function (editor) {\n      var prefix = editor.getParam('autosave_prefix', 'tinymce-autosave-{path}{query}{hash}-{id}-');\n      prefix = prefix.replace(/\\{path\\}/g, domGlobals.document.location.pathname);\n      prefix = prefix.replace(/\\{query\\}/g, domGlobals.document.location.search);\n      prefix = prefix.replace(/\\{hash\\}/g, domGlobals.document.location.hash);\n      prefix = prefix.replace(/\\{id\\}/g, editor.id);\n      return prefix;\n    };\n    var shouldRestoreWhenEmpty = function (editor) {\n      return editor.getParam('autosave_restore_when_empty', false);\n    };\n    var getAutoSaveInterval = function (editor) {\n      return parse(editor.settings.autosave_interval, '30s');\n    };\n    var getAutoSaveRetention = function (editor) {\n      return parse(editor.settings.autosave_retention, '20m');\n    };\n\n    var isEmpty = function (editor, html) {\n      var forcedRootBlockName = editor.settings.forced_root_block;\n      html = global$2.trim(typeof html === 'undefined' ? editor.getBody().innerHTML : html);\n      return html === '' || new RegExp('^<' + forcedRootBlockName + '[^>]*>((\\xA0|&nbsp;|[ \\t]|<br[^>]*>)+?|)</' + forcedRootBlockName + '>|<br>$', 'i').test(html);\n    };\n    var hasDraft = function (editor) {\n      var time = parseInt(global$1.getItem(getAutoSavePrefix(editor) + 'time'), 10) || 0;\n      if (new Date().getTime() - time > getAutoSaveRetention(editor)) {\n        removeDraft(editor, false);\n        return false;\n      }\n      return true;\n    };\n    var removeDraft = function (editor, fire) {\n      var prefix = getAutoSavePrefix(editor);\n      global$1.removeItem(prefix + 'draft');\n      global$1.removeItem(prefix + 'time');\n      if (fire !== false) {\n        fireRemoveDraft(editor);\n      }\n    };\n    var storeDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (!isEmpty(editor) && editor.isDirty()) {\n        global$1.setItem(prefix + 'draft', editor.getContent({\n          format: 'raw',\n          no_events: true\n        }));\n        global$1.setItem(prefix + 'time', new Date().getTime().toString());\n        fireStoreDraft(editor);\n      }\n    };\n    var restoreDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (hasDraft(editor)) {\n        editor.setContent(global$1.getItem(prefix + 'draft'), { format: 'raw' });\n        fireRestoreDraft(editor);\n      }\n    };\n    var startStoreDraft = function (editor, started) {\n      var interval = getAutoSaveInterval(editor);\n      if (!started.get()) {\n        setInterval(function () {\n          if (!editor.removed) {\n            storeDraft(editor);\n          }\n        }, interval);\n        started.set(true);\n      }\n    };\n    var restoreLastDraft = function (editor) {\n      editor.undoManager.transact(function () {\n        restoreDraft(editor);\n        removeDraft(editor);\n      });\n      editor.focus();\n    };\n\n    function curry(fn) {\n      var initialArgs = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        initialArgs[_i - 1] = arguments[_i];\n      }\n      return function () {\n        var restArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          restArgs[_i] = arguments[_i];\n        }\n        var all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n      };\n    }\n\n    var get = function (editor) {\n      return {\n        hasDraft: curry(hasDraft, editor),\n        storeDraft: curry(storeDraft, editor),\n        restoreDraft: curry(restoreDraft, editor),\n        removeDraft: curry(removeDraft, editor),\n        isEmpty: curry(isEmpty, editor)\n      };\n    };\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    global$3._beforeUnloadHandler = function () {\n      var msg;\n      global$2.each(global$3.get(), function (editor) {\n        if (editor.plugins.autosave) {\n          editor.plugins.autosave.storeDraft();\n        }\n        if (!msg && editor.isDirty() && shouldAskBeforeUnload(editor)) {\n          msg = editor.translate('You have unsaved changes are you sure you want to navigate away?');\n        }\n      });\n      return msg;\n    };\n    var setup = function (editor) {\n      domGlobals.window.onbeforeunload = global$3._beforeUnloadHandler;\n    };\n\n    var postRender = function (editor, started) {\n      return function (e) {\n        var ctrl = e.control;\n        ctrl.disabled(!hasDraft(editor));\n        editor.on('StoreDraft RestoreDraft RemoveDraft', function () {\n          ctrl.disabled(!hasDraft(editor));\n        });\n        startStoreDraft(editor, started);\n      };\n    };\n    var register = function (editor, started) {\n      editor.addButton('restoredraft', {\n        title: 'Restore last draft',\n        onclick: function () {\n          restoreLastDraft(editor);\n        },\n        onPostRender: postRender(editor, started)\n      });\n      editor.addMenuItem('restoredraft', {\n        text: 'Restore last draft',\n        onclick: function () {\n          restoreLastDraft(editor);\n        },\n        onPostRender: postRender(editor, started),\n        context: 'file'\n      });\n    };\n\n    global.add('autosave', function (editor) {\n      var started = Cell(false);\n      setup();\n      register(editor, started);\n      editor.on('init', function () {\n        if (shouldRestoreWhenEmpty(editor) && editor.dom.isEmpty(editor.getBody())) {\n          restoreDraft(editor);\n        }\n      });\n      return get(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/autosave/plugin.js\n// module id = eRbm\n// module chunks = 39","// Exports the \"autosave\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autosave')\n//   ES2015:\n//     import 'tinymce/plugins/autosave'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/autosave/index.js\n// module id = mV4C\n// module chunks = 39"],"sourceRoot":""}