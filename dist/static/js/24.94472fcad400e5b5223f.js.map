{"version":3,"sources":["webpack:///static/js/24.94472fcad400e5b5223f.js","webpack:///./~/tinymce/plugins/importcss/index.js","webpack:///./~/tinymce/plugins/importcss/plugin.js"],"names":["webpackJsonp","1tuh","module","exports","__webpack_require__","wKVN","Plugin","global","tinymce","util","Tools","resolve","global$1","global$2","global$3","global$4","shouldMergeClasses","editor","getParam","shouldImportExclusive","getSelectorConverter","getSelectorFilter","getCssGroups","shouldAppend","getFileFilter","Settings","removeCacheSuffix","url","cacheSuffix","replace","isSkinContentCss","href","settings","skin","skin_url","documentBaseURI","toAbsolute","baseURL","inline","compileFilter","filter","value","indexOf","RegExp","test","getSelectors","doc","fileFilter","append","styleSheet","imported","rules","each","imports","cssRules","e","cssRule","selectorText","split","selector","selectors","push","trim","contentCSSUrls","contentCSS","styleSheets","defaultConvertSelectorToFormat","format","exec","elementName","classes","substr","join","inlineSelectorElements","makeMap","title","schema","getTextBlockElements","block","getBlockElements","toLowerCase","attributes","class","getGroupsBySelector","groups","grep","group","compileUserDefinedGroups","map","extend","original","item","text","menu","isExclusiveMode","isUniqueSelector","globallyUniqueSelectors","markUniqueSelector","convertSelectorToFormat","plugin","selectorConverter","selector_converter","call","setup","on","selectorFilter","ctrl","control","processSelector","plugins","importcss","formatName","name","DOM","uniqueId","formatter","register","itemDefaults","items","remove","getDoc","selectorGroups","length","menuItem","add","renderNew","ImportCss","get","Api"],"mappings":"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","file":"static/js/24.94472fcad400e5b5223f.js","sourcesContent":["webpackJsonp([24],{\n\n/***/ \"1tuh\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"importcss\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/importcss')\n//   ES2015:\n//     import 'tinymce/plugins/importcss'\n__webpack_require__(\"wKVN\");\n\n/***/ }),\n\n/***/ \"wKVN\":\n/***/ (function(module, exports) {\n\n(function () {\nvar importcss = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var shouldMergeClasses = function (editor) {\n      return editor.getParam('importcss_merge_classes');\n    };\n    var shouldImportExclusive = function (editor) {\n      return editor.getParam('importcss_exclusive');\n    };\n    var getSelectorConverter = function (editor) {\n      return editor.getParam('importcss_selector_converter');\n    };\n    var getSelectorFilter = function (editor) {\n      return editor.getParam('importcss_selector_filter');\n    };\n    var getCssGroups = function (editor) {\n      return editor.getParam('importcss_groups');\n    };\n    var shouldAppend = function (editor) {\n      return editor.getParam('importcss_append');\n    };\n    var getFileFilter = function (editor) {\n      return editor.getParam('importcss_file_filter');\n    };\n    var Settings = {\n      shouldMergeClasses: shouldMergeClasses,\n      shouldImportExclusive: shouldImportExclusive,\n      getSelectorConverter: getSelectorConverter,\n      getSelectorFilter: getSelectorFilter,\n      getCssGroups: getCssGroups,\n      shouldAppend: shouldAppend,\n      getFileFilter: getFileFilter\n    };\n\n    var removeCacheSuffix = function (url) {\n      var cacheSuffix = global$3.cacheSuffix;\n      if (typeof url === 'string') {\n        url = url.replace('?' + cacheSuffix, '').replace('&' + cacheSuffix, '');\n      }\n      return url;\n    };\n    var isSkinContentCss = function (editor, href) {\n      var settings = editor.settings, skin = settings.skin !== false ? settings.skin || 'lightgray' : false;\n      if (skin) {\n        var skinUrl = settings.skin_url ? editor.documentBaseURI.toAbsolute(settings.skin_url) : global$2.baseURL + '/skins/' + skin;\n        return href === skinUrl + '/content' + (editor.inline ? '.inline' : '') + '.min.css';\n      }\n      return false;\n    };\n    var compileFilter = function (filter) {\n      if (typeof filter === 'string') {\n        return function (value) {\n          return value.indexOf(filter) !== -1;\n        };\n      } else if (filter instanceof RegExp) {\n        return function (value) {\n          return filter.test(value);\n        };\n      }\n      return filter;\n    };\n    var getSelectors = function (editor, doc, fileFilter) {\n      var selectors = [], contentCSSUrls = {};\n      function append(styleSheet, imported) {\n        var href = styleSheet.href, rules;\n        href = removeCacheSuffix(href);\n        if (!href || !fileFilter(href, imported) || isSkinContentCss(editor, href)) {\n          return;\n        }\n        global$4.each(styleSheet.imports, function (styleSheet) {\n          append(styleSheet, true);\n        });\n        try {\n          rules = styleSheet.cssRules || styleSheet.rules;\n        } catch (e) {\n        }\n        global$4.each(rules, function (cssRule) {\n          if (cssRule.styleSheet) {\n            append(cssRule.styleSheet, true);\n          } else if (cssRule.selectorText) {\n            global$4.each(cssRule.selectorText.split(','), function (selector) {\n              selectors.push(global$4.trim(selector));\n            });\n          }\n        });\n      }\n      global$4.each(editor.contentCSS, function (url) {\n        contentCSSUrls[url] = true;\n      });\n      if (!fileFilter) {\n        fileFilter = function (href, imported) {\n          return imported || contentCSSUrls[href];\n        };\n      }\n      try {\n        global$4.each(doc.styleSheets, function (styleSheet) {\n          append(styleSheet);\n        });\n      } catch (e) {\n      }\n      return selectors;\n    };\n    var defaultConvertSelectorToFormat = function (editor, selectorText) {\n      var format;\n      var selector = /^(?:([a-z0-9\\-_]+))?(\\.[a-z0-9_\\-\\.]+)$/i.exec(selectorText);\n      if (!selector) {\n        return;\n      }\n      var elementName = selector[1];\n      var classes = selector[2].substr(1).split('.').join(' ');\n      var inlineSelectorElements = global$4.makeMap('a,img');\n      if (selector[1]) {\n        format = { title: selectorText };\n        if (editor.schema.getTextBlockElements()[elementName]) {\n          format.block = elementName;\n        } else if (editor.schema.getBlockElements()[elementName] || inlineSelectorElements[elementName.toLowerCase()]) {\n          format.selector = elementName;\n        } else {\n          format.inline = elementName;\n        }\n      } else if (selector[2]) {\n        format = {\n          inline: 'span',\n          title: selectorText.substr(1),\n          classes: classes\n        };\n      }\n      if (Settings.shouldMergeClasses(editor) !== false) {\n        format.classes = classes;\n      } else {\n        format.attributes = { class: classes };\n      }\n      return format;\n    };\n    var getGroupsBySelector = function (groups, selector) {\n      return global$4.grep(groups, function (group) {\n        return !group.filter || group.filter(selector);\n      });\n    };\n    var compileUserDefinedGroups = function (groups) {\n      return global$4.map(groups, function (group) {\n        return global$4.extend({}, group, {\n          original: group,\n          selectors: {},\n          filter: compileFilter(group.filter),\n          item: {\n            text: group.title,\n            menu: []\n          }\n        });\n      });\n    };\n    var isExclusiveMode = function (editor, group) {\n      return group === null || Settings.shouldImportExclusive(editor) !== false;\n    };\n    var isUniqueSelector = function (editor, selector, group, globallyUniqueSelectors) {\n      return !(isExclusiveMode(editor, group) ? selector in globallyUniqueSelectors : selector in group.selectors);\n    };\n    var markUniqueSelector = function (editor, selector, group, globallyUniqueSelectors) {\n      if (isExclusiveMode(editor, group)) {\n        globallyUniqueSelectors[selector] = true;\n      } else {\n        group.selectors[selector] = true;\n      }\n    };\n    var convertSelectorToFormat = function (editor, plugin, selector, group) {\n      var selectorConverter;\n      if (group && group.selector_converter) {\n        selectorConverter = group.selector_converter;\n      } else if (Settings.getSelectorConverter(editor)) {\n        selectorConverter = Settings.getSelectorConverter(editor);\n      } else {\n        selectorConverter = function () {\n          return defaultConvertSelectorToFormat(editor, selector);\n        };\n      }\n      return selectorConverter.call(plugin, selector, group);\n    };\n    var setup = function (editor) {\n      editor.on('renderFormatsMenu', function (e) {\n        var globallyUniqueSelectors = {};\n        var selectorFilter = compileFilter(Settings.getSelectorFilter(editor)), ctrl = e.control;\n        var groups = compileUserDefinedGroups(Settings.getCssGroups(editor));\n        var processSelector = function (selector, group) {\n          if (isUniqueSelector(editor, selector, group, globallyUniqueSelectors)) {\n            markUniqueSelector(editor, selector, group, globallyUniqueSelectors);\n            var format = convertSelectorToFormat(editor, editor.plugins.importcss, selector, group);\n            if (format) {\n              var formatName = format.name || global$1.DOM.uniqueId();\n              editor.formatter.register(formatName, format);\n              return global$4.extend({}, ctrl.settings.itemDefaults, {\n                text: format.title,\n                format: formatName\n              });\n            }\n          }\n          return null;\n        };\n        if (!Settings.shouldAppend(editor)) {\n          ctrl.items().remove();\n        }\n        global$4.each(getSelectors(editor, e.doc || editor.getDoc(), compileFilter(Settings.getFileFilter(editor))), function (selector) {\n          if (selector.indexOf('.mce-') === -1) {\n            if (!selectorFilter || selectorFilter(selector)) {\n              var selectorGroups = getGroupsBySelector(groups, selector);\n              if (selectorGroups.length > 0) {\n                global$4.each(selectorGroups, function (group) {\n                  var menuItem = processSelector(selector, group);\n                  if (menuItem) {\n                    group.item.menu.push(menuItem);\n                  }\n                });\n              } else {\n                var menuItem = processSelector(selector, null);\n                if (menuItem) {\n                  ctrl.add(menuItem);\n                }\n              }\n            }\n          }\n        });\n        global$4.each(groups, function (group) {\n          if (group.item.menu.length > 0) {\n            ctrl.add(group.item);\n          }\n        });\n        e.control.renderNew();\n      });\n    };\n    var ImportCss = {\n      defaultConvertSelectorToFormat: defaultConvertSelectorToFormat,\n      setup: setup\n    };\n\n    var get = function (editor) {\n      var convertSelectorToFormat = function (selectorText) {\n        return ImportCss.defaultConvertSelectorToFormat(editor, selectorText);\n      };\n      return { convertSelectorToFormat: convertSelectorToFormat };\n    };\n    var Api = { get: get };\n\n    global.add('importcss', function (editor) {\n      ImportCss.setup(editor);\n      return Api.get(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/24.94472fcad400e5b5223f.js","// Exports the \"importcss\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/importcss')\n//   ES2015:\n//     import 'tinymce/plugins/importcss'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/importcss/index.js\n// module id = 1tuh\n// module chunks = 24","(function () {\nvar importcss = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var shouldMergeClasses = function (editor) {\n      return editor.getParam('importcss_merge_classes');\n    };\n    var shouldImportExclusive = function (editor) {\n      return editor.getParam('importcss_exclusive');\n    };\n    var getSelectorConverter = function (editor) {\n      return editor.getParam('importcss_selector_converter');\n    };\n    var getSelectorFilter = function (editor) {\n      return editor.getParam('importcss_selector_filter');\n    };\n    var getCssGroups = function (editor) {\n      return editor.getParam('importcss_groups');\n    };\n    var shouldAppend = function (editor) {\n      return editor.getParam('importcss_append');\n    };\n    var getFileFilter = function (editor) {\n      return editor.getParam('importcss_file_filter');\n    };\n    var Settings = {\n      shouldMergeClasses: shouldMergeClasses,\n      shouldImportExclusive: shouldImportExclusive,\n      getSelectorConverter: getSelectorConverter,\n      getSelectorFilter: getSelectorFilter,\n      getCssGroups: getCssGroups,\n      shouldAppend: shouldAppend,\n      getFileFilter: getFileFilter\n    };\n\n    var removeCacheSuffix = function (url) {\n      var cacheSuffix = global$3.cacheSuffix;\n      if (typeof url === 'string') {\n        url = url.replace('?' + cacheSuffix, '').replace('&' + cacheSuffix, '');\n      }\n      return url;\n    };\n    var isSkinContentCss = function (editor, href) {\n      var settings = editor.settings, skin = settings.skin !== false ? settings.skin || 'lightgray' : false;\n      if (skin) {\n        var skinUrl = settings.skin_url ? editor.documentBaseURI.toAbsolute(settings.skin_url) : global$2.baseURL + '/skins/' + skin;\n        return href === skinUrl + '/content' + (editor.inline ? '.inline' : '') + '.min.css';\n      }\n      return false;\n    };\n    var compileFilter = function (filter) {\n      if (typeof filter === 'string') {\n        return function (value) {\n          return value.indexOf(filter) !== -1;\n        };\n      } else if (filter instanceof RegExp) {\n        return function (value) {\n          return filter.test(value);\n        };\n      }\n      return filter;\n    };\n    var getSelectors = function (editor, doc, fileFilter) {\n      var selectors = [], contentCSSUrls = {};\n      function append(styleSheet, imported) {\n        var href = styleSheet.href, rules;\n        href = removeCacheSuffix(href);\n        if (!href || !fileFilter(href, imported) || isSkinContentCss(editor, href)) {\n          return;\n        }\n        global$4.each(styleSheet.imports, function (styleSheet) {\n          append(styleSheet, true);\n        });\n        try {\n          rules = styleSheet.cssRules || styleSheet.rules;\n        } catch (e) {\n        }\n        global$4.each(rules, function (cssRule) {\n          if (cssRule.styleSheet) {\n            append(cssRule.styleSheet, true);\n          } else if (cssRule.selectorText) {\n            global$4.each(cssRule.selectorText.split(','), function (selector) {\n              selectors.push(global$4.trim(selector));\n            });\n          }\n        });\n      }\n      global$4.each(editor.contentCSS, function (url) {\n        contentCSSUrls[url] = true;\n      });\n      if (!fileFilter) {\n        fileFilter = function (href, imported) {\n          return imported || contentCSSUrls[href];\n        };\n      }\n      try {\n        global$4.each(doc.styleSheets, function (styleSheet) {\n          append(styleSheet);\n        });\n      } catch (e) {\n      }\n      return selectors;\n    };\n    var defaultConvertSelectorToFormat = function (editor, selectorText) {\n      var format;\n      var selector = /^(?:([a-z0-9\\-_]+))?(\\.[a-z0-9_\\-\\.]+)$/i.exec(selectorText);\n      if (!selector) {\n        return;\n      }\n      var elementName = selector[1];\n      var classes = selector[2].substr(1).split('.').join(' ');\n      var inlineSelectorElements = global$4.makeMap('a,img');\n      if (selector[1]) {\n        format = { title: selectorText };\n        if (editor.schema.getTextBlockElements()[elementName]) {\n          format.block = elementName;\n        } else if (editor.schema.getBlockElements()[elementName] || inlineSelectorElements[elementName.toLowerCase()]) {\n          format.selector = elementName;\n        } else {\n          format.inline = elementName;\n        }\n      } else if (selector[2]) {\n        format = {\n          inline: 'span',\n          title: selectorText.substr(1),\n          classes: classes\n        };\n      }\n      if (Settings.shouldMergeClasses(editor) !== false) {\n        format.classes = classes;\n      } else {\n        format.attributes = { class: classes };\n      }\n      return format;\n    };\n    var getGroupsBySelector = function (groups, selector) {\n      return global$4.grep(groups, function (group) {\n        return !group.filter || group.filter(selector);\n      });\n    };\n    var compileUserDefinedGroups = function (groups) {\n      return global$4.map(groups, function (group) {\n        return global$4.extend({}, group, {\n          original: group,\n          selectors: {},\n          filter: compileFilter(group.filter),\n          item: {\n            text: group.title,\n            menu: []\n          }\n        });\n      });\n    };\n    var isExclusiveMode = function (editor, group) {\n      return group === null || Settings.shouldImportExclusive(editor) !== false;\n    };\n    var isUniqueSelector = function (editor, selector, group, globallyUniqueSelectors) {\n      return !(isExclusiveMode(editor, group) ? selector in globallyUniqueSelectors : selector in group.selectors);\n    };\n    var markUniqueSelector = function (editor, selector, group, globallyUniqueSelectors) {\n      if (isExclusiveMode(editor, group)) {\n        globallyUniqueSelectors[selector] = true;\n      } else {\n        group.selectors[selector] = true;\n      }\n    };\n    var convertSelectorToFormat = function (editor, plugin, selector, group) {\n      var selectorConverter;\n      if (group && group.selector_converter) {\n        selectorConverter = group.selector_converter;\n      } else if (Settings.getSelectorConverter(editor)) {\n        selectorConverter = Settings.getSelectorConverter(editor);\n      } else {\n        selectorConverter = function () {\n          return defaultConvertSelectorToFormat(editor, selector);\n        };\n      }\n      return selectorConverter.call(plugin, selector, group);\n    };\n    var setup = function (editor) {\n      editor.on('renderFormatsMenu', function (e) {\n        var globallyUniqueSelectors = {};\n        var selectorFilter = compileFilter(Settings.getSelectorFilter(editor)), ctrl = e.control;\n        var groups = compileUserDefinedGroups(Settings.getCssGroups(editor));\n        var processSelector = function (selector, group) {\n          if (isUniqueSelector(editor, selector, group, globallyUniqueSelectors)) {\n            markUniqueSelector(editor, selector, group, globallyUniqueSelectors);\n            var format = convertSelectorToFormat(editor, editor.plugins.importcss, selector, group);\n            if (format) {\n              var formatName = format.name || global$1.DOM.uniqueId();\n              editor.formatter.register(formatName, format);\n              return global$4.extend({}, ctrl.settings.itemDefaults, {\n                text: format.title,\n                format: formatName\n              });\n            }\n          }\n          return null;\n        };\n        if (!Settings.shouldAppend(editor)) {\n          ctrl.items().remove();\n        }\n        global$4.each(getSelectors(editor, e.doc || editor.getDoc(), compileFilter(Settings.getFileFilter(editor))), function (selector) {\n          if (selector.indexOf('.mce-') === -1) {\n            if (!selectorFilter || selectorFilter(selector)) {\n              var selectorGroups = getGroupsBySelector(groups, selector);\n              if (selectorGroups.length > 0) {\n                global$4.each(selectorGroups, function (group) {\n                  var menuItem = processSelector(selector, group);\n                  if (menuItem) {\n                    group.item.menu.push(menuItem);\n                  }\n                });\n              } else {\n                var menuItem = processSelector(selector, null);\n                if (menuItem) {\n                  ctrl.add(menuItem);\n                }\n              }\n            }\n          }\n        });\n        global$4.each(groups, function (group) {\n          if (group.item.menu.length > 0) {\n            ctrl.add(group.item);\n          }\n        });\n        e.control.renderNew();\n      });\n    };\n    var ImportCss = {\n      defaultConvertSelectorToFormat: defaultConvertSelectorToFormat,\n      setup: setup\n    };\n\n    var get = function (editor) {\n      var convertSelectorToFormat = function (selectorText) {\n        return ImportCss.defaultConvertSelectorToFormat(editor, selectorText);\n      };\n      return { convertSelectorToFormat: convertSelectorToFormat };\n    };\n    var Api = { get: get };\n\n    global.add('importcss', function (editor) {\n      ImportCss.setup(editor);\n      return Api.get(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/importcss/plugin.js\n// module id = wKVN\n// module chunks = 24"],"sourceRoot":""}