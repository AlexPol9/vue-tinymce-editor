{"version":3,"sources":["webpack:///static/js/3.0c3ac25f85005b81f8b0.js","webpack:///./~/tinymce/plugins/visualblocks/index.js","webpack:///./~/tinymce/plugins/visualblocks/plugin.js"],"names":["webpackJsonp","ManF","module","exports","__webpack_require__","OOR4","Plugin","Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","fireVisualBlocks","editor","state","fire","Events","isEnabledByDefault","getParam","getContentCss","settings","visualblocks_content_css","Settings","global$1","global$2","cssId","DOM","uniqueId","load","doc","url","linkElements","toArray","getElementsByTagName","grep","head","id","length","linkElm","create","rel","href","appendChild","LoadCss","toggleVisualBlocks","pluginUrl","enabledState","dom","contentCss","getDoc","toggleClass","getBody","VisualBlocks","register","addCommand","Commands","setup","on","e","type","removeClass","Bindings","toggleActiveState","ctrl","control","active","register$1","addButton","title","cmd","onPostRender","addMenuItem","text","selectable","context","prependToContext","Buttons","add"],"mappings":"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","file":"static/js/3.0c3ac25f85005b81f8b0.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ \"ManF\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"visualblocks\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/visualblocks')\n//   ES2015:\n//     import 'tinymce/plugins/visualblocks'\n__webpack_require__(\"OOR4\");\n\n/***/ }),\n\n/***/ \"OOR4\":\n/***/ (function(module, exports) {\n\n(function () {\nvar visualblocks = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var fireVisualBlocks = function (editor, state) {\n      editor.fire('VisualBlocks', { state: state });\n    };\n    var Events = { fireVisualBlocks: fireVisualBlocks };\n\n    var isEnabledByDefault = function (editor) {\n      return editor.getParam('visualblocks_default_state', false);\n    };\n    var getContentCss = function (editor) {\n      return editor.settings.visualblocks_content_css;\n    };\n    var Settings = {\n      isEnabledByDefault: isEnabledByDefault,\n      getContentCss: getContentCss\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var cssId = global$1.DOM.uniqueId();\n    var load = function (doc, url) {\n      var linkElements = global$2.toArray(doc.getElementsByTagName('link'));\n      var matchingLinkElms = global$2.grep(linkElements, function (head) {\n        return head.id === cssId;\n      });\n      if (matchingLinkElms.length === 0) {\n        var linkElm = global$1.DOM.create('link', {\n          id: cssId,\n          rel: 'stylesheet',\n          href: url\n        });\n        doc.getElementsByTagName('head')[0].appendChild(linkElm);\n      }\n    };\n    var LoadCss = { load: load };\n\n    var toggleVisualBlocks = function (editor, pluginUrl, enabledState) {\n      var dom = editor.dom;\n      var contentCss = Settings.getContentCss(editor);\n      LoadCss.load(editor.getDoc(), contentCss ? contentCss : pluginUrl + '/css/visualblocks.css');\n      dom.toggleClass(editor.getBody(), 'mce-visualblocks');\n      enabledState.set(!enabledState.get());\n      Events.fireVisualBlocks(editor, enabledState.get());\n    };\n    var VisualBlocks = { toggleVisualBlocks: toggleVisualBlocks };\n\n    var register = function (editor, pluginUrl, enabledState) {\n      editor.addCommand('mceVisualBlocks', function () {\n        VisualBlocks.toggleVisualBlocks(editor, pluginUrl, enabledState);\n      });\n    };\n    var Commands = { register: register };\n\n    var setup = function (editor, pluginUrl, enabledState) {\n      editor.on('PreviewFormats AfterPreviewFormats', function (e) {\n        if (enabledState.get()) {\n          editor.dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type === 'afterpreviewformats');\n        }\n      });\n      editor.on('init', function () {\n        if (Settings.isEnabledByDefault(editor)) {\n          VisualBlocks.toggleVisualBlocks(editor, pluginUrl, enabledState);\n        }\n      });\n      editor.on('remove', function () {\n        editor.dom.removeClass(editor.getBody(), 'mce-visualblocks');\n      });\n    };\n    var Bindings = { setup: setup };\n\n    var toggleActiveState = function (editor, enabledState) {\n      return function (e) {\n        var ctrl = e.control;\n        ctrl.active(enabledState.get());\n        editor.on('VisualBlocks', function (e) {\n          ctrl.active(e.state);\n        });\n      };\n    };\n    var register$1 = function (editor, enabledState) {\n      editor.addButton('visualblocks', {\n        active: false,\n        title: 'Show blocks',\n        cmd: 'mceVisualBlocks',\n        onPostRender: toggleActiveState(editor, enabledState)\n      });\n      editor.addMenuItem('visualblocks', {\n        text: 'Show blocks',\n        cmd: 'mceVisualBlocks',\n        onPostRender: toggleActiveState(editor, enabledState),\n        selectable: true,\n        context: 'view',\n        prependToContext: true\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('visualblocks', function (editor, pluginUrl) {\n      var enabledState = Cell(false);\n      Commands.register(editor, pluginUrl, enabledState);\n      Buttons.register(editor, enabledState);\n      Bindings.setup(editor, pluginUrl, enabledState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/3.0c3ac25f85005b81f8b0.js","// Exports the \"visualblocks\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/visualblocks')\n//   ES2015:\n//     import 'tinymce/plugins/visualblocks'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/visualblocks/index.js\n// module id = ManF\n// module chunks = 3","(function () {\nvar visualblocks = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var fireVisualBlocks = function (editor, state) {\n      editor.fire('VisualBlocks', { state: state });\n    };\n    var Events = { fireVisualBlocks: fireVisualBlocks };\n\n    var isEnabledByDefault = function (editor) {\n      return editor.getParam('visualblocks_default_state', false);\n    };\n    var getContentCss = function (editor) {\n      return editor.settings.visualblocks_content_css;\n    };\n    var Settings = {\n      isEnabledByDefault: isEnabledByDefault,\n      getContentCss: getContentCss\n    };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var cssId = global$1.DOM.uniqueId();\n    var load = function (doc, url) {\n      var linkElements = global$2.toArray(doc.getElementsByTagName('link'));\n      var matchingLinkElms = global$2.grep(linkElements, function (head) {\n        return head.id === cssId;\n      });\n      if (matchingLinkElms.length === 0) {\n        var linkElm = global$1.DOM.create('link', {\n          id: cssId,\n          rel: 'stylesheet',\n          href: url\n        });\n        doc.getElementsByTagName('head')[0].appendChild(linkElm);\n      }\n    };\n    var LoadCss = { load: load };\n\n    var toggleVisualBlocks = function (editor, pluginUrl, enabledState) {\n      var dom = editor.dom;\n      var contentCss = Settings.getContentCss(editor);\n      LoadCss.load(editor.getDoc(), contentCss ? contentCss : pluginUrl + '/css/visualblocks.css');\n      dom.toggleClass(editor.getBody(), 'mce-visualblocks');\n      enabledState.set(!enabledState.get());\n      Events.fireVisualBlocks(editor, enabledState.get());\n    };\n    var VisualBlocks = { toggleVisualBlocks: toggleVisualBlocks };\n\n    var register = function (editor, pluginUrl, enabledState) {\n      editor.addCommand('mceVisualBlocks', function () {\n        VisualBlocks.toggleVisualBlocks(editor, pluginUrl, enabledState);\n      });\n    };\n    var Commands = { register: register };\n\n    var setup = function (editor, pluginUrl, enabledState) {\n      editor.on('PreviewFormats AfterPreviewFormats', function (e) {\n        if (enabledState.get()) {\n          editor.dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type === 'afterpreviewformats');\n        }\n      });\n      editor.on('init', function () {\n        if (Settings.isEnabledByDefault(editor)) {\n          VisualBlocks.toggleVisualBlocks(editor, pluginUrl, enabledState);\n        }\n      });\n      editor.on('remove', function () {\n        editor.dom.removeClass(editor.getBody(), 'mce-visualblocks');\n      });\n    };\n    var Bindings = { setup: setup };\n\n    var toggleActiveState = function (editor, enabledState) {\n      return function (e) {\n        var ctrl = e.control;\n        ctrl.active(enabledState.get());\n        editor.on('VisualBlocks', function (e) {\n          ctrl.active(e.state);\n        });\n      };\n    };\n    var register$1 = function (editor, enabledState) {\n      editor.addButton('visualblocks', {\n        active: false,\n        title: 'Show blocks',\n        cmd: 'mceVisualBlocks',\n        onPostRender: toggleActiveState(editor, enabledState)\n      });\n      editor.addMenuItem('visualblocks', {\n        text: 'Show blocks',\n        cmd: 'mceVisualBlocks',\n        onPostRender: toggleActiveState(editor, enabledState),\n        selectable: true,\n        context: 'view',\n        prependToContext: true\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('visualblocks', function (editor, pluginUrl) {\n      var enabledState = Cell(false);\n      Commands.register(editor, pluginUrl, enabledState);\n      Buttons.register(editor, enabledState);\n      Bindings.setup(editor, pluginUrl, enabledState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/visualblocks/plugin.js\n// module id = OOR4\n// module chunks = 3"],"sourceRoot":""}