{"version":3,"sources":["webpack:///static/js/12.78629d3be81e35714511.js","webpack:///./~/tinymce/plugins/save/plugin.js","webpack:///./~/tinymce/plugins/save/index.js"],"names":["webpackJsonp","QZ/F","module","exports","Plugin","global","tinymce","util","Tools","resolve","global$1","global$2","enableWhenDirty","editor","getParam","hasOnSaveCallback","hasOnCancelCallback","Settings","displayErrorMessage","message","notificationManager","open","text","translate","type","save","formObj","DOM","getParent","id","isDirty","execCallback","nodeChanged","setDirty","onsubmit","submit","cancel","h","trim","startContent","setContent","undoManager","clear","Actions","register","addCommand","Commands","stateToggle","e","ctrl","control","on","disabled","register$1","addButton","icon","cmd","onPostRender","addShortcut","Buttons","add","Ux5r","__webpack_require__"],"mappings":"AAAAA,cAAc,KAERC,OACA,SAAUC,EAAQC,ICHxB,YACY,WACR,YA+GA,SAASC,MA7GT,GAAIC,GAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,wBAEtCE,EAAWL,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCG,EAAkB,SAAUC,GAC9B,MAAOA,GAAOC,SAAS,wBAAwB,IAE7CC,EAAoB,SAAUF,GAChC,QAASA,EAAOC,SAAS,wBAEvBE,EAAsB,SAAUH,GAClC,QAASA,EAAOC,SAAS,0BAEvBG,GACFL,gBAAiBA,EACjBG,kBAAmBA,EACnBC,oBAAqBA,GAGnBE,EAAsB,SAAUL,EAAQM,GAC1CN,EAAOO,oBAAoBC,MACzBC,KAAMT,EAAOU,UAAUJ,GACvBK,KAAM,WAGNC,EAAO,SAAUZ,GACnB,GAAIa,EAEJ,IADAA,EAAUhB,EAASiB,IAAIC,UAAUf,EAAOgB,GAAI,SACxCZ,EAASL,gBAAgBC,IAAYA,EAAOiB,UAAhD,CAIA,GADAjB,EAAOY,OACHR,EAASF,kBAAkBF,GAG7B,MAFAA,GAAOkB,aAAa,sBAAuBlB,OAC3CA,GAAOmB,aAGLN,IACFb,EAAOoB,UAAS,GACXP,EAAQQ,WAAYR,EAAQQ,aACD,kBAAnBR,GAAQS,OACjBT,EAAQS,SAERjB,EAAoBL,EAAQ,wCAGhCA,EAAOmB,eAEPd,EAAoBL,EAAQ,mCAG5BuB,EAAS,SAAUvB,GACrB,GAAIwB,GAAI1B,EAAS2B,KAAKzB,EAAO0B,aAC7B,IAAItB,EAASD,oBAAoBH,GAE/B,WADAA,GAAOkB,aAAa,wBAAyBlB,EAG/CA,GAAO2B,WAAWH,GAClBxB,EAAO4B,YAAYC,QACnB7B,EAAOmB,eAELW,GACFlB,KAAMA,EACNW,OAAQA,GAGNQ,EAAW,SAAU/B,GACvBA,EAAOgC,WAAW,UAAW,WAC3BF,EAAQlB,KAAKZ,KAEfA,EAAOgC,WAAW,YAAa,WAC7BF,EAAQP,OAAOvB,MAGfiC,GAAaF,SAAUA,GAEvBG,EAAc,SAAUlC,GAC1B,MAAO,UAAUmC,GACf,GAAIC,GAAOD,EAAEE,OACbrC,GAAOsC,GAAG,mBAAoB,WAC5BF,EAAKG,SAASnC,EAASL,gBAAgBC,KAAYA,EAAOiB,eAI5DuB,EAAa,SAAUxC,GACzBA,EAAOyC,UAAU,QACfC,KAAM,OACNjC,KAAM,OACNkC,IAAK,UACLJ,UAAU,EACVK,aAAcV,EAAYlC,KAE5BA,EAAOyC,UAAU,UACfhC,KAAM,SACNiC,MAAM,EACNC,IAAK,YACLJ,UAAU,EACVK,aAAcV,EAAYlC,KAE5BA,EAAO6C,YAAY,SAAU,GAAI,YAE/BC,GAAYf,SAAUS,EAE1BhD,GAAOuD,IAAI,OAAQ,SAAU/C,GAC3B8C,EAAQf,SAAS/B,GACjBiC,EAASF,SAAS/B,YDkBlBgD,KACA,SAAU3D,EAAQC,EAAS2D,GE5HjC,EAAQ","file":"static/js/12.78629d3be81e35714511.js","sourcesContent":["webpackJsonp([12],{\n\n/***/ \"QZ/F\":\n/***/ (function(module, exports) {\n\n(function () {\nvar save = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var enableWhenDirty = function (editor) {\n      return editor.getParam('save_enablewhendirty', true);\n    };\n    var hasOnSaveCallback = function (editor) {\n      return !!editor.getParam('save_onsavecallback');\n    };\n    var hasOnCancelCallback = function (editor) {\n      return !!editor.getParam('save_oncancelcallback');\n    };\n    var Settings = {\n      enableWhenDirty: enableWhenDirty,\n      hasOnSaveCallback: hasOnSaveCallback,\n      hasOnCancelCallback: hasOnCancelCallback\n    };\n\n    var displayErrorMessage = function (editor, message) {\n      editor.notificationManager.open({\n        text: editor.translate(message),\n        type: 'error'\n      });\n    };\n    var save = function (editor) {\n      var formObj;\n      formObj = global$1.DOM.getParent(editor.id, 'form');\n      if (Settings.enableWhenDirty(editor) && !editor.isDirty()) {\n        return;\n      }\n      editor.save();\n      if (Settings.hasOnSaveCallback(editor)) {\n        editor.execCallback('save_onsavecallback', editor);\n        editor.nodeChanged();\n        return;\n      }\n      if (formObj) {\n        editor.setDirty(false);\n        if (!formObj.onsubmit || formObj.onsubmit()) {\n          if (typeof formObj.submit === 'function') {\n            formObj.submit();\n          } else {\n            displayErrorMessage(editor, 'Error: Form submit field collision.');\n          }\n        }\n        editor.nodeChanged();\n      } else {\n        displayErrorMessage(editor, 'Error: No form element found.');\n      }\n    };\n    var cancel = function (editor) {\n      var h = global$2.trim(editor.startContent);\n      if (Settings.hasOnCancelCallback(editor)) {\n        editor.execCallback('save_oncancelcallback', editor);\n        return;\n      }\n      editor.setContent(h);\n      editor.undoManager.clear();\n      editor.nodeChanged();\n    };\n    var Actions = {\n      save: save,\n      cancel: cancel\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceSave', function () {\n        Actions.save(editor);\n      });\n      editor.addCommand('mceCancel', function () {\n        Actions.cancel(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var stateToggle = function (editor) {\n      return function (e) {\n        var ctrl = e.control;\n        editor.on('nodeChange dirty', function () {\n          ctrl.disabled(Settings.enableWhenDirty(editor) && !editor.isDirty());\n        });\n      };\n    };\n    var register$1 = function (editor) {\n      editor.addButton('save', {\n        icon: 'save',\n        text: 'Save',\n        cmd: 'mceSave',\n        disabled: true,\n        onPostRender: stateToggle(editor)\n      });\n      editor.addButton('cancel', {\n        text: 'Cancel',\n        icon: false,\n        cmd: 'mceCancel',\n        disabled: true,\n        onPostRender: stateToggle(editor)\n      });\n      editor.addShortcut('Meta+S', '', 'mceSave');\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('save', function (editor) {\n      Buttons.register(editor);\n      Commands.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ }),\n\n/***/ \"Ux5r\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"save\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/save')\n//   ES2015:\n//     import 'tinymce/plugins/save'\n__webpack_require__(\"QZ/F\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/12.78629d3be81e35714511.js","(function () {\nvar save = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var enableWhenDirty = function (editor) {\n      return editor.getParam('save_enablewhendirty', true);\n    };\n    var hasOnSaveCallback = function (editor) {\n      return !!editor.getParam('save_onsavecallback');\n    };\n    var hasOnCancelCallback = function (editor) {\n      return !!editor.getParam('save_oncancelcallback');\n    };\n    var Settings = {\n      enableWhenDirty: enableWhenDirty,\n      hasOnSaveCallback: hasOnSaveCallback,\n      hasOnCancelCallback: hasOnCancelCallback\n    };\n\n    var displayErrorMessage = function (editor, message) {\n      editor.notificationManager.open({\n        text: editor.translate(message),\n        type: 'error'\n      });\n    };\n    var save = function (editor) {\n      var formObj;\n      formObj = global$1.DOM.getParent(editor.id, 'form');\n      if (Settings.enableWhenDirty(editor) && !editor.isDirty()) {\n        return;\n      }\n      editor.save();\n      if (Settings.hasOnSaveCallback(editor)) {\n        editor.execCallback('save_onsavecallback', editor);\n        editor.nodeChanged();\n        return;\n      }\n      if (formObj) {\n        editor.setDirty(false);\n        if (!formObj.onsubmit || formObj.onsubmit()) {\n          if (typeof formObj.submit === 'function') {\n            formObj.submit();\n          } else {\n            displayErrorMessage(editor, 'Error: Form submit field collision.');\n          }\n        }\n        editor.nodeChanged();\n      } else {\n        displayErrorMessage(editor, 'Error: No form element found.');\n      }\n    };\n    var cancel = function (editor) {\n      var h = global$2.trim(editor.startContent);\n      if (Settings.hasOnCancelCallback(editor)) {\n        editor.execCallback('save_oncancelcallback', editor);\n        return;\n      }\n      editor.setContent(h);\n      editor.undoManager.clear();\n      editor.nodeChanged();\n    };\n    var Actions = {\n      save: save,\n      cancel: cancel\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceSave', function () {\n        Actions.save(editor);\n      });\n      editor.addCommand('mceCancel', function () {\n        Actions.cancel(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var stateToggle = function (editor) {\n      return function (e) {\n        var ctrl = e.control;\n        editor.on('nodeChange dirty', function () {\n          ctrl.disabled(Settings.enableWhenDirty(editor) && !editor.isDirty());\n        });\n      };\n    };\n    var register$1 = function (editor) {\n      editor.addButton('save', {\n        icon: 'save',\n        text: 'Save',\n        cmd: 'mceSave',\n        disabled: true,\n        onPostRender: stateToggle(editor)\n      });\n      editor.addButton('cancel', {\n        text: 'Cancel',\n        icon: false,\n        cmd: 'mceCancel',\n        disabled: true,\n        onPostRender: stateToggle(editor)\n      });\n      editor.addShortcut('Meta+S', '', 'mceSave');\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('save', function (editor) {\n      Buttons.register(editor);\n      Commands.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/save/plugin.js\n// module id = QZ/F\n// module chunks = 12","// Exports the \"save\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/save')\n//   ES2015:\n//     import 'tinymce/plugins/save'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/save/index.js\n// module id = Ux5r\n// module chunks = 12"],"sourceRoot":""}