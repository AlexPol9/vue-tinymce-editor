{"version":3,"sources":["webpack:///static/js/40.fae7cca5ac311564062a.js","webpack:///./~/tinymce/plugins/autoresize/index.js","webpack:///./~/tinymce/plugins/autoresize/plugin.js"],"names":["webpackJsonp","GLi4","module","exports","__webpack_require__","qR11","Plugin","Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","global$1","global$2","getAutoResizeMinHeight","editor","parseInt","getParam","getElement","offsetHeight","getAutoResizeMaxHeight","getAutoResizeOverflowPadding","getAutoResizeBottomMargin","shouldAutoResizeOnInit","Settings","isFullscreen","plugins","fullscreen","wait","oldSize","times","interval","callback","setEditorTimeout","resize","toggleScrolling","state","body","getBody","style","overflowY","scrollTop","deltaSize","doc","resizeHeight","myHeight","marginTop","marginBottom","paddingTop","paddingBottom","borderTop","borderBottom","dom","getDoc","getStyle","isNaN","ie","scrollHeight","webkit","clientHeight","maxHeight","setStyle","iframeElement","setup","on","overflowPadding","bottomMargin","setStyles","paddingLeft","paddingRight","e","Resize","register","addCommand","Commands","add","inline"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCGjC,EAAQ,SDSFC,KACA,SAAUH,EAAQC,IEhBxB,YACkB,WACd,YAgKA,SAASG,MA9JT,GAAIC,GAAO,SAAUC,GACnB,GAAIC,GAAQD,EACRE,EAAM,WACR,MAAOD,GAQT,QACEC,IAAKA,EACLC,IARQ,SAAUC,GAClBH,EAAQG,GAQRC,MANU,WACV,MAAON,GAAKG,QASZI,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,eAEtCE,EAAWL,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCG,EAAyB,SAAUC,GACrC,MAAOC,UAASD,EAAOE,SAAS,wBAAyBF,EAAOG,aAAaC,cAAe,KAE1FC,EAAyB,SAAUL,GACrC,MAAOC,UAASD,EAAOE,SAAS,wBAAyB,GAAI,KAE3DI,EAA+B,SAAUN,GAC3C,MAAOA,GAAOE,SAAS,8BAA+B,IAEpDK,EAA4B,SAAUP,GACxC,MAAOA,GAAOE,SAAS,2BAA4B,KAEjDM,EAAyB,SAAUR,GACrC,MAAOA,GAAOE,SAAS,sBAAsB,IAE3CO,GACFV,uBAAwBA,EACxBM,uBAAwBA,EACxBC,6BAA8BA,EAC9BC,0BAA2BA,EAC3BC,uBAAwBA,GAGtBE,EAAe,SAAUV,GAC3B,MAAOA,GAAOW,QAAQC,YAAcZ,EAAOW,QAAQC,WAAWF,gBAE5DG,EAAO,SAAUb,EAAQc,EAASC,EAAOC,EAAUC,GACrDnB,EAASoB,iBAAiBlB,EAAQ,WAChCmB,EAAOnB,EAAQc,GACXC,IACFF,EAAKb,EAAQc,EAASC,EAAOC,EAAUC,GAC9BA,GACTA,KAEDD,IAEDI,EAAkB,SAAUpB,EAAQqB,GACtC,GAAIC,GAAOtB,EAAOuB,SACdD,KACFA,EAAKE,MAAMC,UAAYJ,EAAQ,GAAK,SAC/BA,IACHC,EAAKI,UAAY,KAInBP,EAAS,SAAUnB,EAAQc,GAC7B,GAAIa,GAAWC,EAAKN,EAAMO,EAAcC,EACpCC,EAAWC,EAAcC,EAAYC,EAAeC,EAAWC,EAC/DC,EAAMrC,EAAOqC,GAEjB,IADAT,EAAM5B,EAAOsC,SACb,CAGA,GAAI5B,EAAaV,GAEf,WADAoB,GAAgBpB,GAAQ,EAG1BsB,GAAOM,EAAIN,KACXO,EAAepB,EAASV,uBAAuBC,GAC/C+B,EAAYM,EAAIE,SAASjB,EAAM,cAAc,GAC7CU,EAAeK,EAAIE,SAASjB,EAAM,iBAAiB,GACnDW,EAAaI,EAAIE,SAASjB,EAAM,eAAe,GAC/CY,EAAgBG,EAAIE,SAASjB,EAAM,kBAAkB,GACrDa,EAAYE,EAAIE,SAASjB,EAAM,oBAAoB,GACnDc,EAAeC,EAAIE,SAASjB,EAAM,uBAAuB,GACzDQ,EAAWR,EAAKlB,aAAeH,SAAS8B,EAAW,IAAM9B,SAAS+B,EAAc,IAAM/B,SAASgC,EAAY,IAAMhC,SAASiC,EAAe,IAAMjC,SAASkC,EAAW,IAAMlC,SAASmC,EAAc,KAC5LI,MAAMV,IAAaA,GAAY,KACjCA,EAAWjC,EAAS4C,GAAKnB,EAAKoB,aAAe7C,EAAS8C,QAAgC,IAAtBrB,EAAKsB,aAAqB,EAAItB,EAAKlB,cAEjG0B,EAAWrB,EAASV,uBAAuBC,KAC7C6B,EAAeC,EAEjB,IAAIe,GAAYpC,EAASJ,uBAAuBL,EAC5C6C,IAAaf,EAAWe,GAC1BhB,EAAegB,EACfzB,EAAgBpB,GAAQ,IAExBoB,EAAgBpB,GAAQ,GAEtB6B,IAAiBf,EAAQ1B,QAC3BuC,EAAYE,EAAef,EAAQ1B,MACnCiD,EAAIS,SAAS9C,EAAO+C,cAAe,SAAUlB,EAAe,MAC5Df,EAAQzB,IAAIwC,GACRhC,EAAS8C,QAAUhB,EAAY,GACjCR,EAAOnB,EAAQc,MAIjBkC,EAAQ,SAAUhD,EAAQc,GAC5Bd,EAAOiD,GAAG,OAAQ,WAChB,GAAIC,GAAiBC,EACjBd,EAAMrC,EAAOqC,GACjBa,GAAkBzC,EAASH,6BAA6BN,GACxDmD,EAAe1C,EAASF,0BAA0BP,IAC1B,IAApBkD,GACFb,EAAIe,UAAUpD,EAAOuB,WACnB8B,YAAaH,EACbI,aAAcJ,KAGG,IAAjBC,GACFd,EAAIe,UAAUpD,EAAOuB,WAAaW,cAAeiB,MAGrDnD,EAAOiD,GAAG,qDAAsD,SAAUM,GACxEpC,EAAOnB,EAAQc,KAEbL,EAASD,uBAAuBR,IAClCA,EAAOiD,GAAG,OAAQ,WAChBpC,EAAKb,EAAQc,EAAS,GAAI,IAAK,WAC7BD,EAAKb,EAAQc,EAAS,EAAG,UAK7B0C,GACFR,MAAOA,EACP7B,OAAQA,GAGNsC,EAAW,SAAUzD,EAAQc,GAC/Bd,EAAO0D,WAAW,gBAAiB,WACjCF,EAAOrC,OAAOnB,EAAQc,MAGtB6C,GAAaF,SAAUA,EAE3BjE,GAAOoE,IAAI,aAAc,SAAU5D,GACjC,IAAKA,EAAO6D,OAAQ,CAClB,GAAI/C,GAAU7B,EAAK,EACnB0E,GAASF,SAASzD,EAAQc,GAC1B0C,EAAOR,MAAMhD,EAAQc","file":"static/js/40.fae7cca5ac311564062a.js","sourcesContent":["webpackJsonp([40],{\n\n/***/ \"GLi4\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"autoresize\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autoresize')\n//   ES2015:\n//     import 'tinymce/plugins/autoresize'\n__webpack_require__(\"qR11\");\n\n/***/ }),\n\n/***/ \"qR11\":\n/***/ (function(module, exports) {\n\n(function () {\nvar autoresize = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var getAutoResizeMinHeight = function (editor) {\n      return parseInt(editor.getParam('autoresize_min_height', editor.getElement().offsetHeight), 10);\n    };\n    var getAutoResizeMaxHeight = function (editor) {\n      return parseInt(editor.getParam('autoresize_max_height', 0), 10);\n    };\n    var getAutoResizeOverflowPadding = function (editor) {\n      return editor.getParam('autoresize_overflow_padding', 1);\n    };\n    var getAutoResizeBottomMargin = function (editor) {\n      return editor.getParam('autoresize_bottom_margin', 50);\n    };\n    var shouldAutoResizeOnInit = function (editor) {\n      return editor.getParam('autoresize_on_init', true);\n    };\n    var Settings = {\n      getAutoResizeMinHeight: getAutoResizeMinHeight,\n      getAutoResizeMaxHeight: getAutoResizeMaxHeight,\n      getAutoResizeOverflowPadding: getAutoResizeOverflowPadding,\n      getAutoResizeBottomMargin: getAutoResizeBottomMargin,\n      shouldAutoResizeOnInit: shouldAutoResizeOnInit\n    };\n\n    var isFullscreen = function (editor) {\n      return editor.plugins.fullscreen && editor.plugins.fullscreen.isFullscreen();\n    };\n    var wait = function (editor, oldSize, times, interval, callback) {\n      global$2.setEditorTimeout(editor, function () {\n        resize(editor, oldSize);\n        if (times--) {\n          wait(editor, oldSize, times, interval, callback);\n        } else if (callback) {\n          callback();\n        }\n      }, interval);\n    };\n    var toggleScrolling = function (editor, state) {\n      var body = editor.getBody();\n      if (body) {\n        body.style.overflowY = state ? '' : 'hidden';\n        if (!state) {\n          body.scrollTop = 0;\n        }\n      }\n    };\n    var resize = function (editor, oldSize) {\n      var deltaSize, doc, body, resizeHeight, myHeight;\n      var marginTop, marginBottom, paddingTop, paddingBottom, borderTop, borderBottom;\n      var dom = editor.dom;\n      doc = editor.getDoc();\n      if (!doc) {\n        return;\n      }\n      if (isFullscreen(editor)) {\n        toggleScrolling(editor, true);\n        return;\n      }\n      body = doc.body;\n      resizeHeight = Settings.getAutoResizeMinHeight(editor);\n      marginTop = dom.getStyle(body, 'margin-top', true);\n      marginBottom = dom.getStyle(body, 'margin-bottom', true);\n      paddingTop = dom.getStyle(body, 'padding-top', true);\n      paddingBottom = dom.getStyle(body, 'padding-bottom', true);\n      borderTop = dom.getStyle(body, 'border-top-width', true);\n      borderBottom = dom.getStyle(body, 'border-bottom-width', true);\n      myHeight = body.offsetHeight + parseInt(marginTop, 10) + parseInt(marginBottom, 10) + parseInt(paddingTop, 10) + parseInt(paddingBottom, 10) + parseInt(borderTop, 10) + parseInt(borderBottom, 10);\n      if (isNaN(myHeight) || myHeight <= 0) {\n        myHeight = global$1.ie ? body.scrollHeight : global$1.webkit && body.clientHeight === 0 ? 0 : body.offsetHeight;\n      }\n      if (myHeight > Settings.getAutoResizeMinHeight(editor)) {\n        resizeHeight = myHeight;\n      }\n      var maxHeight = Settings.getAutoResizeMaxHeight(editor);\n      if (maxHeight && myHeight > maxHeight) {\n        resizeHeight = maxHeight;\n        toggleScrolling(editor, true);\n      } else {\n        toggleScrolling(editor, false);\n      }\n      if (resizeHeight !== oldSize.get()) {\n        deltaSize = resizeHeight - oldSize.get();\n        dom.setStyle(editor.iframeElement, 'height', resizeHeight + 'px');\n        oldSize.set(resizeHeight);\n        if (global$1.webkit && deltaSize < 0) {\n          resize(editor, oldSize);\n        }\n      }\n    };\n    var setup = function (editor, oldSize) {\n      editor.on('init', function () {\n        var overflowPadding, bottomMargin;\n        var dom = editor.dom;\n        overflowPadding = Settings.getAutoResizeOverflowPadding(editor);\n        bottomMargin = Settings.getAutoResizeBottomMargin(editor);\n        if (overflowPadding !== false) {\n          dom.setStyles(editor.getBody(), {\n            paddingLeft: overflowPadding,\n            paddingRight: overflowPadding\n          });\n        }\n        if (bottomMargin !== false) {\n          dom.setStyles(editor.getBody(), { paddingBottom: bottomMargin });\n        }\n      });\n      editor.on('nodechange setcontent keyup FullscreenStateChanged', function (e) {\n        resize(editor, oldSize);\n      });\n      if (Settings.shouldAutoResizeOnInit(editor)) {\n        editor.on('init', function () {\n          wait(editor, oldSize, 20, 100, function () {\n            wait(editor, oldSize, 5, 1000);\n          });\n        });\n      }\n    };\n    var Resize = {\n      setup: setup,\n      resize: resize\n    };\n\n    var register = function (editor, oldSize) {\n      editor.addCommand('mceAutoResize', function () {\n        Resize.resize(editor, oldSize);\n      });\n    };\n    var Commands = { register: register };\n\n    global.add('autoresize', function (editor) {\n      if (!editor.inline) {\n        var oldSize = Cell(0);\n        Commands.register(editor, oldSize);\n        Resize.setup(editor, oldSize);\n      }\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/40.fae7cca5ac311564062a.js","// Exports the \"autoresize\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/autoresize')\n//   ES2015:\n//     import 'tinymce/plugins/autoresize'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/autoresize/index.js\n// module id = GLi4\n// module chunks = 40","(function () {\nvar autoresize = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var getAutoResizeMinHeight = function (editor) {\n      return parseInt(editor.getParam('autoresize_min_height', editor.getElement().offsetHeight), 10);\n    };\n    var getAutoResizeMaxHeight = function (editor) {\n      return parseInt(editor.getParam('autoresize_max_height', 0), 10);\n    };\n    var getAutoResizeOverflowPadding = function (editor) {\n      return editor.getParam('autoresize_overflow_padding', 1);\n    };\n    var getAutoResizeBottomMargin = function (editor) {\n      return editor.getParam('autoresize_bottom_margin', 50);\n    };\n    var shouldAutoResizeOnInit = function (editor) {\n      return editor.getParam('autoresize_on_init', true);\n    };\n    var Settings = {\n      getAutoResizeMinHeight: getAutoResizeMinHeight,\n      getAutoResizeMaxHeight: getAutoResizeMaxHeight,\n      getAutoResizeOverflowPadding: getAutoResizeOverflowPadding,\n      getAutoResizeBottomMargin: getAutoResizeBottomMargin,\n      shouldAutoResizeOnInit: shouldAutoResizeOnInit\n    };\n\n    var isFullscreen = function (editor) {\n      return editor.plugins.fullscreen && editor.plugins.fullscreen.isFullscreen();\n    };\n    var wait = function (editor, oldSize, times, interval, callback) {\n      global$2.setEditorTimeout(editor, function () {\n        resize(editor, oldSize);\n        if (times--) {\n          wait(editor, oldSize, times, interval, callback);\n        } else if (callback) {\n          callback();\n        }\n      }, interval);\n    };\n    var toggleScrolling = function (editor, state) {\n      var body = editor.getBody();\n      if (body) {\n        body.style.overflowY = state ? '' : 'hidden';\n        if (!state) {\n          body.scrollTop = 0;\n        }\n      }\n    };\n    var resize = function (editor, oldSize) {\n      var deltaSize, doc, body, resizeHeight, myHeight;\n      var marginTop, marginBottom, paddingTop, paddingBottom, borderTop, borderBottom;\n      var dom = editor.dom;\n      doc = editor.getDoc();\n      if (!doc) {\n        return;\n      }\n      if (isFullscreen(editor)) {\n        toggleScrolling(editor, true);\n        return;\n      }\n      body = doc.body;\n      resizeHeight = Settings.getAutoResizeMinHeight(editor);\n      marginTop = dom.getStyle(body, 'margin-top', true);\n      marginBottom = dom.getStyle(body, 'margin-bottom', true);\n      paddingTop = dom.getStyle(body, 'padding-top', true);\n      paddingBottom = dom.getStyle(body, 'padding-bottom', true);\n      borderTop = dom.getStyle(body, 'border-top-width', true);\n      borderBottom = dom.getStyle(body, 'border-bottom-width', true);\n      myHeight = body.offsetHeight + parseInt(marginTop, 10) + parseInt(marginBottom, 10) + parseInt(paddingTop, 10) + parseInt(paddingBottom, 10) + parseInt(borderTop, 10) + parseInt(borderBottom, 10);\n      if (isNaN(myHeight) || myHeight <= 0) {\n        myHeight = global$1.ie ? body.scrollHeight : global$1.webkit && body.clientHeight === 0 ? 0 : body.offsetHeight;\n      }\n      if (myHeight > Settings.getAutoResizeMinHeight(editor)) {\n        resizeHeight = myHeight;\n      }\n      var maxHeight = Settings.getAutoResizeMaxHeight(editor);\n      if (maxHeight && myHeight > maxHeight) {\n        resizeHeight = maxHeight;\n        toggleScrolling(editor, true);\n      } else {\n        toggleScrolling(editor, false);\n      }\n      if (resizeHeight !== oldSize.get()) {\n        deltaSize = resizeHeight - oldSize.get();\n        dom.setStyle(editor.iframeElement, 'height', resizeHeight + 'px');\n        oldSize.set(resizeHeight);\n        if (global$1.webkit && deltaSize < 0) {\n          resize(editor, oldSize);\n        }\n      }\n    };\n    var setup = function (editor, oldSize) {\n      editor.on('init', function () {\n        var overflowPadding, bottomMargin;\n        var dom = editor.dom;\n        overflowPadding = Settings.getAutoResizeOverflowPadding(editor);\n        bottomMargin = Settings.getAutoResizeBottomMargin(editor);\n        if (overflowPadding !== false) {\n          dom.setStyles(editor.getBody(), {\n            paddingLeft: overflowPadding,\n            paddingRight: overflowPadding\n          });\n        }\n        if (bottomMargin !== false) {\n          dom.setStyles(editor.getBody(), { paddingBottom: bottomMargin });\n        }\n      });\n      editor.on('nodechange setcontent keyup FullscreenStateChanged', function (e) {\n        resize(editor, oldSize);\n      });\n      if (Settings.shouldAutoResizeOnInit(editor)) {\n        editor.on('init', function () {\n          wait(editor, oldSize, 20, 100, function () {\n            wait(editor, oldSize, 5, 1000);\n          });\n        });\n      }\n    };\n    var Resize = {\n      setup: setup,\n      resize: resize\n    };\n\n    var register = function (editor, oldSize) {\n      editor.addCommand('mceAutoResize', function () {\n        Resize.resize(editor, oldSize);\n      });\n    };\n    var Commands = { register: register };\n\n    global.add('autoresize', function (editor) {\n      if (!editor.inline) {\n        var oldSize = Cell(0);\n        Commands.register(editor, oldSize);\n        Resize.setup(editor, oldSize);\n      }\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/autoresize/plugin.js\n// module id = qR11\n// module chunks = 40"],"sourceRoot":""}