{"version":3,"sources":["webpack:///static/js/35.1befc379787fd585bf2a.js","webpack:///./~/tinymce/plugins/codesample/index.js","webpack:///./~/tinymce/plugins/codesample/plugin.js"],"names":["webpackJsonp","OdVP","module","exports","__webpack_require__","o0RZ","domGlobals","isCodeSample","elm","nodeName","className","indexOf","trimArg","predicateFn","arg1","arg2","Plugin","Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","global$1","getContentCss","editor","settings","codesample_content_css","getLanguages","codesample_languages","getDialogMinWidth","Math","min","DOM","getViewPort","w","getParam","getDialogMinHeight","Settings","window","global$2","_self","WorkerGlobalScope","self","Prism","lang","_","encode","tokens","Token","type","content","alias","map","replace","o","Object","prototype","toString","call","match","key","hasOwnProperty","languages","extend","id","redef","insertBefore","inside","before","insert","root","grammar","arguments","length","newToken","ret","token","DFS","this","callback","i","plugins","highlightAll","async","elements","document","querySelectorAll","element","highlightElement","language","parent","test","parentNode","code","textContent","env","hooks","run","Worker","worker","filename","onmessage","evt","highlightedCode","data","innerHTML","postMessage","JSON","stringify","immediateClose","highlight","text","tokenize","strarr","rest","tokenloop","patterns","j","pattern","lookbehind","lookbehindLength","str","lastIndex","exec","from","index","slice","len","to","after","args","push","wrapped","Array","splice","apply","all","add","name","callbacks","join","tag","classes","attributes","spellcheck","aliases","addEventListener","message","parse","close","markup","comment","prolog","doctype","cdata","punctuation","namespace","entity","title","xml","html","mathml","svg","css","atrule","rule","url","selector","string","property","important","function","style","clike","javascript","keyword","number","regex","interpolation","script","js","c","operator","macro","boolean","csharp","preprocessor","cpp","java","php","constant","delimiter","variable","package","tokenStack","backupCode","t","python","ruby","symbol","builtin","Utils","getSelectedCodeSample","node","selection","getNode","insertCodeSample","undoManager","transact","dom","setAttrib","select","insertContent","$","removeAttr","getCurrentCode","CodeSample","getLanguages$1","defaultLanguages","customLanguages","getCurrentLanguage","matches","Languages","Dialog","open","minWidth","minHeight","currentLanguage","currentLanguages","currentCode","windowManager","layout","direction","align","body","label","maxWidth","values","multiline","ariaLabel","flex","autofocus","onSubmit","e","register","addCommand","isCollapsed","formatter","toggle","Commands","setup","on","filter","each","idx","$elm","attr","trim","empty","append","unprocessedCodeSamples","contentEditable","find","replaceChild","getDoc","createTextNode","FilterContent","loadCss","pluginUrl","addedInlineCss","addedCss","linkElm","contentCss","inline","create","rel","href","getElementsByTagName","appendChild","LoadCss","register$1","addButton","cmd","addMenuItem","icon","Buttons","ev","target"],"mappings":"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","file":"static/js/35.1befc379787fd585bf2a.js","sourcesContent":["webpackJsonp([35],{\n\n/***/ \"OdVP\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"codesample\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/codesample')\n//   ES2015:\n//     import 'tinymce/plugins/codesample'\n__webpack_require__(\"o0RZ\");\n\n/***/ }),\n\n/***/ \"o0RZ\":\n/***/ (function(module, exports) {\n\n(function () {\nvar codesample = (function (domGlobals) {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var getContentCss = function (editor) {\n      return editor.settings.codesample_content_css;\n    };\n    var getLanguages = function (editor) {\n      return editor.settings.codesample_languages;\n    };\n    var getDialogMinWidth = function (editor) {\n      return Math.min(global$1.DOM.getViewPort().w, editor.getParam('codesample_dialog_width', 800));\n    };\n    var getDialogMinHeight = function (editor) {\n      return Math.min(global$1.DOM.getViewPort().w, editor.getParam('codesample_dialog_height', 650));\n    };\n    var Settings = {\n      getContentCss: getContentCss,\n      getLanguages: getLanguages,\n      getDialogMinWidth: getDialogMinWidth,\n      getDialogMinHeight: getDialogMinHeight\n    };\n\n    var window = {};\n    var global$2 = window;\n    var _self = typeof window !== 'undefined' ? window : typeof WorkerGlobalScope !== 'undefined' && domGlobals.self instanceof WorkerGlobalScope ? domGlobals.self : {};\n    var Prism = function () {\n      var lang = /\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i;\n      var _ = _self.Prism = {\n        util: {\n          encode: function (tokens) {\n            if (tokens instanceof Token) {\n              return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n            } else if (_.util.type(tokens) === 'Array') {\n              return tokens.map(_.util.encode);\n            } else {\n              return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n            }\n          },\n          type: function (o) {\n            return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n          },\n          clone: function (o) {\n            var type = _.util.type(o);\n            switch (type) {\n            case 'Object':\n              var clone = {};\n              for (var key in o) {\n                if (o.hasOwnProperty(key)) {\n                  clone[key] = _.util.clone(o[key]);\n                }\n              }\n              return clone;\n            case 'Array':\n              return o.map && o.map(function (v) {\n                return _.util.clone(v);\n              });\n            }\n            return o;\n          }\n        },\n        languages: {\n          extend: function (id, redef) {\n            var lang = _.util.clone(_.languages[id]);\n            for (var key in redef) {\n              lang[key] = redef[key];\n            }\n            return lang;\n          },\n          insertBefore: function (inside, before, insert, root) {\n            root = root || _.languages;\n            var grammar = root[inside];\n            if (arguments.length === 2) {\n              insert = arguments[1];\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  grammar[newToken] = insert[newToken];\n                }\n              }\n              return grammar;\n            }\n            var ret = {};\n            for (var token in grammar) {\n              if (grammar.hasOwnProperty(token)) {\n                if (token === before) {\n                  for (var newToken in insert) {\n                    if (insert.hasOwnProperty(newToken)) {\n                      ret[newToken] = insert[newToken];\n                    }\n                  }\n                }\n                ret[token] = grammar[token];\n              }\n            }\n            _.languages.DFS(_.languages, function (key, value) {\n              if (value === root[inside] && key !== inside) {\n                this[key] = ret;\n              }\n            });\n            return root[inside] = ret;\n          },\n          DFS: function (o, callback, type) {\n            for (var i in o) {\n              if (o.hasOwnProperty(i)) {\n                callback.call(o, i, o[i], type || i);\n                if (_.util.type(o[i]) === 'Object') {\n                  _.languages.DFS(o[i], callback);\n                } else if (_.util.type(o[i]) === 'Array') {\n                  _.languages.DFS(o[i], callback, i);\n                }\n              }\n            }\n          }\n        },\n        plugins: {},\n        highlightAll: function (async, callback) {\n          var elements = domGlobals.document.querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code');\n          for (var i = 0, element = void 0; element = elements[i++];) {\n            _.highlightElement(element, async === true, callback);\n          }\n        },\n        highlightElement: function (element, async, callback) {\n          var language, grammar, parent = element;\n          while (parent && !lang.test(parent.className)) {\n            parent = parent.parentNode;\n          }\n          if (parent) {\n            language = (parent.className.match(lang) || [\n              ,\n              ''\n            ])[1];\n            grammar = _.languages[language];\n          }\n          element.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n          parent = element.parentNode;\n          if (/pre/i.test(parent.nodeName)) {\n            parent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n          }\n          var code = element.textContent;\n          var env = {\n            element: element,\n            language: language,\n            grammar: grammar,\n            code: code\n          };\n          if (!code || !grammar) {\n            _.hooks.run('complete', env);\n            return;\n          }\n          _.hooks.run('before-highlight', env);\n          if (async && _self.Worker) {\n            var worker = new domGlobals.Worker(_.filename);\n            worker.onmessage = function (evt) {\n              env.highlightedCode = evt.data;\n              _.hooks.run('before-insert', env);\n              env.element.innerHTML = env.highlightedCode;\n              if (callback) {\n                callback.call(env.element);\n              }\n              _.hooks.run('after-highlight', env);\n              _.hooks.run('complete', env);\n            };\n            worker.postMessage(JSON.stringify({\n              language: env.language,\n              code: env.code,\n              immediateClose: true\n            }));\n          } else {\n            env.highlightedCode = _.highlight(env.code, env.grammar, env.language);\n            _.hooks.run('before-insert', env);\n            env.element.innerHTML = env.highlightedCode;\n            if (callback) {\n              callback.call(element);\n            }\n            _.hooks.run('after-highlight', env);\n            _.hooks.run('complete', env);\n          }\n        },\n        highlight: function (text, grammar, language) {\n          var tokens = _.tokenize(text, grammar);\n          return Token.stringify(_.util.encode(tokens), language);\n        },\n        tokenize: function (text, grammar, language) {\n          var Token = _.Token;\n          var strarr = [text];\n          var rest = grammar.rest;\n          if (rest) {\n            for (var token in rest) {\n              grammar[token] = rest[token];\n            }\n            delete grammar.rest;\n          }\n          tokenloop:\n            for (var token in grammar) {\n              if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n                continue;\n              }\n              var patterns = grammar[token];\n              patterns = _.util.type(patterns) === 'Array' ? patterns : [patterns];\n              for (var j = 0; j < patterns.length; ++j) {\n                var pattern = patterns[j];\n                var inside = pattern.inside;\n                var lookbehind = !!pattern.lookbehind;\n                var lookbehindLength = 0;\n                var alias = pattern.alias;\n                pattern = pattern.pattern || pattern;\n                for (var i = 0; i < strarr.length; i++) {\n                  var str = strarr[i];\n                  if (strarr.length > text.length) {\n                    break tokenloop;\n                  }\n                  if (str instanceof Token) {\n                    continue;\n                  }\n                  pattern.lastIndex = 0;\n                  var match = pattern.exec(str);\n                  if (match) {\n                    if (lookbehind) {\n                      lookbehindLength = match[1].length;\n                    }\n                    var from = match.index - 1 + lookbehindLength;\n                    match = match[0].slice(lookbehindLength);\n                    var len = match.length, to = from + len, before = str.slice(0, from + 1), after = str.slice(to + 1);\n                    var args = [\n                      i,\n                      1\n                    ];\n                    if (before) {\n                      args.push(before);\n                    }\n                    var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias);\n                    args.push(wrapped);\n                    if (after) {\n                      args.push(after);\n                    }\n                    Array.prototype.splice.apply(strarr, args);\n                  }\n                }\n              }\n            }\n          return strarr;\n        },\n        hooks: {\n          all: {},\n          add: function (name, callback) {\n            var hooks = _.hooks.all;\n            hooks[name] = hooks[name] || [];\n            hooks[name].push(callback);\n          },\n          run: function (name, env) {\n            var callbacks = _.hooks.all[name];\n            if (!callbacks || !callbacks.length) {\n              return;\n            }\n            for (var i = 0, callback = void 0; callback = callbacks[i++];) {\n              callback(env);\n            }\n          }\n        }\n      };\n      var Token = _.Token = function (type, content, alias) {\n        this.type = type;\n        this.content = content;\n        this.alias = alias;\n      };\n      Token.stringify = function (o, language, parent) {\n        if (typeof o === 'string') {\n          return o;\n        }\n        if (_.util.type(o) === 'Array') {\n          return o.map(function (element) {\n            return Token.stringify(element, language, o);\n          }).join('');\n        }\n        var env = {\n          type: o.type,\n          content: Token.stringify(o.content, language, parent),\n          tag: 'span',\n          classes: [\n            'token',\n            o.type\n          ],\n          attributes: {},\n          language: language,\n          parent: parent\n        };\n        if (env.type === 'comment') {\n          env.attributes.spellcheck = 'true';\n        }\n        if (o.alias) {\n          var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n          Array.prototype.push.apply(env.classes, aliases);\n        }\n        _.hooks.run('wrap', env);\n        var attributes = '';\n        for (var name in env.attributes) {\n          attributes += (attributes ? ' ' : '') + name + '=\"' + (env.attributes[name] || '') + '\"';\n        }\n        return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\" ' + attributes + '>' + env.content + '</' + env.tag + '>';\n      };\n      if (!_self.document) {\n        if (!_self.addEventListener) {\n          return _self.Prism;\n        }\n        _self.addEventListener('message', function (evt) {\n          var message = JSON.parse(evt.data), lang = message.language, code = message.code, immediateClose = message.immediateClose;\n          _self.postMessage(_.highlight(code, _.languages[lang], lang));\n          if (immediateClose) {\n            _self.close();\n          }\n        }, false);\n        return _self.Prism;\n      }\n    }();\n    if (typeof global$2 !== 'undefined') {\n      global$2.Prism = Prism;\n    }\n    Prism.languages.markup = {\n      comment: /<!--[\\w\\W]*?-->/,\n      prolog: /<\\?[\\w\\W]+?\\?>/,\n      doctype: /<!DOCTYPE[\\w\\W]+?>/,\n      cdata: /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n      tag: {\n        pattern: /<\\/?[^\\s>\\/=.]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\w\\W])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n        inside: {\n          'tag': {\n            pattern: /^<\\/?[^\\s>\\/]+/i,\n            inside: {\n              punctuation: /^<\\/?/,\n              namespace: /^[^\\s>\\/:]+:/\n            }\n          },\n          'attr-value': {\n            pattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/i,\n            inside: { punctuation: /[=>\"']/ }\n          },\n          'punctuation': /\\/?>/,\n          'attr-name': {\n            pattern: /[^\\s>\\/]+/,\n            inside: { namespace: /^[^\\s>\\/:]+:/ }\n          }\n        }\n      },\n      entity: /&#?[\\da-z]{1,8};/i\n    };\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes.title = env.content.replace(/&amp;/, '&');\n      }\n    });\n    Prism.languages.xml = Prism.languages.markup;\n    Prism.languages.html = Prism.languages.markup;\n    Prism.languages.mathml = Prism.languages.markup;\n    Prism.languages.svg = Prism.languages.markup;\n    Prism.languages.css = {\n      comment: /\\/\\*[\\w\\W]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-]+?.*?(;|(?=\\s*\\{))/i,\n        inside: { rule: /@[\\w-]+/ }\n      },\n      url: /url\\((?:([\"'])(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n      selector: /[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)/,\n      string: /(\"|')(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      property: /(\\b|\\B)[\\w-]+(?=\\s*:)/i,\n      important: /\\B!important\\b/i,\n      function: /[-a-z0-9]+(?=\\()/i,\n      punctuation: /[(){};:]/\n    };\n    Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css);\n    if (Prism.languages.markup) {\n      Prism.languages.insertBefore('markup', 'tag', {\n        style: {\n          pattern: /<style[\\w\\W]*?>[\\w\\W]*?<\\/style>/i,\n          inside: {\n            tag: {\n              pattern: /<style[\\w\\W]*?>|<\\/style>/i,\n              inside: Prism.languages.markup.tag.inside\n            },\n            rest: Prism.languages.css\n          },\n          alias: 'language-css'\n        }\n      });\n      Prism.languages.insertBefore('inside', 'attr-value', {\n        'style-attr': {\n          pattern: /\\s*style=(\"|').*?\\1/i,\n          inside: {\n            'attr-name': {\n              pattern: /^\\s*style/i,\n              inside: Prism.languages.markup.tag.inside\n            },\n            'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n            'attr-value': {\n              pattern: /.+/i,\n              inside: Prism.languages.css\n            }\n          },\n          alias: 'language-css'\n        }\n      }, Prism.languages.markup.tag);\n    }\n    Prism.languages.clike = {\n      'comment': [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true\n        }\n      ],\n      'string': /([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      'class-name': {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/i,\n        lookbehind: true,\n        inside: { punctuation: /(\\.|\\\\)/ }\n      },\n      'keyword': /\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n      'boolean': /\\b(true|false)\\b/,\n      'function': /[a-z0-9_]+(?=\\()/i,\n      'number': /\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,\n      'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n      'punctuation': /[{}[\\];(),.:]/\n    };\n    Prism.languages.javascript = Prism.languages.extend('clike', {\n      keyword: /\\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/,\n      number: /\\b-?(0x[\\dA-Fa-f]+|0b[01]+|0o[0-7]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|NaN|Infinity)\\b/,\n      function: /[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*(?=\\()/i\n    });\n    Prism.languages.insertBefore('javascript', 'keyword', {\n      regex: {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('javascript', 'class-name', {\n      'template-string': {\n        pattern: /`(?:\\\\`|\\\\?[^`])*`/,\n        inside: {\n          interpolation: {\n            pattern: /\\$\\{[^}]+\\}/,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              'rest': Prism.languages.javascript\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    });\n    if (Prism.languages.markup) {\n      Prism.languages.insertBefore('markup', 'tag', {\n        script: {\n          pattern: /<script[\\w\\W]*?>[\\w\\W]*?<\\/script>/i,\n          inside: {\n            tag: {\n              pattern: /<script[\\w\\W]*?>|<\\/script>/i,\n              inside: Prism.languages.markup.tag.inside\n            },\n            rest: Prism.languages.javascript\n          },\n          alias: 'language-javascript'\n        }\n      });\n    }\n    Prism.languages.js = Prism.languages.javascript;\n    Prism.languages.c = Prism.languages.extend('clike', {\n      keyword: /\\b(asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n      operator: /\\-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*\\/]/,\n      number: /\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)[ful]*\\b/i\n    });\n    Prism.languages.insertBefore('c', 'string', {\n      macro: {\n        pattern: /(^\\s*)#\\s*[a-z]+([^\\r\\n\\\\]|\\\\.|\\\\(?:\\r\\n?|\\n))*/im,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          string: {\n            pattern: /(#\\s*include\\s*)(<.+?>|(\"|')(\\\\?.)+?\\3)/,\n            lookbehind: true\n          }\n        }\n      }\n    });\n    delete Prism.languages.c['class-name'];\n    delete Prism.languages.c.boolean;\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      keyword: /\\b(abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|async|await|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\\b/,\n      string: [\n        /@(\"|')(\\1\\1|\\\\\\1|\\\\?(?!\\1)[\\s\\S])*\\1/,\n        /(\"|')(\\\\?.)*?\\1/\n      ],\n      number: /\\b-?(0x[\\da-f]+|\\d*\\.?\\d+)\\b/i\n    });\n    Prism.languages.insertBefore('csharp', 'keyword', {\n      preprocessor: {\n        pattern: /(^\\s*)#.*/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      keyword: /\\b(alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n      boolean: /\\b(true|false)\\b/,\n      operator: /[-+]{1,2}|!=?|<{1,2}=?|>{1,2}=?|\\->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|?\\||\\?|\\*|\\/|\\b(and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n    });\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'class-name': {\n        pattern: /(class\\s+)[a-z0-9_]+/i,\n        lookbehind: true\n      }\n    });\n    Prism.languages.java = Prism.languages.extend('clike', {\n      keyword: /\\b(abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\\b/,\n      number: /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp\\-]+\\b|\\b\\d*\\.?\\d+(?:e[+-]?\\d+)?[df]?\\b/i,\n      operator: {\n        pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n      constant: /\\b[A-Z0-9_]{2,}\\b/,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\w\\W]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'class-name', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    });\n    Prism.languages.insertBefore('php', 'keyword', {\n      delimiter: /\\?>|<\\?(?:php)?/i,\n      variable: /\\$\\w+\\b/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: { punctuation: /\\\\/ }\n      }\n    });\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    });\n    if (Prism.languages.markup) {\n      Prism.hooks.add('before-highlight', function (env) {\n        if (env.language !== 'php') {\n          return;\n        }\n        env.tokenStack = [];\n        env.backupCode = env.code;\n        env.code = env.code.replace(/(?:<\\?php|<\\?)[\\w\\W]*?(?:\\?>)/ig, function (match) {\n          env.tokenStack.push(match);\n          return '{{{PHP' + env.tokenStack.length + '}}}';\n        });\n      });\n      Prism.hooks.add('before-insert', function (env) {\n        if (env.language === 'php') {\n          env.code = env.backupCode;\n          delete env.backupCode;\n        }\n      });\n      Prism.hooks.add('after-highlight', function (env) {\n        if (env.language !== 'php') {\n          return;\n        }\n        for (var i = 0, t = void 0; t = env.tokenStack[i]; i++) {\n          env.highlightedCode = env.highlightedCode.replace('{{{PHP' + (i + 1) + '}}}', Prism.highlight(t, env.grammar, 'php').replace(/\\$/g, '$$$$'));\n        }\n        env.element.innerHTML = env.highlightedCode;\n      });\n      Prism.hooks.add('wrap', function (env) {\n        if (env.language === 'php' && env.type === 'markup') {\n          env.content = env.content.replace(/(\\{\\{\\{PHP[0-9]+\\}\\}\\})/g, '<span class=\"token php\">$1</span>');\n        }\n      });\n      Prism.languages.insertBefore('php', 'comment', {\n        markup: {\n          pattern: /<[^?]\\/?(.*?)>/,\n          inside: Prism.languages.markup\n        },\n        php: /\\{\\{\\{PHP[0-9]+\\}\\}\\}/\n      });\n    }\n    Prism.languages.python = {\n      'comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true\n      },\n      'string': /\"\"\"[\\s\\S]+?\"\"\"|'''[\\s\\S]+?'''|(\"|')(?:\\\\?.)*?\\1/,\n      'function': {\n        pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_][a-zA-Z0-9_]*(?=\\()/g,\n        lookbehind: true\n      },\n      'class-name': {\n        pattern: /(\\bclass\\s+)[a-z0-9_]+/i,\n        lookbehind: true\n      },\n      'keyword': /\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|with|yield)\\b/,\n      'boolean': /\\b(?:True|False)\\b/,\n      'number': /\\b-?(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n      'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,\n      'punctuation': /[{}[\\];(),.:]/\n    };\n    (function (Prism) {\n      Prism.languages.ruby = Prism.languages.extend('clike', {\n        comment: /#(?!\\{[^\\r\\n]*?\\}).*/,\n        keyword: /\\b(alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n      });\n      var interpolation = {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'tag'\n          },\n          rest: Prism.util.clone(Prism.languages.ruby)\n        }\n      };\n      Prism.languages.insertBefore('ruby', 'keyword', {\n        regex: [\n          {\n            pattern: /%r([^a-zA-Z0-9\\s\\{\\(\\[<])(?:[^\\\\]|\\\\[\\s\\S])*?\\1[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n            lookbehind: true\n          }\n        ],\n        variable: /[@$]+[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\\b)/,\n        symbol: /:[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\\b)/\n      });\n      Prism.languages.insertBefore('ruby', 'number', {\n        builtin: /\\b(Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|File|Fixnum|Fload|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n        constant: /\\b[A-Z][a-zA-Z_0-9]*(?:[?!]|\\b)/\n      });\n      Prism.languages.ruby.string = [\n        {\n          pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s\\{\\(\\[<])(?:[^\\\\]|\\\\[\\s\\S])*?\\1/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /(\"|')(#\\{[^}]+\\}|\\\\(?:\\r?\\n|\\r)|\\\\?.)*?\\1/,\n          inside: { interpolation: interpolation }\n        }\n      ];\n    }(Prism));\n\n    function isCodeSample(elm) {\n      return elm && elm.nodeName === 'PRE' && elm.className.indexOf('language-') !== -1;\n    }\n    function trimArg(predicateFn) {\n      return function (arg1, arg2) {\n        return predicateFn(arg2);\n      };\n    }\n    var Utils = {\n      isCodeSample: isCodeSample,\n      trimArg: trimArg\n    };\n\n    var getSelectedCodeSample = function (editor) {\n      var node = editor.selection.getNode();\n      if (Utils.isCodeSample(node)) {\n        return node;\n      }\n      return null;\n    };\n    var insertCodeSample = function (editor, language, code) {\n      editor.undoManager.transact(function () {\n        var node = getSelectedCodeSample(editor);\n        code = global$1.DOM.encode(code);\n        if (node) {\n          editor.dom.setAttrib(node, 'class', 'language-' + language);\n          node.innerHTML = code;\n          Prism.highlightElement(node);\n          editor.selection.select(node);\n        } else {\n          editor.insertContent('<pre id=\"__new\" class=\"language-' + language + '\">' + code + '</pre>');\n          editor.selection.select(editor.$('#__new').removeAttr('id')[0]);\n        }\n      });\n    };\n    var getCurrentCode = function (editor) {\n      var node = getSelectedCodeSample(editor);\n      if (node) {\n        return node.textContent;\n      }\n      return '';\n    };\n    var CodeSample = {\n      getSelectedCodeSample: getSelectedCodeSample,\n      insertCodeSample: insertCodeSample,\n      getCurrentCode: getCurrentCode\n    };\n\n    var getLanguages$1 = function (editor) {\n      var defaultLanguages = [\n        {\n          text: 'HTML/XML',\n          value: 'markup'\n        },\n        {\n          text: 'JavaScript',\n          value: 'javascript'\n        },\n        {\n          text: 'CSS',\n          value: 'css'\n        },\n        {\n          text: 'PHP',\n          value: 'php'\n        },\n        {\n          text: 'Ruby',\n          value: 'ruby'\n        },\n        {\n          text: 'Python',\n          value: 'python'\n        },\n        {\n          text: 'Java',\n          value: 'java'\n        },\n        {\n          text: 'C',\n          value: 'c'\n        },\n        {\n          text: 'C#',\n          value: 'csharp'\n        },\n        {\n          text: 'C++',\n          value: 'cpp'\n        }\n      ];\n      var customLanguages = Settings.getLanguages(editor);\n      return customLanguages ? customLanguages : defaultLanguages;\n    };\n    var getCurrentLanguage = function (editor) {\n      var matches;\n      var node = CodeSample.getSelectedCodeSample(editor);\n      if (node) {\n        matches = node.className.match(/language-(\\w+)/);\n        return matches ? matches[1] : '';\n      }\n      return '';\n    };\n    var Languages = {\n      getLanguages: getLanguages$1,\n      getCurrentLanguage: getCurrentLanguage\n    };\n\n    var Dialog = {\n      open: function (editor) {\n        var minWidth = Settings.getDialogMinWidth(editor);\n        var minHeight = Settings.getDialogMinHeight(editor);\n        var currentLanguage = Languages.getCurrentLanguage(editor);\n        var currentLanguages = Languages.getLanguages(editor);\n        var currentCode = CodeSample.getCurrentCode(editor);\n        editor.windowManager.open({\n          title: 'Insert/Edit code sample',\n          minWidth: minWidth,\n          minHeight: minHeight,\n          layout: 'flex',\n          direction: 'column',\n          align: 'stretch',\n          body: [\n            {\n              type: 'listbox',\n              name: 'language',\n              label: 'Language',\n              maxWidth: 200,\n              value: currentLanguage,\n              values: currentLanguages\n            },\n            {\n              type: 'textbox',\n              name: 'code',\n              multiline: true,\n              spellcheck: false,\n              ariaLabel: 'Code view',\n              flex: 1,\n              style: 'direction: ltr; text-align: left',\n              classes: 'monospace',\n              value: currentCode,\n              autofocus: true\n            }\n          ],\n          onSubmit: function (e) {\n            CodeSample.insertCodeSample(editor, e.data.language, e.data.code);\n          }\n        });\n      }\n    };\n\n    var register = function (editor) {\n      editor.addCommand('codesample', function () {\n        var node = editor.selection.getNode();\n        if (editor.selection.isCollapsed() || Utils.isCodeSample(node)) {\n          Dialog.open(editor);\n        } else {\n          editor.formatter.toggle('code');\n        }\n      });\n    };\n    var Commands = { register: register };\n\n    var setup = function (editor) {\n      var $ = editor.$;\n      editor.on('PreProcess', function (e) {\n        $('pre[contenteditable=false]', e.node).filter(Utils.trimArg(Utils.isCodeSample)).each(function (idx, elm) {\n          var $elm = $(elm), code = elm.textContent;\n          $elm.attr('class', $.trim($elm.attr('class')));\n          $elm.removeAttr('contentEditable');\n          $elm.empty().append($('<code></code>').each(function () {\n            this.textContent = code;\n          }));\n        });\n      });\n      editor.on('SetContent', function () {\n        var unprocessedCodeSamples = $('pre').filter(Utils.trimArg(Utils.isCodeSample)).filter(function (idx, elm) {\n          return elm.contentEditable !== 'false';\n        });\n        if (unprocessedCodeSamples.length) {\n          editor.undoManager.transact(function () {\n            unprocessedCodeSamples.each(function (idx, elm) {\n              $(elm).find('br').each(function (idx, elm) {\n                elm.parentNode.replaceChild(editor.getDoc().createTextNode('\\n'), elm);\n              });\n              elm.contentEditable = false;\n              elm.innerHTML = editor.dom.encode(elm.textContent);\n              Prism.highlightElement(elm);\n              elm.className = $.trim(elm.className);\n            });\n          });\n        }\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    var loadCss = function (editor, pluginUrl, addedInlineCss, addedCss) {\n      var linkElm;\n      var contentCss = Settings.getContentCss(editor);\n      if (editor.inline && addedInlineCss.get()) {\n        return;\n      }\n      if (!editor.inline && addedCss.get()) {\n        return;\n      }\n      if (editor.inline) {\n        addedInlineCss.set(true);\n      } else {\n        addedCss.set(true);\n      }\n      if (contentCss !== false) {\n        linkElm = editor.dom.create('link', {\n          rel: 'stylesheet',\n          href: contentCss ? contentCss : pluginUrl + '/css/prism.css'\n        });\n        editor.getDoc().getElementsByTagName('head')[0].appendChild(linkElm);\n      }\n    };\n    var LoadCss = { loadCss: loadCss };\n\n    var register$1 = function (editor) {\n      editor.addButton('codesample', {\n        cmd: 'codesample',\n        title: 'Insert/Edit code sample'\n      });\n      editor.addMenuItem('codesample', {\n        cmd: 'codesample',\n        text: 'Code sample',\n        icon: 'codesample'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    var addedInlineCss = Cell(false);\n    global.add('codesample', function (editor, pluginUrl) {\n      var addedCss = Cell(false);\n      FilterContent.setup(editor);\n      Buttons.register(editor);\n      Commands.register(editor);\n      editor.on('init', function () {\n        LoadCss.loadCss(editor, pluginUrl, addedInlineCss, addedCss);\n      });\n      editor.on('dblclick', function (ev) {\n        if (Utils.isCodeSample(ev.target)) {\n          Dialog.open(editor);\n        }\n      });\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/35.1befc379787fd585bf2a.js","// Exports the \"codesample\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/codesample')\n//   ES2015:\n//     import 'tinymce/plugins/codesample'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/codesample/index.js\n// module id = OdVP\n// module chunks = 35","(function () {\nvar codesample = (function (domGlobals) {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var getContentCss = function (editor) {\n      return editor.settings.codesample_content_css;\n    };\n    var getLanguages = function (editor) {\n      return editor.settings.codesample_languages;\n    };\n    var getDialogMinWidth = function (editor) {\n      return Math.min(global$1.DOM.getViewPort().w, editor.getParam('codesample_dialog_width', 800));\n    };\n    var getDialogMinHeight = function (editor) {\n      return Math.min(global$1.DOM.getViewPort().w, editor.getParam('codesample_dialog_height', 650));\n    };\n    var Settings = {\n      getContentCss: getContentCss,\n      getLanguages: getLanguages,\n      getDialogMinWidth: getDialogMinWidth,\n      getDialogMinHeight: getDialogMinHeight\n    };\n\n    var window = {};\n    var global$2 = window;\n    var _self = typeof window !== 'undefined' ? window : typeof WorkerGlobalScope !== 'undefined' && domGlobals.self instanceof WorkerGlobalScope ? domGlobals.self : {};\n    var Prism = function () {\n      var lang = /\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i;\n      var _ = _self.Prism = {\n        util: {\n          encode: function (tokens) {\n            if (tokens instanceof Token) {\n              return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n            } else if (_.util.type(tokens) === 'Array') {\n              return tokens.map(_.util.encode);\n            } else {\n              return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n            }\n          },\n          type: function (o) {\n            return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n          },\n          clone: function (o) {\n            var type = _.util.type(o);\n            switch (type) {\n            case 'Object':\n              var clone = {};\n              for (var key in o) {\n                if (o.hasOwnProperty(key)) {\n                  clone[key] = _.util.clone(o[key]);\n                }\n              }\n              return clone;\n            case 'Array':\n              return o.map && o.map(function (v) {\n                return _.util.clone(v);\n              });\n            }\n            return o;\n          }\n        },\n        languages: {\n          extend: function (id, redef) {\n            var lang = _.util.clone(_.languages[id]);\n            for (var key in redef) {\n              lang[key] = redef[key];\n            }\n            return lang;\n          },\n          insertBefore: function (inside, before, insert, root) {\n            root = root || _.languages;\n            var grammar = root[inside];\n            if (arguments.length === 2) {\n              insert = arguments[1];\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  grammar[newToken] = insert[newToken];\n                }\n              }\n              return grammar;\n            }\n            var ret = {};\n            for (var token in grammar) {\n              if (grammar.hasOwnProperty(token)) {\n                if (token === before) {\n                  for (var newToken in insert) {\n                    if (insert.hasOwnProperty(newToken)) {\n                      ret[newToken] = insert[newToken];\n                    }\n                  }\n                }\n                ret[token] = grammar[token];\n              }\n            }\n            _.languages.DFS(_.languages, function (key, value) {\n              if (value === root[inside] && key !== inside) {\n                this[key] = ret;\n              }\n            });\n            return root[inside] = ret;\n          },\n          DFS: function (o, callback, type) {\n            for (var i in o) {\n              if (o.hasOwnProperty(i)) {\n                callback.call(o, i, o[i], type || i);\n                if (_.util.type(o[i]) === 'Object') {\n                  _.languages.DFS(o[i], callback);\n                } else if (_.util.type(o[i]) === 'Array') {\n                  _.languages.DFS(o[i], callback, i);\n                }\n              }\n            }\n          }\n        },\n        plugins: {},\n        highlightAll: function (async, callback) {\n          var elements = domGlobals.document.querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code');\n          for (var i = 0, element = void 0; element = elements[i++];) {\n            _.highlightElement(element, async === true, callback);\n          }\n        },\n        highlightElement: function (element, async, callback) {\n          var language, grammar, parent = element;\n          while (parent && !lang.test(parent.className)) {\n            parent = parent.parentNode;\n          }\n          if (parent) {\n            language = (parent.className.match(lang) || [\n              ,\n              ''\n            ])[1];\n            grammar = _.languages[language];\n          }\n          element.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n          parent = element.parentNode;\n          if (/pre/i.test(parent.nodeName)) {\n            parent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n          }\n          var code = element.textContent;\n          var env = {\n            element: element,\n            language: language,\n            grammar: grammar,\n            code: code\n          };\n          if (!code || !grammar) {\n            _.hooks.run('complete', env);\n            return;\n          }\n          _.hooks.run('before-highlight', env);\n          if (async && _self.Worker) {\n            var worker = new domGlobals.Worker(_.filename);\n            worker.onmessage = function (evt) {\n              env.highlightedCode = evt.data;\n              _.hooks.run('before-insert', env);\n              env.element.innerHTML = env.highlightedCode;\n              if (callback) {\n                callback.call(env.element);\n              }\n              _.hooks.run('after-highlight', env);\n              _.hooks.run('complete', env);\n            };\n            worker.postMessage(JSON.stringify({\n              language: env.language,\n              code: env.code,\n              immediateClose: true\n            }));\n          } else {\n            env.highlightedCode = _.highlight(env.code, env.grammar, env.language);\n            _.hooks.run('before-insert', env);\n            env.element.innerHTML = env.highlightedCode;\n            if (callback) {\n              callback.call(element);\n            }\n            _.hooks.run('after-highlight', env);\n            _.hooks.run('complete', env);\n          }\n        },\n        highlight: function (text, grammar, language) {\n          var tokens = _.tokenize(text, grammar);\n          return Token.stringify(_.util.encode(tokens), language);\n        },\n        tokenize: function (text, grammar, language) {\n          var Token = _.Token;\n          var strarr = [text];\n          var rest = grammar.rest;\n          if (rest) {\n            for (var token in rest) {\n              grammar[token] = rest[token];\n            }\n            delete grammar.rest;\n          }\n          tokenloop:\n            for (var token in grammar) {\n              if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n                continue;\n              }\n              var patterns = grammar[token];\n              patterns = _.util.type(patterns) === 'Array' ? patterns : [patterns];\n              for (var j = 0; j < patterns.length; ++j) {\n                var pattern = patterns[j];\n                var inside = pattern.inside;\n                var lookbehind = !!pattern.lookbehind;\n                var lookbehindLength = 0;\n                var alias = pattern.alias;\n                pattern = pattern.pattern || pattern;\n                for (var i = 0; i < strarr.length; i++) {\n                  var str = strarr[i];\n                  if (strarr.length > text.length) {\n                    break tokenloop;\n                  }\n                  if (str instanceof Token) {\n                    continue;\n                  }\n                  pattern.lastIndex = 0;\n                  var match = pattern.exec(str);\n                  if (match) {\n                    if (lookbehind) {\n                      lookbehindLength = match[1].length;\n                    }\n                    var from = match.index - 1 + lookbehindLength;\n                    match = match[0].slice(lookbehindLength);\n                    var len = match.length, to = from + len, before = str.slice(0, from + 1), after = str.slice(to + 1);\n                    var args = [\n                      i,\n                      1\n                    ];\n                    if (before) {\n                      args.push(before);\n                    }\n                    var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias);\n                    args.push(wrapped);\n                    if (after) {\n                      args.push(after);\n                    }\n                    Array.prototype.splice.apply(strarr, args);\n                  }\n                }\n              }\n            }\n          return strarr;\n        },\n        hooks: {\n          all: {},\n          add: function (name, callback) {\n            var hooks = _.hooks.all;\n            hooks[name] = hooks[name] || [];\n            hooks[name].push(callback);\n          },\n          run: function (name, env) {\n            var callbacks = _.hooks.all[name];\n            if (!callbacks || !callbacks.length) {\n              return;\n            }\n            for (var i = 0, callback = void 0; callback = callbacks[i++];) {\n              callback(env);\n            }\n          }\n        }\n      };\n      var Token = _.Token = function (type, content, alias) {\n        this.type = type;\n        this.content = content;\n        this.alias = alias;\n      };\n      Token.stringify = function (o, language, parent) {\n        if (typeof o === 'string') {\n          return o;\n        }\n        if (_.util.type(o) === 'Array') {\n          return o.map(function (element) {\n            return Token.stringify(element, language, o);\n          }).join('');\n        }\n        var env = {\n          type: o.type,\n          content: Token.stringify(o.content, language, parent),\n          tag: 'span',\n          classes: [\n            'token',\n            o.type\n          ],\n          attributes: {},\n          language: language,\n          parent: parent\n        };\n        if (env.type === 'comment') {\n          env.attributes.spellcheck = 'true';\n        }\n        if (o.alias) {\n          var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n          Array.prototype.push.apply(env.classes, aliases);\n        }\n        _.hooks.run('wrap', env);\n        var attributes = '';\n        for (var name in env.attributes) {\n          attributes += (attributes ? ' ' : '') + name + '=\"' + (env.attributes[name] || '') + '\"';\n        }\n        return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\" ' + attributes + '>' + env.content + '</' + env.tag + '>';\n      };\n      if (!_self.document) {\n        if (!_self.addEventListener) {\n          return _self.Prism;\n        }\n        _self.addEventListener('message', function (evt) {\n          var message = JSON.parse(evt.data), lang = message.language, code = message.code, immediateClose = message.immediateClose;\n          _self.postMessage(_.highlight(code, _.languages[lang], lang));\n          if (immediateClose) {\n            _self.close();\n          }\n        }, false);\n        return _self.Prism;\n      }\n    }();\n    if (typeof global$2 !== 'undefined') {\n      global$2.Prism = Prism;\n    }\n    Prism.languages.markup = {\n      comment: /<!--[\\w\\W]*?-->/,\n      prolog: /<\\?[\\w\\W]+?\\?>/,\n      doctype: /<!DOCTYPE[\\w\\W]+?>/,\n      cdata: /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n      tag: {\n        pattern: /<\\/?[^\\s>\\/=.]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\w\\W])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n        inside: {\n          'tag': {\n            pattern: /^<\\/?[^\\s>\\/]+/i,\n            inside: {\n              punctuation: /^<\\/?/,\n              namespace: /^[^\\s>\\/:]+:/\n            }\n          },\n          'attr-value': {\n            pattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/i,\n            inside: { punctuation: /[=>\"']/ }\n          },\n          'punctuation': /\\/?>/,\n          'attr-name': {\n            pattern: /[^\\s>\\/]+/,\n            inside: { namespace: /^[^\\s>\\/:]+:/ }\n          }\n        }\n      },\n      entity: /&#?[\\da-z]{1,8};/i\n    };\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes.title = env.content.replace(/&amp;/, '&');\n      }\n    });\n    Prism.languages.xml = Prism.languages.markup;\n    Prism.languages.html = Prism.languages.markup;\n    Prism.languages.mathml = Prism.languages.markup;\n    Prism.languages.svg = Prism.languages.markup;\n    Prism.languages.css = {\n      comment: /\\/\\*[\\w\\W]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-]+?.*?(;|(?=\\s*\\{))/i,\n        inside: { rule: /@[\\w-]+/ }\n      },\n      url: /url\\((?:([\"'])(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n      selector: /[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)/,\n      string: /(\"|')(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      property: /(\\b|\\B)[\\w-]+(?=\\s*:)/i,\n      important: /\\B!important\\b/i,\n      function: /[-a-z0-9]+(?=\\()/i,\n      punctuation: /[(){};:]/\n    };\n    Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css);\n    if (Prism.languages.markup) {\n      Prism.languages.insertBefore('markup', 'tag', {\n        style: {\n          pattern: /<style[\\w\\W]*?>[\\w\\W]*?<\\/style>/i,\n          inside: {\n            tag: {\n              pattern: /<style[\\w\\W]*?>|<\\/style>/i,\n              inside: Prism.languages.markup.tag.inside\n            },\n            rest: Prism.languages.css\n          },\n          alias: 'language-css'\n        }\n      });\n      Prism.languages.insertBefore('inside', 'attr-value', {\n        'style-attr': {\n          pattern: /\\s*style=(\"|').*?\\1/i,\n          inside: {\n            'attr-name': {\n              pattern: /^\\s*style/i,\n              inside: Prism.languages.markup.tag.inside\n            },\n            'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n            'attr-value': {\n              pattern: /.+/i,\n              inside: Prism.languages.css\n            }\n          },\n          alias: 'language-css'\n        }\n      }, Prism.languages.markup.tag);\n    }\n    Prism.languages.clike = {\n      'comment': [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true\n        }\n      ],\n      'string': /([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      'class-name': {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/i,\n        lookbehind: true,\n        inside: { punctuation: /(\\.|\\\\)/ }\n      },\n      'keyword': /\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n      'boolean': /\\b(true|false)\\b/,\n      'function': /[a-z0-9_]+(?=\\()/i,\n      'number': /\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,\n      'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n      'punctuation': /[{}[\\];(),.:]/\n    };\n    Prism.languages.javascript = Prism.languages.extend('clike', {\n      keyword: /\\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/,\n      number: /\\b-?(0x[\\dA-Fa-f]+|0b[01]+|0o[0-7]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|NaN|Infinity)\\b/,\n      function: /[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*(?=\\()/i\n    });\n    Prism.languages.insertBefore('javascript', 'keyword', {\n      regex: {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('javascript', 'class-name', {\n      'template-string': {\n        pattern: /`(?:\\\\`|\\\\?[^`])*`/,\n        inside: {\n          interpolation: {\n            pattern: /\\$\\{[^}]+\\}/,\n            inside: {\n              'interpolation-punctuation': {\n                pattern: /^\\$\\{|\\}$/,\n                alias: 'punctuation'\n              },\n              'rest': Prism.languages.javascript\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    });\n    if (Prism.languages.markup) {\n      Prism.languages.insertBefore('markup', 'tag', {\n        script: {\n          pattern: /<script[\\w\\W]*?>[\\w\\W]*?<\\/script>/i,\n          inside: {\n            tag: {\n              pattern: /<script[\\w\\W]*?>|<\\/script>/i,\n              inside: Prism.languages.markup.tag.inside\n            },\n            rest: Prism.languages.javascript\n          },\n          alias: 'language-javascript'\n        }\n      });\n    }\n    Prism.languages.js = Prism.languages.javascript;\n    Prism.languages.c = Prism.languages.extend('clike', {\n      keyword: /\\b(asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n      operator: /\\-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*\\/]/,\n      number: /\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)[ful]*\\b/i\n    });\n    Prism.languages.insertBefore('c', 'string', {\n      macro: {\n        pattern: /(^\\s*)#\\s*[a-z]+([^\\r\\n\\\\]|\\\\.|\\\\(?:\\r\\n?|\\n))*/im,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          string: {\n            pattern: /(#\\s*include\\s*)(<.+?>|(\"|')(\\\\?.)+?\\3)/,\n            lookbehind: true\n          }\n        }\n      }\n    });\n    delete Prism.languages.c['class-name'];\n    delete Prism.languages.c.boolean;\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      keyword: /\\b(abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|async|await|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\\b/,\n      string: [\n        /@(\"|')(\\1\\1|\\\\\\1|\\\\?(?!\\1)[\\s\\S])*\\1/,\n        /(\"|')(\\\\?.)*?\\1/\n      ],\n      number: /\\b-?(0x[\\da-f]+|\\d*\\.?\\d+)\\b/i\n    });\n    Prism.languages.insertBefore('csharp', 'keyword', {\n      preprocessor: {\n        pattern: /(^\\s*)#.*/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      keyword: /\\b(alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n      boolean: /\\b(true|false)\\b/,\n      operator: /[-+]{1,2}|!=?|<{1,2}=?|>{1,2}=?|\\->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|?\\||\\?|\\*|\\/|\\b(and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n    });\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'class-name': {\n        pattern: /(class\\s+)[a-z0-9_]+/i,\n        lookbehind: true\n      }\n    });\n    Prism.languages.java = Prism.languages.extend('clike', {\n      keyword: /\\b(abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\\b/,\n      number: /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp\\-]+\\b|\\b\\d*\\.?\\d+(?:e[+-]?\\d+)?[df]?\\b/i,\n      operator: {\n        pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n      constant: /\\b[A-Z0-9_]{2,}\\b/,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\w\\W]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'class-name', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    });\n    Prism.languages.insertBefore('php', 'keyword', {\n      delimiter: /\\?>|<\\?(?:php)?/i,\n      variable: /\\$\\w+\\b/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: { punctuation: /\\\\/ }\n      }\n    });\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    });\n    if (Prism.languages.markup) {\n      Prism.hooks.add('before-highlight', function (env) {\n        if (env.language !== 'php') {\n          return;\n        }\n        env.tokenStack = [];\n        env.backupCode = env.code;\n        env.code = env.code.replace(/(?:<\\?php|<\\?)[\\w\\W]*?(?:\\?>)/ig, function (match) {\n          env.tokenStack.push(match);\n          return '{{{PHP' + env.tokenStack.length + '}}}';\n        });\n      });\n      Prism.hooks.add('before-insert', function (env) {\n        if (env.language === 'php') {\n          env.code = env.backupCode;\n          delete env.backupCode;\n        }\n      });\n      Prism.hooks.add('after-highlight', function (env) {\n        if (env.language !== 'php') {\n          return;\n        }\n        for (var i = 0, t = void 0; t = env.tokenStack[i]; i++) {\n          env.highlightedCode = env.highlightedCode.replace('{{{PHP' + (i + 1) + '}}}', Prism.highlight(t, env.grammar, 'php').replace(/\\$/g, '$$$$'));\n        }\n        env.element.innerHTML = env.highlightedCode;\n      });\n      Prism.hooks.add('wrap', function (env) {\n        if (env.language === 'php' && env.type === 'markup') {\n          env.content = env.content.replace(/(\\{\\{\\{PHP[0-9]+\\}\\}\\})/g, '<span class=\"token php\">$1</span>');\n        }\n      });\n      Prism.languages.insertBefore('php', 'comment', {\n        markup: {\n          pattern: /<[^?]\\/?(.*?)>/,\n          inside: Prism.languages.markup\n        },\n        php: /\\{\\{\\{PHP[0-9]+\\}\\}\\}/\n      });\n    }\n    Prism.languages.python = {\n      'comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true\n      },\n      'string': /\"\"\"[\\s\\S]+?\"\"\"|'''[\\s\\S]+?'''|(\"|')(?:\\\\?.)*?\\1/,\n      'function': {\n        pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_][a-zA-Z0-9_]*(?=\\()/g,\n        lookbehind: true\n      },\n      'class-name': {\n        pattern: /(\\bclass\\s+)[a-z0-9_]+/i,\n        lookbehind: true\n      },\n      'keyword': /\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|with|yield)\\b/,\n      'boolean': /\\b(?:True|False)\\b/,\n      'number': /\\b-?(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n      'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,\n      'punctuation': /[{}[\\];(),.:]/\n    };\n    (function (Prism) {\n      Prism.languages.ruby = Prism.languages.extend('clike', {\n        comment: /#(?!\\{[^\\r\\n]*?\\}).*/,\n        keyword: /\\b(alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n      });\n      var interpolation = {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'tag'\n          },\n          rest: Prism.util.clone(Prism.languages.ruby)\n        }\n      };\n      Prism.languages.insertBefore('ruby', 'keyword', {\n        regex: [\n          {\n            pattern: /%r([^a-zA-Z0-9\\s\\{\\(\\[<])(?:[^\\\\]|\\\\[\\s\\S])*?\\1[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n            inside: { interpolation: interpolation }\n          },\n          {\n            pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n            lookbehind: true\n          }\n        ],\n        variable: /[@$]+[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\\b)/,\n        symbol: /:[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\\b)/\n      });\n      Prism.languages.insertBefore('ruby', 'number', {\n        builtin: /\\b(Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|File|Fixnum|Fload|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n        constant: /\\b[A-Z][a-zA-Z_0-9]*(?:[?!]|\\b)/\n      });\n      Prism.languages.ruby.string = [\n        {\n          pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s\\{\\(\\[<])(?:[^\\\\]|\\\\[\\s\\S])*?\\1/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n          inside: { interpolation: interpolation }\n        },\n        {\n          pattern: /(\"|')(#\\{[^}]+\\}|\\\\(?:\\r?\\n|\\r)|\\\\?.)*?\\1/,\n          inside: { interpolation: interpolation }\n        }\n      ];\n    }(Prism));\n\n    function isCodeSample(elm) {\n      return elm && elm.nodeName === 'PRE' && elm.className.indexOf('language-') !== -1;\n    }\n    function trimArg(predicateFn) {\n      return function (arg1, arg2) {\n        return predicateFn(arg2);\n      };\n    }\n    var Utils = {\n      isCodeSample: isCodeSample,\n      trimArg: trimArg\n    };\n\n    var getSelectedCodeSample = function (editor) {\n      var node = editor.selection.getNode();\n      if (Utils.isCodeSample(node)) {\n        return node;\n      }\n      return null;\n    };\n    var insertCodeSample = function (editor, language, code) {\n      editor.undoManager.transact(function () {\n        var node = getSelectedCodeSample(editor);\n        code = global$1.DOM.encode(code);\n        if (node) {\n          editor.dom.setAttrib(node, 'class', 'language-' + language);\n          node.innerHTML = code;\n          Prism.highlightElement(node);\n          editor.selection.select(node);\n        } else {\n          editor.insertContent('<pre id=\"__new\" class=\"language-' + language + '\">' + code + '</pre>');\n          editor.selection.select(editor.$('#__new').removeAttr('id')[0]);\n        }\n      });\n    };\n    var getCurrentCode = function (editor) {\n      var node = getSelectedCodeSample(editor);\n      if (node) {\n        return node.textContent;\n      }\n      return '';\n    };\n    var CodeSample = {\n      getSelectedCodeSample: getSelectedCodeSample,\n      insertCodeSample: insertCodeSample,\n      getCurrentCode: getCurrentCode\n    };\n\n    var getLanguages$1 = function (editor) {\n      var defaultLanguages = [\n        {\n          text: 'HTML/XML',\n          value: 'markup'\n        },\n        {\n          text: 'JavaScript',\n          value: 'javascript'\n        },\n        {\n          text: 'CSS',\n          value: 'css'\n        },\n        {\n          text: 'PHP',\n          value: 'php'\n        },\n        {\n          text: 'Ruby',\n          value: 'ruby'\n        },\n        {\n          text: 'Python',\n          value: 'python'\n        },\n        {\n          text: 'Java',\n          value: 'java'\n        },\n        {\n          text: 'C',\n          value: 'c'\n        },\n        {\n          text: 'C#',\n          value: 'csharp'\n        },\n        {\n          text: 'C++',\n          value: 'cpp'\n        }\n      ];\n      var customLanguages = Settings.getLanguages(editor);\n      return customLanguages ? customLanguages : defaultLanguages;\n    };\n    var getCurrentLanguage = function (editor) {\n      var matches;\n      var node = CodeSample.getSelectedCodeSample(editor);\n      if (node) {\n        matches = node.className.match(/language-(\\w+)/);\n        return matches ? matches[1] : '';\n      }\n      return '';\n    };\n    var Languages = {\n      getLanguages: getLanguages$1,\n      getCurrentLanguage: getCurrentLanguage\n    };\n\n    var Dialog = {\n      open: function (editor) {\n        var minWidth = Settings.getDialogMinWidth(editor);\n        var minHeight = Settings.getDialogMinHeight(editor);\n        var currentLanguage = Languages.getCurrentLanguage(editor);\n        var currentLanguages = Languages.getLanguages(editor);\n        var currentCode = CodeSample.getCurrentCode(editor);\n        editor.windowManager.open({\n          title: 'Insert/Edit code sample',\n          minWidth: minWidth,\n          minHeight: minHeight,\n          layout: 'flex',\n          direction: 'column',\n          align: 'stretch',\n          body: [\n            {\n              type: 'listbox',\n              name: 'language',\n              label: 'Language',\n              maxWidth: 200,\n              value: currentLanguage,\n              values: currentLanguages\n            },\n            {\n              type: 'textbox',\n              name: 'code',\n              multiline: true,\n              spellcheck: false,\n              ariaLabel: 'Code view',\n              flex: 1,\n              style: 'direction: ltr; text-align: left',\n              classes: 'monospace',\n              value: currentCode,\n              autofocus: true\n            }\n          ],\n          onSubmit: function (e) {\n            CodeSample.insertCodeSample(editor, e.data.language, e.data.code);\n          }\n        });\n      }\n    };\n\n    var register = function (editor) {\n      editor.addCommand('codesample', function () {\n        var node = editor.selection.getNode();\n        if (editor.selection.isCollapsed() || Utils.isCodeSample(node)) {\n          Dialog.open(editor);\n        } else {\n          editor.formatter.toggle('code');\n        }\n      });\n    };\n    var Commands = { register: register };\n\n    var setup = function (editor) {\n      var $ = editor.$;\n      editor.on('PreProcess', function (e) {\n        $('pre[contenteditable=false]', e.node).filter(Utils.trimArg(Utils.isCodeSample)).each(function (idx, elm) {\n          var $elm = $(elm), code = elm.textContent;\n          $elm.attr('class', $.trim($elm.attr('class')));\n          $elm.removeAttr('contentEditable');\n          $elm.empty().append($('<code></code>').each(function () {\n            this.textContent = code;\n          }));\n        });\n      });\n      editor.on('SetContent', function () {\n        var unprocessedCodeSamples = $('pre').filter(Utils.trimArg(Utils.isCodeSample)).filter(function (idx, elm) {\n          return elm.contentEditable !== 'false';\n        });\n        if (unprocessedCodeSamples.length) {\n          editor.undoManager.transact(function () {\n            unprocessedCodeSamples.each(function (idx, elm) {\n              $(elm).find('br').each(function (idx, elm) {\n                elm.parentNode.replaceChild(editor.getDoc().createTextNode('\\n'), elm);\n              });\n              elm.contentEditable = false;\n              elm.innerHTML = editor.dom.encode(elm.textContent);\n              Prism.highlightElement(elm);\n              elm.className = $.trim(elm.className);\n            });\n          });\n        }\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    var loadCss = function (editor, pluginUrl, addedInlineCss, addedCss) {\n      var linkElm;\n      var contentCss = Settings.getContentCss(editor);\n      if (editor.inline && addedInlineCss.get()) {\n        return;\n      }\n      if (!editor.inline && addedCss.get()) {\n        return;\n      }\n      if (editor.inline) {\n        addedInlineCss.set(true);\n      } else {\n        addedCss.set(true);\n      }\n      if (contentCss !== false) {\n        linkElm = editor.dom.create('link', {\n          rel: 'stylesheet',\n          href: contentCss ? contentCss : pluginUrl + '/css/prism.css'\n        });\n        editor.getDoc().getElementsByTagName('head')[0].appendChild(linkElm);\n      }\n    };\n    var LoadCss = { loadCss: loadCss };\n\n    var register$1 = function (editor) {\n      editor.addButton('codesample', {\n        cmd: 'codesample',\n        title: 'Insert/Edit code sample'\n      });\n      editor.addMenuItem('codesample', {\n        cmd: 'codesample',\n        text: 'Code sample',\n        icon: 'codesample'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    var addedInlineCss = Cell(false);\n    global.add('codesample', function (editor, pluginUrl) {\n      var addedCss = Cell(false);\n      FilterContent.setup(editor);\n      Buttons.register(editor);\n      Commands.register(editor);\n      editor.on('init', function () {\n        LoadCss.loadCss(editor, pluginUrl, addedInlineCss, addedCss);\n      });\n      editor.on('dblclick', function (ev) {\n        if (Utils.isCodeSample(ev.target)) {\n          Dialog.open(editor);\n        }\n      });\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/codesample/plugin.js\n// module id = o0RZ\n// module chunks = 35"],"sourceRoot":""}