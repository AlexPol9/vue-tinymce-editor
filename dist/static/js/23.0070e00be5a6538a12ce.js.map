{"version":3,"sources":["webpack:///static/js/23.0070e00be5a6538a12ce.js","webpack:///./~/tinymce/plugins/insertdatetime/plugin.js","webpack:///./~/tinymce/plugins/insertdatetime/index.js"],"names":["webpackJsonp","1Jrq","module","exports","Plugin","Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","getDateFormat","editor","getParam","translate","getTimeFormat","getFormats","getDefaultDateTime","formats","length","shouldInsertTimeElement","Settings","daysShort","split","daysLong","monthsShort","monthsLong","addZeros","len","i","getDateTime","fmt","date","Date","replace","getFullYear","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","getDay","updateElement","timeElm","computerTime","userTime","newTimeElm","dom","create","datetime","parentNode","insertBefore","remove","selection","select","collapse","insertDateTime","format","test","getParent","getStart","insertContent","Actions","register","addCommand","Commands","global$1","createMenuItems","lastFormatState","map","text","onclick","register$1","menuItems","addButton","type","title","menu","lastFormat","addMenuItem","icon","context","Buttons","add","bfCA","__webpack_require__"],"mappings":"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","file":"static/js/23.0070e00be5a6538a12ce.js","sourcesContent":["webpackJsonp([23],{\n\n/***/ \"1Jrq\":\n/***/ (function(module, exports) {\n\n(function () {\nvar insertdatetime = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var getDateFormat = function (editor) {\n      return editor.getParam('insertdatetime_dateformat', editor.translate('%Y-%m-%d'));\n    };\n    var getTimeFormat = function (editor) {\n      return editor.getParam('insertdatetime_timeformat', editor.translate('%H:%M:%S'));\n    };\n    var getFormats = function (editor) {\n      return editor.getParam('insertdatetime_formats', [\n        '%H:%M:%S',\n        '%Y-%m-%d',\n        '%I:%M:%S %p',\n        '%D'\n      ]);\n    };\n    var getDefaultDateTime = function (editor) {\n      var formats = getFormats(editor);\n      return formats.length > 0 ? formats[0] : getTimeFormat(editor);\n    };\n    var shouldInsertTimeElement = function (editor) {\n      return editor.getParam('insertdatetime_element', false);\n    };\n    var Settings = {\n      getDateFormat: getDateFormat,\n      getTimeFormat: getTimeFormat,\n      getFormats: getFormats,\n      getDefaultDateTime: getDefaultDateTime,\n      shouldInsertTimeElement: shouldInsertTimeElement\n    };\n\n    var daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n    var daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n    var monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n    var monthsLong = 'January February March April May June July August September October November December'.split(' ');\n    var addZeros = function (value, len) {\n      value = '' + value;\n      if (value.length < len) {\n        for (var i = 0; i < len - value.length; i++) {\n          value = '0' + value;\n        }\n      }\n      return value;\n    };\n    var getDateTime = function (editor, fmt, date) {\n      date = date || new Date();\n      fmt = fmt.replace('%D', '%m/%d/%Y');\n      fmt = fmt.replace('%r', '%I:%M:%S %p');\n      fmt = fmt.replace('%Y', '' + date.getFullYear());\n      fmt = fmt.replace('%y', '' + date.getYear());\n      fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n      fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n      fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n      fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n      fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n      fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n      fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n      fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n      fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n      fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n      fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n      fmt = fmt.replace('%%', '%');\n      return fmt;\n    };\n    var updateElement = function (editor, timeElm, computerTime, userTime) {\n      var newTimeElm = editor.dom.create('time', { datetime: computerTime }, userTime);\n      timeElm.parentNode.insertBefore(newTimeElm, timeElm);\n      editor.dom.remove(timeElm);\n      editor.selection.select(newTimeElm, true);\n      editor.selection.collapse(false);\n    };\n    var insertDateTime = function (editor, format) {\n      if (Settings.shouldInsertTimeElement(editor)) {\n        var userTime = getDateTime(editor, format);\n        var computerTime = void 0;\n        if (/%[HMSIp]/.test(format)) {\n          computerTime = getDateTime(editor, '%Y-%m-%dT%H:%M');\n        } else {\n          computerTime = getDateTime(editor, '%Y-%m-%d');\n        }\n        var timeElm = editor.dom.getParent(editor.selection.getStart(), 'time');\n        if (timeElm) {\n          updateElement(editor, timeElm, computerTime, userTime);\n        } else {\n          editor.insertContent('<time datetime=\"' + computerTime + '\">' + userTime + '</time>');\n        }\n      } else {\n        editor.insertContent(getDateTime(editor, format));\n      }\n    };\n    var Actions = {\n      insertDateTime: insertDateTime,\n      getDateTime: getDateTime\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceInsertDate', function () {\n        Actions.insertDateTime(editor, Settings.getDateFormat(editor));\n      });\n      editor.addCommand('mceInsertTime', function () {\n        Actions.insertDateTime(editor, Settings.getTimeFormat(editor));\n      });\n    };\n    var Commands = { register: register };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var createMenuItems = function (editor, lastFormatState) {\n      var formats = Settings.getFormats(editor);\n      return global$1.map(formats, function (fmt) {\n        return {\n          text: Actions.getDateTime(editor, fmt),\n          onclick: function () {\n            lastFormatState.set(fmt);\n            Actions.insertDateTime(editor, fmt);\n          }\n        };\n      });\n    };\n    var register$1 = function (editor, lastFormatState) {\n      var menuItems = createMenuItems(editor, lastFormatState);\n      editor.addButton('insertdatetime', {\n        type: 'splitbutton',\n        title: 'Insert date/time',\n        menu: menuItems,\n        onclick: function () {\n          var lastFormat = lastFormatState.get();\n          Actions.insertDateTime(editor, lastFormat ? lastFormat : Settings.getDefaultDateTime(editor));\n        }\n      });\n      editor.addMenuItem('insertdatetime', {\n        icon: 'date',\n        text: 'Date/time',\n        menu: menuItems,\n        context: 'insert'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('insertdatetime', function (editor) {\n      var lastFormatState = Cell(null);\n      Commands.register(editor);\n      Buttons.register(editor, lastFormatState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ }),\n\n/***/ \"bfCA\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"insertdatetime\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/insertdatetime')\n//   ES2015:\n//     import 'tinymce/plugins/insertdatetime'\n__webpack_require__(\"1Jrq\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/23.0070e00be5a6538a12ce.js","(function () {\nvar insertdatetime = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var getDateFormat = function (editor) {\n      return editor.getParam('insertdatetime_dateformat', editor.translate('%Y-%m-%d'));\n    };\n    var getTimeFormat = function (editor) {\n      return editor.getParam('insertdatetime_timeformat', editor.translate('%H:%M:%S'));\n    };\n    var getFormats = function (editor) {\n      return editor.getParam('insertdatetime_formats', [\n        '%H:%M:%S',\n        '%Y-%m-%d',\n        '%I:%M:%S %p',\n        '%D'\n      ]);\n    };\n    var getDefaultDateTime = function (editor) {\n      var formats = getFormats(editor);\n      return formats.length > 0 ? formats[0] : getTimeFormat(editor);\n    };\n    var shouldInsertTimeElement = function (editor) {\n      return editor.getParam('insertdatetime_element', false);\n    };\n    var Settings = {\n      getDateFormat: getDateFormat,\n      getTimeFormat: getTimeFormat,\n      getFormats: getFormats,\n      getDefaultDateTime: getDefaultDateTime,\n      shouldInsertTimeElement: shouldInsertTimeElement\n    };\n\n    var daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n    var daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n    var monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n    var monthsLong = 'January February March April May June July August September October November December'.split(' ');\n    var addZeros = function (value, len) {\n      value = '' + value;\n      if (value.length < len) {\n        for (var i = 0; i < len - value.length; i++) {\n          value = '0' + value;\n        }\n      }\n      return value;\n    };\n    var getDateTime = function (editor, fmt, date) {\n      date = date || new Date();\n      fmt = fmt.replace('%D', '%m/%d/%Y');\n      fmt = fmt.replace('%r', '%I:%M:%S %p');\n      fmt = fmt.replace('%Y', '' + date.getFullYear());\n      fmt = fmt.replace('%y', '' + date.getYear());\n      fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n      fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n      fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n      fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n      fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n      fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n      fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n      fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n      fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n      fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n      fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n      fmt = fmt.replace('%%', '%');\n      return fmt;\n    };\n    var updateElement = function (editor, timeElm, computerTime, userTime) {\n      var newTimeElm = editor.dom.create('time', { datetime: computerTime }, userTime);\n      timeElm.parentNode.insertBefore(newTimeElm, timeElm);\n      editor.dom.remove(timeElm);\n      editor.selection.select(newTimeElm, true);\n      editor.selection.collapse(false);\n    };\n    var insertDateTime = function (editor, format) {\n      if (Settings.shouldInsertTimeElement(editor)) {\n        var userTime = getDateTime(editor, format);\n        var computerTime = void 0;\n        if (/%[HMSIp]/.test(format)) {\n          computerTime = getDateTime(editor, '%Y-%m-%dT%H:%M');\n        } else {\n          computerTime = getDateTime(editor, '%Y-%m-%d');\n        }\n        var timeElm = editor.dom.getParent(editor.selection.getStart(), 'time');\n        if (timeElm) {\n          updateElement(editor, timeElm, computerTime, userTime);\n        } else {\n          editor.insertContent('<time datetime=\"' + computerTime + '\">' + userTime + '</time>');\n        }\n      } else {\n        editor.insertContent(getDateTime(editor, format));\n      }\n    };\n    var Actions = {\n      insertDateTime: insertDateTime,\n      getDateTime: getDateTime\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceInsertDate', function () {\n        Actions.insertDateTime(editor, Settings.getDateFormat(editor));\n      });\n      editor.addCommand('mceInsertTime', function () {\n        Actions.insertDateTime(editor, Settings.getTimeFormat(editor));\n      });\n    };\n    var Commands = { register: register };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var createMenuItems = function (editor, lastFormatState) {\n      var formats = Settings.getFormats(editor);\n      return global$1.map(formats, function (fmt) {\n        return {\n          text: Actions.getDateTime(editor, fmt),\n          onclick: function () {\n            lastFormatState.set(fmt);\n            Actions.insertDateTime(editor, fmt);\n          }\n        };\n      });\n    };\n    var register$1 = function (editor, lastFormatState) {\n      var menuItems = createMenuItems(editor, lastFormatState);\n      editor.addButton('insertdatetime', {\n        type: 'splitbutton',\n        title: 'Insert date/time',\n        menu: menuItems,\n        onclick: function () {\n          var lastFormat = lastFormatState.get();\n          Actions.insertDateTime(editor, lastFormat ? lastFormat : Settings.getDefaultDateTime(editor));\n        }\n      });\n      editor.addMenuItem('insertdatetime', {\n        icon: 'date',\n        text: 'Date/time',\n        menu: menuItems,\n        context: 'insert'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('insertdatetime', function (editor) {\n      var lastFormatState = Cell(null);\n      Commands.register(editor);\n      Buttons.register(editor, lastFormatState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/insertdatetime/plugin.js\n// module id = 1Jrq\n// module chunks = 23","// Exports the \"insertdatetime\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/insertdatetime')\n//   ES2015:\n//     import 'tinymce/plugins/insertdatetime'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/insertdatetime/index.js\n// module id = bfCA\n// module chunks = 23"],"sourceRoot":""}