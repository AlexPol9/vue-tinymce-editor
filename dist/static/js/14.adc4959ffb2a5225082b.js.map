{"version":3,"sources":["webpack:///static/js/14.adc4959ffb2a5225082b.js","webpack:///./~/tinymce/plugins/preview/plugin.js","webpack:///./~/tinymce/plugins/preview/index.js"],"names":["webpackJsonp","ONrm","module","exports","Plugin","global","tinymce","util","Tools","resolve","global$1","getPreviewDialogWidth","editor","parseInt","getParam","getPreviewDialogHeight","getContentStyle","Settings","global$2","getPreviewHtml","headHtml","encode","dom","contentStyle","documentBaseURI","getURI","each","contentCSS","url","toAbsolute","bodyId","settings","body_id","indexOf","id","bodyClass","body_class","dirAttr","directionality","getContent","injectIframeContent","iframe","sandbox","previewHtml","src","encodeURIComponent","doc","contentWindow","document","open","write","close","IframeContent","ie","dialogHtml","dialogWidth","dialogHeight","windowManager","title","width","height","html","buttons","text","onclick","e","control","parent","onPostRender","iframeElm","getEl","firstChild","Dialog","register","addCommand","Commands","register$1","addButton","cmd","addMenuItem","context","Buttons","add","S0tB","__webpack_require__"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,ICHxB,YACe,WACX,YAkHA,SAASC,MAhHT,GAAIC,GAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,eAEtCE,EAAwB,SAAUC,GACpC,MAAOC,UAASD,EAAOE,SAAS,uBAAwB,OAAQ,KAE9DC,EAAyB,SAAUH,GACrC,MAAOC,UAASD,EAAOE,SAAS,wBAAyB,OAAQ,KAE/DE,EAAkB,SAAUJ,GAC9B,MAAOA,GAAOE,SAAS,gBAAiB,KAEtCG,GACFN,sBAAuBA,EACvBI,uBAAwBA,EACxBC,gBAAiBA,GAGfE,EAAWZ,QAAQC,KAAKC,MAAMC,QAAQ,sBAEtCU,EAAiB,SAAUP,GAC7B,GACIQ,GAAW,GACXC,EAAST,EAAOU,IAAID,OACpBE,EAAeN,EAASD,gBAAgBJ,EAC5CQ,IAAY,eAAiBC,EAAOT,EAAOY,gBAAgBC,UAAY,KACnEF,IACFH,GAAY,0BAA4BG,EAAe,YAEzDL,EAASQ,KAAKd,EAAOe,WAAY,SAAUC,GACzCR,GAAY,gDAAkDC,EAAOT,EAAOY,gBAAgBK,WAAWD,IAAQ,MAEjH,IAAIE,GAASlB,EAAOmB,SAASC,SAAW,WACX,IAAzBF,EAAOG,QAAQ,OACjBH,EAASlB,EAAOE,SAAS,UAAW,GAAI,QACxCgB,EAASA,EAAOlB,EAAOsB,KAAOJ,EAEhC,IAAIK,GAAYvB,EAAOmB,SAASK,YAAc,IACd,IAA5BD,EAAUF,QAAQ,OACpBE,EAAYvB,EAAOE,SAAS,aAAc,GAAI,QAC9CqB,EAAYA,EAAUvB,EAAOsB,KAAO,GAEtC,IACIG,GAAUzB,EAAOmB,SAASO,eAAiB,SAAW1B,EAAOmB,SAASO,eAAiB,IAAM,EAEjG,OADc,8BAA0ClB,EAAW,oBAA2BC,EAAOS,GAAU,6BAA+BT,EAAOc,GAAa,IAAMd,EAAOgB,GAAW,IAAMzB,EAAO2B,aAFtK,iOAK/BC,EAAsB,SAAU5B,EAAQ6B,EAAQC,GAClD,GAAIC,GAAcxB,EAAeP,EACjC,IAAK8B,EAMHD,EAAOG,IAAM,gCAAkCC,mBAAmBF,OANtD,CACZ,GAAIG,GAAML,EAAOM,cAAcC,QAC/BF,GAAIG,OACJH,EAAII,MAAMP,GACVG,EAAIK,UAKJC,GACFjC,eAAgBA,EAChBqB,oBAAqBA,GAGnBS,EAAO,SAAUrC,GACnB,GAAI8B,IAAWhC,EAAS2C,GACpBC,EAAa,kCAAoCZ,EAAU,2BAA6B,IAAM,aAC9Fa,EAActC,EAASN,sBAAsBC,GAC7C4C,EAAevC,EAASF,uBAAuBH,EACnDA,GAAO6C,cAAcR,MACnBS,MAAO,UACPC,MAAOJ,EACPK,OAAQJ,EACRK,KAAMP,EACNQ,SACEC,KAAM,QACNC,QAAS,SAAUC,GACjBA,EAAEC,QAAQC,SAASA,SAAShB,UAGhCiB,aAAc,SAAUH,GACtB,GAAII,GAAYJ,EAAEC,QAAQI,MAAM,QAAQC,UACxCnB,GAAcZ,oBAAoB5B,EAAQyD,EAAW3B,OAIvD8B,GAAWvB,KAAMA,GAEjBwB,EAAW,SAAU7D,GACvBA,EAAO8D,WAAW,aAAc,WAC9BF,EAAOvB,KAAKrC,MAGZ+D,GAAaF,SAAUA,GAEvBG,EAAa,SAAUhE,GACzBA,EAAOiE,UAAU,WACfnB,MAAO,UACPoB,IAAK,eAEPlE,EAAOmE,YAAY,WACjBhB,KAAM,UACNe,IAAK,aACLE,QAAS,UAGTC,GAAYR,SAAUG,EAE1BvE,GAAO6E,IAAI,UAAW,SAAUtE,GAC9B+D,EAASF,SAAS7D,GAClBqE,EAAQR,SAAS7D,YDkBjBuE,KACA,SAAUjF,EAAQC,EAASiF,GE/HjC,EAAQ","file":"static/js/14.adc4959ffb2a5225082b.js","sourcesContent":["webpackJsonp([14],{\n\n/***/ \"ONrm\":\n/***/ (function(module, exports) {\n\n(function () {\nvar preview = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var getPreviewDialogWidth = function (editor) {\n      return parseInt(editor.getParam('plugin_preview_width', '650'), 10);\n    };\n    var getPreviewDialogHeight = function (editor) {\n      return parseInt(editor.getParam('plugin_preview_height', '500'), 10);\n    };\n    var getContentStyle = function (editor) {\n      return editor.getParam('content_style', '');\n    };\n    var Settings = {\n      getPreviewDialogWidth: getPreviewDialogWidth,\n      getPreviewDialogHeight: getPreviewDialogHeight,\n      getContentStyle: getContentStyle\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getPreviewHtml = function (editor) {\n      var previewHtml;\n      var headHtml = '';\n      var encode = editor.dom.encode;\n      var contentStyle = Settings.getContentStyle(editor);\n      headHtml += '<base href=\"' + encode(editor.documentBaseURI.getURI()) + '\">';\n      if (contentStyle) {\n        headHtml += '<style type=\"text/css\">' + contentStyle + '</style>';\n      }\n      global$2.each(editor.contentCSS, function (url) {\n        headHtml += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + encode(editor.documentBaseURI.toAbsolute(url)) + '\">';\n      });\n      var bodyId = editor.settings.body_id || 'tinymce';\n      if (bodyId.indexOf('=') !== -1) {\n        bodyId = editor.getParam('body_id', '', 'hash');\n        bodyId = bodyId[editor.id] || bodyId;\n      }\n      var bodyClass = editor.settings.body_class || '';\n      if (bodyClass.indexOf('=') !== -1) {\n        bodyClass = editor.getParam('body_class', '', 'hash');\n        bodyClass = bodyClass[editor.id] || '';\n      }\n      var preventClicksOnLinksScript = '<script>' + 'document.addEventListener && document.addEventListener(\"click\", function(e) {' + 'for (var elm = e.target; elm; elm = elm.parentNode) {' + 'if (elm.nodeName === \"A\") {' + 'e.preventDefault();' + '}' + '}' + '}, false);' + '</script> ';\n      var dirAttr = editor.settings.directionality ? ' dir=\"' + editor.settings.directionality + '\"' : '';\n      previewHtml = '<!DOCTYPE html>' + '<html>' + '<head>' + headHtml + '</head>' + '<body id=\"' + encode(bodyId) + '\" class=\"mce-content-body ' + encode(bodyClass) + '\"' + encode(dirAttr) + '>' + editor.getContent() + preventClicksOnLinksScript + '</body>' + '</html>';\n      return previewHtml;\n    };\n    var injectIframeContent = function (editor, iframe, sandbox) {\n      var previewHtml = getPreviewHtml(editor);\n      if (!sandbox) {\n        var doc = iframe.contentWindow.document;\n        doc.open();\n        doc.write(previewHtml);\n        doc.close();\n      } else {\n        iframe.src = 'data:text/html;charset=utf-8,' + encodeURIComponent(previewHtml);\n      }\n    };\n    var IframeContent = {\n      getPreviewHtml: getPreviewHtml,\n      injectIframeContent: injectIframeContent\n    };\n\n    var open = function (editor) {\n      var sandbox = !global$1.ie;\n      var dialogHtml = '<iframe src=\"\" frameborder=\"0\"' + (sandbox ? ' sandbox=\"allow-scripts\"' : '') + '></iframe>';\n      var dialogWidth = Settings.getPreviewDialogWidth(editor);\n      var dialogHeight = Settings.getPreviewDialogHeight(editor);\n      editor.windowManager.open({\n        title: 'Preview',\n        width: dialogWidth,\n        height: dialogHeight,\n        html: dialogHtml,\n        buttons: {\n          text: 'Close',\n          onclick: function (e) {\n            e.control.parent().parent().close();\n          }\n        },\n        onPostRender: function (e) {\n          var iframeElm = e.control.getEl('body').firstChild;\n          IframeContent.injectIframeContent(editor, iframeElm, sandbox);\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor) {\n      editor.addCommand('mcePreview', function () {\n        Dialog.open(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var register$1 = function (editor) {\n      editor.addButton('preview', {\n        title: 'Preview',\n        cmd: 'mcePreview'\n      });\n      editor.addMenuItem('preview', {\n        text: 'Preview',\n        cmd: 'mcePreview',\n        context: 'view'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('preview', function (editor) {\n      Commands.register(editor);\n      Buttons.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ }),\n\n/***/ \"S0tB\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"preview\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/preview')\n//   ES2015:\n//     import 'tinymce/plugins/preview'\n__webpack_require__(\"ONrm\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/14.adc4959ffb2a5225082b.js","(function () {\nvar preview = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var getPreviewDialogWidth = function (editor) {\n      return parseInt(editor.getParam('plugin_preview_width', '650'), 10);\n    };\n    var getPreviewDialogHeight = function (editor) {\n      return parseInt(editor.getParam('plugin_preview_height', '500'), 10);\n    };\n    var getContentStyle = function (editor) {\n      return editor.getParam('content_style', '');\n    };\n    var Settings = {\n      getPreviewDialogWidth: getPreviewDialogWidth,\n      getPreviewDialogHeight: getPreviewDialogHeight,\n      getContentStyle: getContentStyle\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getPreviewHtml = function (editor) {\n      var previewHtml;\n      var headHtml = '';\n      var encode = editor.dom.encode;\n      var contentStyle = Settings.getContentStyle(editor);\n      headHtml += '<base href=\"' + encode(editor.documentBaseURI.getURI()) + '\">';\n      if (contentStyle) {\n        headHtml += '<style type=\"text/css\">' + contentStyle + '</style>';\n      }\n      global$2.each(editor.contentCSS, function (url) {\n        headHtml += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + encode(editor.documentBaseURI.toAbsolute(url)) + '\">';\n      });\n      var bodyId = editor.settings.body_id || 'tinymce';\n      if (bodyId.indexOf('=') !== -1) {\n        bodyId = editor.getParam('body_id', '', 'hash');\n        bodyId = bodyId[editor.id] || bodyId;\n      }\n      var bodyClass = editor.settings.body_class || '';\n      if (bodyClass.indexOf('=') !== -1) {\n        bodyClass = editor.getParam('body_class', '', 'hash');\n        bodyClass = bodyClass[editor.id] || '';\n      }\n      var preventClicksOnLinksScript = '<script>' + 'document.addEventListener && document.addEventListener(\"click\", function(e) {' + 'for (var elm = e.target; elm; elm = elm.parentNode) {' + 'if (elm.nodeName === \"A\") {' + 'e.preventDefault();' + '}' + '}' + '}, false);' + '</script> ';\n      var dirAttr = editor.settings.directionality ? ' dir=\"' + editor.settings.directionality + '\"' : '';\n      previewHtml = '<!DOCTYPE html>' + '<html>' + '<head>' + headHtml + '</head>' + '<body id=\"' + encode(bodyId) + '\" class=\"mce-content-body ' + encode(bodyClass) + '\"' + encode(dirAttr) + '>' + editor.getContent() + preventClicksOnLinksScript + '</body>' + '</html>';\n      return previewHtml;\n    };\n    var injectIframeContent = function (editor, iframe, sandbox) {\n      var previewHtml = getPreviewHtml(editor);\n      if (!sandbox) {\n        var doc = iframe.contentWindow.document;\n        doc.open();\n        doc.write(previewHtml);\n        doc.close();\n      } else {\n        iframe.src = 'data:text/html;charset=utf-8,' + encodeURIComponent(previewHtml);\n      }\n    };\n    var IframeContent = {\n      getPreviewHtml: getPreviewHtml,\n      injectIframeContent: injectIframeContent\n    };\n\n    var open = function (editor) {\n      var sandbox = !global$1.ie;\n      var dialogHtml = '<iframe src=\"\" frameborder=\"0\"' + (sandbox ? ' sandbox=\"allow-scripts\"' : '') + '></iframe>';\n      var dialogWidth = Settings.getPreviewDialogWidth(editor);\n      var dialogHeight = Settings.getPreviewDialogHeight(editor);\n      editor.windowManager.open({\n        title: 'Preview',\n        width: dialogWidth,\n        height: dialogHeight,\n        html: dialogHtml,\n        buttons: {\n          text: 'Close',\n          onclick: function (e) {\n            e.control.parent().parent().close();\n          }\n        },\n        onPostRender: function (e) {\n          var iframeElm = e.control.getEl('body').firstChild;\n          IframeContent.injectIframeContent(editor, iframeElm, sandbox);\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor) {\n      editor.addCommand('mcePreview', function () {\n        Dialog.open(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var register$1 = function (editor) {\n      editor.addButton('preview', {\n        title: 'Preview',\n        cmd: 'mcePreview'\n      });\n      editor.addMenuItem('preview', {\n        text: 'Preview',\n        cmd: 'mcePreview',\n        context: 'view'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('preview', function (editor) {\n      Commands.register(editor);\n      Buttons.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/preview/plugin.js\n// module id = ONrm\n// module chunks = 14","// Exports the \"preview\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/preview')\n//   ES2015:\n//     import 'tinymce/plugins/preview'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/preview/index.js\n// module id = S0tB\n// module chunks = 14"],"sourceRoot":""}