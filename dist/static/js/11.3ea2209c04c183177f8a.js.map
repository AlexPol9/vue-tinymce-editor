{"version":3,"sources":["webpack:///static/js/11.3ea2209c04c183177f8a.js","webpack:///./~/tinymce/plugins/searchreplace/plugin.js","webpack:///./~/tinymce/plugins/searchreplace/index.js"],"names":["webpackJsonp","Chqn","module","exports","isContentEditableFalse","node","nodeType","contentEditable","findAndReplaceDOMText","regex","replacementNode","captureGroup","schema","getMatchIndexes","m","Error","index","cg","indexOf","length","getText","txt","data","hiddenTextElementsMap","nodeName","blockElementsMap","shortEndedElementsMap","firstChild","nextSibling","text","doc","matches","count","ownerDocument","getBlockElements","getWhiteSpaceElements","getShortEndedElements","global","exec","push","match","replaceFn","startNode","endNode","startNodeIndex","endNodeIndex","innerNodes","atIndex","curNode","matchLocation","shift","matchIndex","out","parentNode","makeReplacementNode","stencilNode_1","createElement","fill","clone","cloneNode","setAttribute","appendChild","createTextNode","range","before","after","node_1","substring","insertBefore","el","removeChild","elA","i","l","innerNode","innerEl","replaceChild","elB","Plugin","Cell","initial","value","get","set","v","tinymce","util","Tools","resolve","global$1","FindReplaceText","getElmIndex","elm","getAttribute","markAllMatches","editor","currentIndexState","marker","dom","create","className","getBody","done","unwrap","findSpansByIndex","nodes","spans","toArray","getElementsByTagName","nodeIndex","toString","moveSelection","forward","testIndex","removeClass","addClass","selection","scrollIntoView","removeNode","parent","remove","isEmpty","find","matchCase","wholeWord","replace","RegExp","next","prev","isMatchSpan","all","currentMatchIndex","hasMore","nextIndex","grep","parseInt","nodeValue","hasNext","hasPrev","keepEditorSelection","startContainer","endContainer","rng","createRng","setStart","setEnd","setRng","Actions","Api","open","updateButtonStates","win","statusbar","disabled","notFoundAlert","windowManager","alert","focus","selectedText","last","undoManager","add","trim","getContent","format","layout","pack","align","onClose","onSubmit","e","caseState","preventDefault","checked","items","slice","buttons","subtype","onclick","submit","type","flex","name","title","padding","labelGap","spacing","size","label","Dialog","register","addCommand","Commands","showDialog","register$1","addMenuItem","shortcut","separator","context","addButton","tooltip","shortcuts","Buttons","PbEf","__webpack_require__"],"mappings":"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","file":"static/js/11.3ea2209c04c183177f8a.js","sourcesContent":["webpackJsonp([11],{\n\n/***/ \"Chqn\":\n/***/ (function(module, exports) {\n\n(function () {\nvar searchreplace = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    function isContentEditableFalse(node) {\n      return node && node.nodeType === 1 && node.contentEditable === 'false';\n    }\n    function findAndReplaceDOMText(regex, node, replacementNode, captureGroup, schema) {\n      var m;\n      var matches = [];\n      var text, count = 0, doc;\n      var blockElementsMap, hiddenTextElementsMap, shortEndedElementsMap;\n      doc = node.ownerDocument;\n      blockElementsMap = schema.getBlockElements();\n      hiddenTextElementsMap = schema.getWhiteSpaceElements();\n      shortEndedElementsMap = schema.getShortEndedElements();\n      function getMatchIndexes(m, captureGroup) {\n        captureGroup = captureGroup || 0;\n        if (!m[0]) {\n          throw new Error('findAndReplaceDOMText cannot handle zero-length matches');\n        }\n        var index = m.index;\n        if (captureGroup > 0) {\n          var cg = m[captureGroup];\n          if (!cg) {\n            throw new Error('Invalid capture group');\n          }\n          index += m[0].indexOf(cg);\n          m[0] = cg;\n        }\n        return [\n          index,\n          index + m[0].length,\n          [m[0]]\n        ];\n      }\n      function getText(node) {\n        var txt;\n        if (node.nodeType === 3) {\n          return node.data;\n        }\n        if (hiddenTextElementsMap[node.nodeName] && !blockElementsMap[node.nodeName]) {\n          return '';\n        }\n        txt = '';\n        if (isContentEditableFalse(node)) {\n          return '\\n';\n        }\n        if (blockElementsMap[node.nodeName] || shortEndedElementsMap[node.nodeName]) {\n          txt += '\\n';\n        }\n        if (node = node.firstChild) {\n          do {\n            txt += getText(node);\n          } while (node = node.nextSibling);\n        }\n        return txt;\n      }\n      function stepThroughMatches(node, matches, replaceFn) {\n        var startNode, endNode, startNodeIndex, endNodeIndex, innerNodes = [], atIndex = 0, curNode = node, matchLocation = matches.shift(), matchIndex = 0;\n        out:\n          while (true) {\n            if (blockElementsMap[curNode.nodeName] || shortEndedElementsMap[curNode.nodeName] || isContentEditableFalse(curNode)) {\n              atIndex++;\n            }\n            if (curNode.nodeType === 3) {\n              if (!endNode && curNode.length + atIndex >= matchLocation[1]) {\n                endNode = curNode;\n                endNodeIndex = matchLocation[1] - atIndex;\n              } else if (startNode) {\n                innerNodes.push(curNode);\n              }\n              if (!startNode && curNode.length + atIndex > matchLocation[0]) {\n                startNode = curNode;\n                startNodeIndex = matchLocation[0] - atIndex;\n              }\n              atIndex += curNode.length;\n            }\n            if (startNode && endNode) {\n              curNode = replaceFn({\n                startNode: startNode,\n                startNodeIndex: startNodeIndex,\n                endNode: endNode,\n                endNodeIndex: endNodeIndex,\n                innerNodes: innerNodes,\n                match: matchLocation[2],\n                matchIndex: matchIndex\n              });\n              atIndex -= endNode.length - endNodeIndex;\n              startNode = null;\n              endNode = null;\n              innerNodes = [];\n              matchLocation = matches.shift();\n              matchIndex++;\n              if (!matchLocation) {\n                break;\n              }\n            } else if ((!hiddenTextElementsMap[curNode.nodeName] || blockElementsMap[curNode.nodeName]) && curNode.firstChild) {\n              if (!isContentEditableFalse(curNode)) {\n                curNode = curNode.firstChild;\n                continue;\n              }\n            } else if (curNode.nextSibling) {\n              curNode = curNode.nextSibling;\n              continue;\n            }\n            while (true) {\n              if (curNode.nextSibling) {\n                curNode = curNode.nextSibling;\n                break;\n              } else if (curNode.parentNode !== node) {\n                curNode = curNode.parentNode;\n              } else {\n                break out;\n              }\n            }\n          }\n      }\n      function genReplacer(nodeName) {\n        var makeReplacementNode;\n        if (typeof nodeName !== 'function') {\n          var stencilNode_1 = nodeName.nodeType ? nodeName : doc.createElement(nodeName);\n          makeReplacementNode = function (fill, matchIndex) {\n            var clone = stencilNode_1.cloneNode(false);\n            clone.setAttribute('data-mce-index', matchIndex);\n            if (fill) {\n              clone.appendChild(doc.createTextNode(fill));\n            }\n            return clone;\n          };\n        } else {\n          makeReplacementNode = nodeName;\n        }\n        return function (range) {\n          var before;\n          var after;\n          var parentNode;\n          var startNode = range.startNode;\n          var endNode = range.endNode;\n          var matchIndex = range.matchIndex;\n          if (startNode === endNode) {\n            var node_1 = startNode;\n            parentNode = node_1.parentNode;\n            if (range.startNodeIndex > 0) {\n              before = doc.createTextNode(node_1.data.substring(0, range.startNodeIndex));\n              parentNode.insertBefore(before, node_1);\n            }\n            var el = makeReplacementNode(range.match[0], matchIndex);\n            parentNode.insertBefore(el, node_1);\n            if (range.endNodeIndex < node_1.length) {\n              after = doc.createTextNode(node_1.data.substring(range.endNodeIndex));\n              parentNode.insertBefore(after, node_1);\n            }\n            node_1.parentNode.removeChild(node_1);\n            return el;\n          }\n          before = doc.createTextNode(startNode.data.substring(0, range.startNodeIndex));\n          after = doc.createTextNode(endNode.data.substring(range.endNodeIndex));\n          var elA = makeReplacementNode(startNode.data.substring(range.startNodeIndex), matchIndex);\n          for (var i = 0, l = range.innerNodes.length; i < l; ++i) {\n            var innerNode = range.innerNodes[i];\n            var innerEl = makeReplacementNode(innerNode.data, matchIndex);\n            innerNode.parentNode.replaceChild(innerEl, innerNode);\n          }\n          var elB = makeReplacementNode(endNode.data.substring(0, range.endNodeIndex), matchIndex);\n          parentNode = startNode.parentNode;\n          parentNode.insertBefore(before, startNode);\n          parentNode.insertBefore(elA, startNode);\n          parentNode.removeChild(startNode);\n          parentNode = endNode.parentNode;\n          parentNode.insertBefore(elB, endNode);\n          parentNode.insertBefore(after, endNode);\n          parentNode.removeChild(endNode);\n          return elB;\n        };\n      }\n      text = getText(node);\n      if (!text) {\n        return;\n      }\n      if (regex.global) {\n        while (m = regex.exec(text)) {\n          matches.push(getMatchIndexes(m, captureGroup));\n        }\n      } else {\n        m = text.match(regex);\n        matches.push(getMatchIndexes(m, captureGroup));\n      }\n      if (matches.length) {\n        count = matches.length;\n        stepThroughMatches(node, matches, genReplacer(replacementNode));\n      }\n      return count;\n    }\n    var FindReplaceText = { findAndReplaceDOMText: findAndReplaceDOMText };\n\n    var getElmIndex = function (elm) {\n      var value = elm.getAttribute('data-mce-index');\n      if (typeof value === 'number') {\n        return '' + value;\n      }\n      return value;\n    };\n    var markAllMatches = function (editor, currentIndexState, regex) {\n      var node, marker;\n      marker = editor.dom.create('span', { 'data-mce-bogus': 1 });\n      marker.className = 'mce-match-marker';\n      node = editor.getBody();\n      done(editor, currentIndexState, false);\n      return FindReplaceText.findAndReplaceDOMText(regex, node, marker, false, editor.schema);\n    };\n    var unwrap = function (node) {\n      var parentNode = node.parentNode;\n      if (node.firstChild) {\n        parentNode.insertBefore(node.firstChild, node);\n      }\n      node.parentNode.removeChild(node);\n    };\n    var findSpansByIndex = function (editor, index) {\n      var nodes;\n      var spans = [];\n      nodes = global$1.toArray(editor.getBody().getElementsByTagName('span'));\n      if (nodes.length) {\n        for (var i = 0; i < nodes.length; i++) {\n          var nodeIndex = getElmIndex(nodes[i]);\n          if (nodeIndex === null || !nodeIndex.length) {\n            continue;\n          }\n          if (nodeIndex === index.toString()) {\n            spans.push(nodes[i]);\n          }\n        }\n      }\n      return spans;\n    };\n    var moveSelection = function (editor, currentIndexState, forward) {\n      var testIndex = currentIndexState.get();\n      var dom = editor.dom;\n      forward = forward !== false;\n      if (forward) {\n        testIndex++;\n      } else {\n        testIndex--;\n      }\n      dom.removeClass(findSpansByIndex(editor, currentIndexState.get()), 'mce-match-marker-selected');\n      var spans = findSpansByIndex(editor, testIndex);\n      if (spans.length) {\n        dom.addClass(findSpansByIndex(editor, testIndex), 'mce-match-marker-selected');\n        editor.selection.scrollIntoView(spans[0]);\n        return testIndex;\n      }\n      return -1;\n    };\n    var removeNode = function (dom, node) {\n      var parent = node.parentNode;\n      dom.remove(node);\n      if (dom.isEmpty(parent)) {\n        dom.remove(parent);\n      }\n    };\n    var find = function (editor, currentIndexState, text, matchCase, wholeWord) {\n      text = text.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n      text = text.replace(/\\s/g, '[^\\\\S\\\\r\\\\n]');\n      text = wholeWord ? '\\\\b' + text + '\\\\b' : text;\n      var count = markAllMatches(editor, currentIndexState, new RegExp(text, matchCase ? 'g' : 'gi'));\n      if (count) {\n        currentIndexState.set(-1);\n        currentIndexState.set(moveSelection(editor, currentIndexState, true));\n      }\n      return count;\n    };\n    var next = function (editor, currentIndexState) {\n      var index = moveSelection(editor, currentIndexState, true);\n      if (index !== -1) {\n        currentIndexState.set(index);\n      }\n    };\n    var prev = function (editor, currentIndexState) {\n      var index = moveSelection(editor, currentIndexState, false);\n      if (index !== -1) {\n        currentIndexState.set(index);\n      }\n    };\n    var isMatchSpan = function (node) {\n      var matchIndex = getElmIndex(node);\n      return matchIndex !== null && matchIndex.length > 0;\n    };\n    var replace = function (editor, currentIndexState, text, forward, all) {\n      var i, nodes, node, matchIndex, currentMatchIndex, nextIndex = currentIndexState.get(), hasMore;\n      forward = forward !== false;\n      node = editor.getBody();\n      nodes = global$1.grep(global$1.toArray(node.getElementsByTagName('span')), isMatchSpan);\n      for (i = 0; i < nodes.length; i++) {\n        var nodeIndex = getElmIndex(nodes[i]);\n        matchIndex = currentMatchIndex = parseInt(nodeIndex, 10);\n        if (all || matchIndex === currentIndexState.get()) {\n          if (text.length) {\n            nodes[i].firstChild.nodeValue = text;\n            unwrap(nodes[i]);\n          } else {\n            removeNode(editor.dom, nodes[i]);\n          }\n          while (nodes[++i]) {\n            matchIndex = parseInt(getElmIndex(nodes[i]), 10);\n            if (matchIndex === currentMatchIndex) {\n              removeNode(editor.dom, nodes[i]);\n            } else {\n              i--;\n              break;\n            }\n          }\n          if (forward) {\n            nextIndex--;\n          }\n        } else if (currentMatchIndex > currentIndexState.get()) {\n          nodes[i].setAttribute('data-mce-index', currentMatchIndex - 1);\n        }\n      }\n      currentIndexState.set(nextIndex);\n      if (forward) {\n        hasMore = hasNext(editor, currentIndexState);\n        next(editor, currentIndexState);\n      } else {\n        hasMore = hasPrev(editor, currentIndexState);\n        prev(editor, currentIndexState);\n      }\n      return !all && hasMore;\n    };\n    var done = function (editor, currentIndexState, keepEditorSelection) {\n      var i, nodes, startContainer, endContainer;\n      nodes = global$1.toArray(editor.getBody().getElementsByTagName('span'));\n      for (i = 0; i < nodes.length; i++) {\n        var nodeIndex = getElmIndex(nodes[i]);\n        if (nodeIndex !== null && nodeIndex.length) {\n          if (nodeIndex === currentIndexState.get().toString()) {\n            if (!startContainer) {\n              startContainer = nodes[i].firstChild;\n            }\n            endContainer = nodes[i].firstChild;\n          }\n          unwrap(nodes[i]);\n        }\n      }\n      if (startContainer && endContainer) {\n        var rng = editor.dom.createRng();\n        rng.setStart(startContainer, 0);\n        rng.setEnd(endContainer, endContainer.data.length);\n        if (keepEditorSelection !== false) {\n          editor.selection.setRng(rng);\n        }\n        return rng;\n      }\n    };\n    var hasNext = function (editor, currentIndexState) {\n      return findSpansByIndex(editor, currentIndexState.get() + 1).length > 0;\n    };\n    var hasPrev = function (editor, currentIndexState) {\n      return findSpansByIndex(editor, currentIndexState.get() - 1).length > 0;\n    };\n    var Actions = {\n      done: done,\n      find: find,\n      next: next,\n      prev: prev,\n      replace: replace,\n      hasNext: hasNext,\n      hasPrev: hasPrev\n    };\n\n    var get = function (editor, currentIndexState) {\n      var done = function (keepEditorSelection) {\n        return Actions.done(editor, currentIndexState, keepEditorSelection);\n      };\n      var find = function (text, matchCase, wholeWord) {\n        return Actions.find(editor, currentIndexState, text, matchCase, wholeWord);\n      };\n      var next = function () {\n        return Actions.next(editor, currentIndexState);\n      };\n      var prev = function () {\n        return Actions.prev(editor, currentIndexState);\n      };\n      var replace = function (text, forward, all) {\n        return Actions.replace(editor, currentIndexState, text, forward, all);\n      };\n      return {\n        done: done,\n        find: find,\n        next: next,\n        prev: prev,\n        replace: replace\n      };\n    };\n    var Api = { get: get };\n\n    var open = function (editor, currentIndexState) {\n      var last = {}, selectedText;\n      editor.undoManager.add();\n      selectedText = global$1.trim(editor.selection.getContent({ format: 'text' }));\n      function updateButtonStates() {\n        win.statusbar.find('#next').disabled(Actions.hasNext(editor, currentIndexState) === false);\n        win.statusbar.find('#prev').disabled(Actions.hasPrev(editor, currentIndexState) === false);\n      }\n      function notFoundAlert() {\n        editor.windowManager.alert('Could not find the specified string.', function () {\n          win.find('#find')[0].focus();\n        });\n      }\n      var win = editor.windowManager.open({\n        layout: 'flex',\n        pack: 'center',\n        align: 'center',\n        onClose: function () {\n          editor.focus();\n          Actions.done(editor, currentIndexState);\n          editor.undoManager.add();\n        },\n        onSubmit: function (e) {\n          var count, caseState, text, wholeWord;\n          e.preventDefault();\n          caseState = win.find('#case').checked();\n          wholeWord = win.find('#words').checked();\n          text = win.find('#find').value();\n          if (!text.length) {\n            Actions.done(editor, currentIndexState, false);\n            win.statusbar.items().slice(1).disabled(true);\n            return;\n          }\n          if (last.text === text && last.caseState === caseState && last.wholeWord === wholeWord) {\n            if (!Actions.hasNext(editor, currentIndexState)) {\n              notFoundAlert();\n              return;\n            }\n            Actions.next(editor, currentIndexState);\n            updateButtonStates();\n            return;\n          }\n          count = Actions.find(editor, currentIndexState, text, caseState, wholeWord);\n          if (!count) {\n            notFoundAlert();\n          }\n          win.statusbar.items().slice(1).disabled(count === 0);\n          updateButtonStates();\n          last = {\n            text: text,\n            caseState: caseState,\n            wholeWord: wholeWord\n          };\n        },\n        buttons: [\n          {\n            text: 'Find',\n            subtype: 'primary',\n            onclick: function () {\n              win.submit();\n            }\n          },\n          {\n            text: 'Replace',\n            disabled: true,\n            onclick: function () {\n              if (!Actions.replace(editor, currentIndexState, win.find('#replace').value())) {\n                win.statusbar.items().slice(1).disabled(true);\n                currentIndexState.set(-1);\n                last = {};\n              }\n            }\n          },\n          {\n            text: 'Replace all',\n            disabled: true,\n            onclick: function () {\n              Actions.replace(editor, currentIndexState, win.find('#replace').value(), true, true);\n              win.statusbar.items().slice(1).disabled(true);\n              last = {};\n            }\n          },\n          {\n            type: 'spacer',\n            flex: 1\n          },\n          {\n            text: 'Prev',\n            name: 'prev',\n            disabled: true,\n            onclick: function () {\n              Actions.prev(editor, currentIndexState);\n              updateButtonStates();\n            }\n          },\n          {\n            text: 'Next',\n            name: 'next',\n            disabled: true,\n            onclick: function () {\n              Actions.next(editor, currentIndexState);\n              updateButtonStates();\n            }\n          }\n        ],\n        title: 'Find and replace',\n        items: {\n          type: 'form',\n          padding: 20,\n          labelGap: 30,\n          spacing: 10,\n          items: [\n            {\n              type: 'textbox',\n              name: 'find',\n              size: 40,\n              label: 'Find',\n              value: selectedText\n            },\n            {\n              type: 'textbox',\n              name: 'replace',\n              size: 40,\n              label: 'Replace with'\n            },\n            {\n              type: 'checkbox',\n              name: 'case',\n              text: 'Match case',\n              label: ' '\n            },\n            {\n              type: 'checkbox',\n              name: 'words',\n              text: 'Whole words',\n              label: ' '\n            }\n          ]\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor, currentIndexState) {\n      editor.addCommand('SearchReplace', function () {\n        Dialog.open(editor, currentIndexState);\n      });\n    };\n    var Commands = { register: register };\n\n    var showDialog = function (editor, currentIndexState) {\n      return function () {\n        Dialog.open(editor, currentIndexState);\n      };\n    };\n    var register$1 = function (editor, currentIndexState) {\n      editor.addMenuItem('searchreplace', {\n        text: 'Find and replace',\n        shortcut: 'Meta+F',\n        onclick: showDialog(editor, currentIndexState),\n        separator: 'before',\n        context: 'edit'\n      });\n      editor.addButton('searchreplace', {\n        tooltip: 'Find and replace',\n        onclick: showDialog(editor, currentIndexState)\n      });\n      editor.shortcuts.add('Meta+F', '', showDialog(editor, currentIndexState));\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('searchreplace', function (editor) {\n      var currentIndexState = Cell(-1);\n      Commands.register(editor, currentIndexState);\n      Buttons.register(editor, currentIndexState);\n      return Api.get(editor, currentIndexState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ }),\n\n/***/ \"PbEf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"searchreplace\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/searchreplace')\n//   ES2015:\n//     import 'tinymce/plugins/searchreplace'\n__webpack_require__(\"Chqn\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/11.3ea2209c04c183177f8a.js","(function () {\nvar searchreplace = (function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    function isContentEditableFalse(node) {\n      return node && node.nodeType === 1 && node.contentEditable === 'false';\n    }\n    function findAndReplaceDOMText(regex, node, replacementNode, captureGroup, schema) {\n      var m;\n      var matches = [];\n      var text, count = 0, doc;\n      var blockElementsMap, hiddenTextElementsMap, shortEndedElementsMap;\n      doc = node.ownerDocument;\n      blockElementsMap = schema.getBlockElements();\n      hiddenTextElementsMap = schema.getWhiteSpaceElements();\n      shortEndedElementsMap = schema.getShortEndedElements();\n      function getMatchIndexes(m, captureGroup) {\n        captureGroup = captureGroup || 0;\n        if (!m[0]) {\n          throw new Error('findAndReplaceDOMText cannot handle zero-length matches');\n        }\n        var index = m.index;\n        if (captureGroup > 0) {\n          var cg = m[captureGroup];\n          if (!cg) {\n            throw new Error('Invalid capture group');\n          }\n          index += m[0].indexOf(cg);\n          m[0] = cg;\n        }\n        return [\n          index,\n          index + m[0].length,\n          [m[0]]\n        ];\n      }\n      function getText(node) {\n        var txt;\n        if (node.nodeType === 3) {\n          return node.data;\n        }\n        if (hiddenTextElementsMap[node.nodeName] && !blockElementsMap[node.nodeName]) {\n          return '';\n        }\n        txt = '';\n        if (isContentEditableFalse(node)) {\n          return '\\n';\n        }\n        if (blockElementsMap[node.nodeName] || shortEndedElementsMap[node.nodeName]) {\n          txt += '\\n';\n        }\n        if (node = node.firstChild) {\n          do {\n            txt += getText(node);\n          } while (node = node.nextSibling);\n        }\n        return txt;\n      }\n      function stepThroughMatches(node, matches, replaceFn) {\n        var startNode, endNode, startNodeIndex, endNodeIndex, innerNodes = [], atIndex = 0, curNode = node, matchLocation = matches.shift(), matchIndex = 0;\n        out:\n          while (true) {\n            if (blockElementsMap[curNode.nodeName] || shortEndedElementsMap[curNode.nodeName] || isContentEditableFalse(curNode)) {\n              atIndex++;\n            }\n            if (curNode.nodeType === 3) {\n              if (!endNode && curNode.length + atIndex >= matchLocation[1]) {\n                endNode = curNode;\n                endNodeIndex = matchLocation[1] - atIndex;\n              } else if (startNode) {\n                innerNodes.push(curNode);\n              }\n              if (!startNode && curNode.length + atIndex > matchLocation[0]) {\n                startNode = curNode;\n                startNodeIndex = matchLocation[0] - atIndex;\n              }\n              atIndex += curNode.length;\n            }\n            if (startNode && endNode) {\n              curNode = replaceFn({\n                startNode: startNode,\n                startNodeIndex: startNodeIndex,\n                endNode: endNode,\n                endNodeIndex: endNodeIndex,\n                innerNodes: innerNodes,\n                match: matchLocation[2],\n                matchIndex: matchIndex\n              });\n              atIndex -= endNode.length - endNodeIndex;\n              startNode = null;\n              endNode = null;\n              innerNodes = [];\n              matchLocation = matches.shift();\n              matchIndex++;\n              if (!matchLocation) {\n                break;\n              }\n            } else if ((!hiddenTextElementsMap[curNode.nodeName] || blockElementsMap[curNode.nodeName]) && curNode.firstChild) {\n              if (!isContentEditableFalse(curNode)) {\n                curNode = curNode.firstChild;\n                continue;\n              }\n            } else if (curNode.nextSibling) {\n              curNode = curNode.nextSibling;\n              continue;\n            }\n            while (true) {\n              if (curNode.nextSibling) {\n                curNode = curNode.nextSibling;\n                break;\n              } else if (curNode.parentNode !== node) {\n                curNode = curNode.parentNode;\n              } else {\n                break out;\n              }\n            }\n          }\n      }\n      function genReplacer(nodeName) {\n        var makeReplacementNode;\n        if (typeof nodeName !== 'function') {\n          var stencilNode_1 = nodeName.nodeType ? nodeName : doc.createElement(nodeName);\n          makeReplacementNode = function (fill, matchIndex) {\n            var clone = stencilNode_1.cloneNode(false);\n            clone.setAttribute('data-mce-index', matchIndex);\n            if (fill) {\n              clone.appendChild(doc.createTextNode(fill));\n            }\n            return clone;\n          };\n        } else {\n          makeReplacementNode = nodeName;\n        }\n        return function (range) {\n          var before;\n          var after;\n          var parentNode;\n          var startNode = range.startNode;\n          var endNode = range.endNode;\n          var matchIndex = range.matchIndex;\n          if (startNode === endNode) {\n            var node_1 = startNode;\n            parentNode = node_1.parentNode;\n            if (range.startNodeIndex > 0) {\n              before = doc.createTextNode(node_1.data.substring(0, range.startNodeIndex));\n              parentNode.insertBefore(before, node_1);\n            }\n            var el = makeReplacementNode(range.match[0], matchIndex);\n            parentNode.insertBefore(el, node_1);\n            if (range.endNodeIndex < node_1.length) {\n              after = doc.createTextNode(node_1.data.substring(range.endNodeIndex));\n              parentNode.insertBefore(after, node_1);\n            }\n            node_1.parentNode.removeChild(node_1);\n            return el;\n          }\n          before = doc.createTextNode(startNode.data.substring(0, range.startNodeIndex));\n          after = doc.createTextNode(endNode.data.substring(range.endNodeIndex));\n          var elA = makeReplacementNode(startNode.data.substring(range.startNodeIndex), matchIndex);\n          for (var i = 0, l = range.innerNodes.length; i < l; ++i) {\n            var innerNode = range.innerNodes[i];\n            var innerEl = makeReplacementNode(innerNode.data, matchIndex);\n            innerNode.parentNode.replaceChild(innerEl, innerNode);\n          }\n          var elB = makeReplacementNode(endNode.data.substring(0, range.endNodeIndex), matchIndex);\n          parentNode = startNode.parentNode;\n          parentNode.insertBefore(before, startNode);\n          parentNode.insertBefore(elA, startNode);\n          parentNode.removeChild(startNode);\n          parentNode = endNode.parentNode;\n          parentNode.insertBefore(elB, endNode);\n          parentNode.insertBefore(after, endNode);\n          parentNode.removeChild(endNode);\n          return elB;\n        };\n      }\n      text = getText(node);\n      if (!text) {\n        return;\n      }\n      if (regex.global) {\n        while (m = regex.exec(text)) {\n          matches.push(getMatchIndexes(m, captureGroup));\n        }\n      } else {\n        m = text.match(regex);\n        matches.push(getMatchIndexes(m, captureGroup));\n      }\n      if (matches.length) {\n        count = matches.length;\n        stepThroughMatches(node, matches, genReplacer(replacementNode));\n      }\n      return count;\n    }\n    var FindReplaceText = { findAndReplaceDOMText: findAndReplaceDOMText };\n\n    var getElmIndex = function (elm) {\n      var value = elm.getAttribute('data-mce-index');\n      if (typeof value === 'number') {\n        return '' + value;\n      }\n      return value;\n    };\n    var markAllMatches = function (editor, currentIndexState, regex) {\n      var node, marker;\n      marker = editor.dom.create('span', { 'data-mce-bogus': 1 });\n      marker.className = 'mce-match-marker';\n      node = editor.getBody();\n      done(editor, currentIndexState, false);\n      return FindReplaceText.findAndReplaceDOMText(regex, node, marker, false, editor.schema);\n    };\n    var unwrap = function (node) {\n      var parentNode = node.parentNode;\n      if (node.firstChild) {\n        parentNode.insertBefore(node.firstChild, node);\n      }\n      node.parentNode.removeChild(node);\n    };\n    var findSpansByIndex = function (editor, index) {\n      var nodes;\n      var spans = [];\n      nodes = global$1.toArray(editor.getBody().getElementsByTagName('span'));\n      if (nodes.length) {\n        for (var i = 0; i < nodes.length; i++) {\n          var nodeIndex = getElmIndex(nodes[i]);\n          if (nodeIndex === null || !nodeIndex.length) {\n            continue;\n          }\n          if (nodeIndex === index.toString()) {\n            spans.push(nodes[i]);\n          }\n        }\n      }\n      return spans;\n    };\n    var moveSelection = function (editor, currentIndexState, forward) {\n      var testIndex = currentIndexState.get();\n      var dom = editor.dom;\n      forward = forward !== false;\n      if (forward) {\n        testIndex++;\n      } else {\n        testIndex--;\n      }\n      dom.removeClass(findSpansByIndex(editor, currentIndexState.get()), 'mce-match-marker-selected');\n      var spans = findSpansByIndex(editor, testIndex);\n      if (spans.length) {\n        dom.addClass(findSpansByIndex(editor, testIndex), 'mce-match-marker-selected');\n        editor.selection.scrollIntoView(spans[0]);\n        return testIndex;\n      }\n      return -1;\n    };\n    var removeNode = function (dom, node) {\n      var parent = node.parentNode;\n      dom.remove(node);\n      if (dom.isEmpty(parent)) {\n        dom.remove(parent);\n      }\n    };\n    var find = function (editor, currentIndexState, text, matchCase, wholeWord) {\n      text = text.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n      text = text.replace(/\\s/g, '[^\\\\S\\\\r\\\\n]');\n      text = wholeWord ? '\\\\b' + text + '\\\\b' : text;\n      var count = markAllMatches(editor, currentIndexState, new RegExp(text, matchCase ? 'g' : 'gi'));\n      if (count) {\n        currentIndexState.set(-1);\n        currentIndexState.set(moveSelection(editor, currentIndexState, true));\n      }\n      return count;\n    };\n    var next = function (editor, currentIndexState) {\n      var index = moveSelection(editor, currentIndexState, true);\n      if (index !== -1) {\n        currentIndexState.set(index);\n      }\n    };\n    var prev = function (editor, currentIndexState) {\n      var index = moveSelection(editor, currentIndexState, false);\n      if (index !== -1) {\n        currentIndexState.set(index);\n      }\n    };\n    var isMatchSpan = function (node) {\n      var matchIndex = getElmIndex(node);\n      return matchIndex !== null && matchIndex.length > 0;\n    };\n    var replace = function (editor, currentIndexState, text, forward, all) {\n      var i, nodes, node, matchIndex, currentMatchIndex, nextIndex = currentIndexState.get(), hasMore;\n      forward = forward !== false;\n      node = editor.getBody();\n      nodes = global$1.grep(global$1.toArray(node.getElementsByTagName('span')), isMatchSpan);\n      for (i = 0; i < nodes.length; i++) {\n        var nodeIndex = getElmIndex(nodes[i]);\n        matchIndex = currentMatchIndex = parseInt(nodeIndex, 10);\n        if (all || matchIndex === currentIndexState.get()) {\n          if (text.length) {\n            nodes[i].firstChild.nodeValue = text;\n            unwrap(nodes[i]);\n          } else {\n            removeNode(editor.dom, nodes[i]);\n          }\n          while (nodes[++i]) {\n            matchIndex = parseInt(getElmIndex(nodes[i]), 10);\n            if (matchIndex === currentMatchIndex) {\n              removeNode(editor.dom, nodes[i]);\n            } else {\n              i--;\n              break;\n            }\n          }\n          if (forward) {\n            nextIndex--;\n          }\n        } else if (currentMatchIndex > currentIndexState.get()) {\n          nodes[i].setAttribute('data-mce-index', currentMatchIndex - 1);\n        }\n      }\n      currentIndexState.set(nextIndex);\n      if (forward) {\n        hasMore = hasNext(editor, currentIndexState);\n        next(editor, currentIndexState);\n      } else {\n        hasMore = hasPrev(editor, currentIndexState);\n        prev(editor, currentIndexState);\n      }\n      return !all && hasMore;\n    };\n    var done = function (editor, currentIndexState, keepEditorSelection) {\n      var i, nodes, startContainer, endContainer;\n      nodes = global$1.toArray(editor.getBody().getElementsByTagName('span'));\n      for (i = 0; i < nodes.length; i++) {\n        var nodeIndex = getElmIndex(nodes[i]);\n        if (nodeIndex !== null && nodeIndex.length) {\n          if (nodeIndex === currentIndexState.get().toString()) {\n            if (!startContainer) {\n              startContainer = nodes[i].firstChild;\n            }\n            endContainer = nodes[i].firstChild;\n          }\n          unwrap(nodes[i]);\n        }\n      }\n      if (startContainer && endContainer) {\n        var rng = editor.dom.createRng();\n        rng.setStart(startContainer, 0);\n        rng.setEnd(endContainer, endContainer.data.length);\n        if (keepEditorSelection !== false) {\n          editor.selection.setRng(rng);\n        }\n        return rng;\n      }\n    };\n    var hasNext = function (editor, currentIndexState) {\n      return findSpansByIndex(editor, currentIndexState.get() + 1).length > 0;\n    };\n    var hasPrev = function (editor, currentIndexState) {\n      return findSpansByIndex(editor, currentIndexState.get() - 1).length > 0;\n    };\n    var Actions = {\n      done: done,\n      find: find,\n      next: next,\n      prev: prev,\n      replace: replace,\n      hasNext: hasNext,\n      hasPrev: hasPrev\n    };\n\n    var get = function (editor, currentIndexState) {\n      var done = function (keepEditorSelection) {\n        return Actions.done(editor, currentIndexState, keepEditorSelection);\n      };\n      var find = function (text, matchCase, wholeWord) {\n        return Actions.find(editor, currentIndexState, text, matchCase, wholeWord);\n      };\n      var next = function () {\n        return Actions.next(editor, currentIndexState);\n      };\n      var prev = function () {\n        return Actions.prev(editor, currentIndexState);\n      };\n      var replace = function (text, forward, all) {\n        return Actions.replace(editor, currentIndexState, text, forward, all);\n      };\n      return {\n        done: done,\n        find: find,\n        next: next,\n        prev: prev,\n        replace: replace\n      };\n    };\n    var Api = { get: get };\n\n    var open = function (editor, currentIndexState) {\n      var last = {}, selectedText;\n      editor.undoManager.add();\n      selectedText = global$1.trim(editor.selection.getContent({ format: 'text' }));\n      function updateButtonStates() {\n        win.statusbar.find('#next').disabled(Actions.hasNext(editor, currentIndexState) === false);\n        win.statusbar.find('#prev').disabled(Actions.hasPrev(editor, currentIndexState) === false);\n      }\n      function notFoundAlert() {\n        editor.windowManager.alert('Could not find the specified string.', function () {\n          win.find('#find')[0].focus();\n        });\n      }\n      var win = editor.windowManager.open({\n        layout: 'flex',\n        pack: 'center',\n        align: 'center',\n        onClose: function () {\n          editor.focus();\n          Actions.done(editor, currentIndexState);\n          editor.undoManager.add();\n        },\n        onSubmit: function (e) {\n          var count, caseState, text, wholeWord;\n          e.preventDefault();\n          caseState = win.find('#case').checked();\n          wholeWord = win.find('#words').checked();\n          text = win.find('#find').value();\n          if (!text.length) {\n            Actions.done(editor, currentIndexState, false);\n            win.statusbar.items().slice(1).disabled(true);\n            return;\n          }\n          if (last.text === text && last.caseState === caseState && last.wholeWord === wholeWord) {\n            if (!Actions.hasNext(editor, currentIndexState)) {\n              notFoundAlert();\n              return;\n            }\n            Actions.next(editor, currentIndexState);\n            updateButtonStates();\n            return;\n          }\n          count = Actions.find(editor, currentIndexState, text, caseState, wholeWord);\n          if (!count) {\n            notFoundAlert();\n          }\n          win.statusbar.items().slice(1).disabled(count === 0);\n          updateButtonStates();\n          last = {\n            text: text,\n            caseState: caseState,\n            wholeWord: wholeWord\n          };\n        },\n        buttons: [\n          {\n            text: 'Find',\n            subtype: 'primary',\n            onclick: function () {\n              win.submit();\n            }\n          },\n          {\n            text: 'Replace',\n            disabled: true,\n            onclick: function () {\n              if (!Actions.replace(editor, currentIndexState, win.find('#replace').value())) {\n                win.statusbar.items().slice(1).disabled(true);\n                currentIndexState.set(-1);\n                last = {};\n              }\n            }\n          },\n          {\n            text: 'Replace all',\n            disabled: true,\n            onclick: function () {\n              Actions.replace(editor, currentIndexState, win.find('#replace').value(), true, true);\n              win.statusbar.items().slice(1).disabled(true);\n              last = {};\n            }\n          },\n          {\n            type: 'spacer',\n            flex: 1\n          },\n          {\n            text: 'Prev',\n            name: 'prev',\n            disabled: true,\n            onclick: function () {\n              Actions.prev(editor, currentIndexState);\n              updateButtonStates();\n            }\n          },\n          {\n            text: 'Next',\n            name: 'next',\n            disabled: true,\n            onclick: function () {\n              Actions.next(editor, currentIndexState);\n              updateButtonStates();\n            }\n          }\n        ],\n        title: 'Find and replace',\n        items: {\n          type: 'form',\n          padding: 20,\n          labelGap: 30,\n          spacing: 10,\n          items: [\n            {\n              type: 'textbox',\n              name: 'find',\n              size: 40,\n              label: 'Find',\n              value: selectedText\n            },\n            {\n              type: 'textbox',\n              name: 'replace',\n              size: 40,\n              label: 'Replace with'\n            },\n            {\n              type: 'checkbox',\n              name: 'case',\n              text: 'Match case',\n              label: ' '\n            },\n            {\n              type: 'checkbox',\n              name: 'words',\n              text: 'Whole words',\n              label: ' '\n            }\n          ]\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor, currentIndexState) {\n      editor.addCommand('SearchReplace', function () {\n        Dialog.open(editor, currentIndexState);\n      });\n    };\n    var Commands = { register: register };\n\n    var showDialog = function (editor, currentIndexState) {\n      return function () {\n        Dialog.open(editor, currentIndexState);\n      };\n    };\n    var register$1 = function (editor, currentIndexState) {\n      editor.addMenuItem('searchreplace', {\n        text: 'Find and replace',\n        shortcut: 'Meta+F',\n        onclick: showDialog(editor, currentIndexState),\n        separator: 'before',\n        context: 'edit'\n      });\n      editor.addButton('searchreplace', {\n        tooltip: 'Find and replace',\n        onclick: showDialog(editor, currentIndexState)\n      });\n      editor.shortcuts.add('Meta+F', '', showDialog(editor, currentIndexState));\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('searchreplace', function (editor) {\n      var currentIndexState = Cell(-1);\n      Commands.register(editor, currentIndexState);\n      Buttons.register(editor, currentIndexState);\n      return Api.get(editor, currentIndexState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/searchreplace/plugin.js\n// module id = Chqn\n// module chunks = 11","// Exports the \"searchreplace\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/searchreplace')\n//   ES2015:\n//     import 'tinymce/plugins/searchreplace'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/searchreplace/index.js\n// module id = PbEf\n// module chunks = 11"],"sourceRoot":""}