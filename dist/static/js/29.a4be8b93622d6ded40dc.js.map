{"version":3,"sources":["webpack:///static/js/29.a4be8b93622d6ded40dc.js","webpack:///./~/tinymce/plugins/fullscreen/index.js","webpack:///./~/tinymce/plugins/fullscreen/plugin.js"],"names":["webpackJsonp","3OjJ","module","exports","__webpack_require__","WA99","domGlobals","Plugin","Cell","initial","value","get","set","v","clone","global","tinymce","util","Tools","resolve","fullscreenState","isFullscreen","Api","global$1","fireFullscreenStateChanged","editor","state","fire","Events","DOM","getWindowSize","w","h","win","window","doc","document","body","offsetWidth","offsetHeight","innerWidth","innerHeight","getScrollPos","vp","getViewPort","x","y","setScrollPos","pos","scrollTo","toggleFullscreen","editorContainerStyle","editorContainer","iframe","iframeStyle","documentElement","fullscreenInfo","resize","setStyle","clientHeight","removeResize","unbind","getContainer","style","getContentAreaContainer","firstChild","width","iframeWidth","height","iframeHeight","containerWidth","containerHeight","removeClass","scrollPos","resizeHandler","off","removeHandler","newFullScreenInfo","addClass","bind","on","Actions","register","addCommand","Commands","postRender","e","ctrl","control","active","register$1","addMenuItem","text","shortcut","selectable","cmd","onPostRender","context","addButton","tooltip","Buttons","add","settings","inline","addShortcut"],"mappings":"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","file":"static/js/29.a4be8b93622d6ded40dc.js","sourcesContent":["webpackJsonp([29],{\n\n/***/ \"3OjJ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"fullscreen\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/fullscreen')\n//   ES2015:\n//     import 'tinymce/plugins/fullscreen'\n__webpack_require__(\"WA99\");\n\n/***/ }),\n\n/***/ \"WA99\":\n/***/ (function(module, exports) {\n\n(function () {\nvar fullscreen = (function (domGlobals) {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var get = function (fullscreenState) {\n      return {\n        isFullscreen: function () {\n          return fullscreenState.get() !== null;\n        }\n      };\n    };\n    var Api = { get: get };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var fireFullscreenStateChanged = function (editor, state) {\n      editor.fire('FullscreenStateChanged', { state: state });\n    };\n    var Events = { fireFullscreenStateChanged: fireFullscreenStateChanged };\n\n    var DOM = global$1.DOM;\n    var getWindowSize = function () {\n      var w;\n      var h;\n      var win = domGlobals.window;\n      var doc = domGlobals.document;\n      var body = doc.body;\n      if (body.offsetWidth) {\n        w = body.offsetWidth;\n        h = body.offsetHeight;\n      }\n      if (win.innerWidth && win.innerHeight) {\n        w = win.innerWidth;\n        h = win.innerHeight;\n      }\n      return {\n        w: w,\n        h: h\n      };\n    };\n    var getScrollPos = function () {\n      var vp = DOM.getViewPort();\n      return {\n        x: vp.x,\n        y: vp.y\n      };\n    };\n    var setScrollPos = function (pos) {\n      domGlobals.window.scrollTo(pos.x, pos.y);\n    };\n    var toggleFullscreen = function (editor, fullscreenState) {\n      var body = domGlobals.document.body;\n      var documentElement = domGlobals.document.documentElement;\n      var editorContainerStyle;\n      var editorContainer, iframe, iframeStyle;\n      var fullscreenInfo = fullscreenState.get();\n      var resize = function () {\n        DOM.setStyle(iframe, 'height', getWindowSize().h - (editorContainer.clientHeight - iframe.clientHeight));\n      };\n      var removeResize = function () {\n        DOM.unbind(domGlobals.window, 'resize', resize);\n      };\n      editorContainer = editor.getContainer();\n      editorContainerStyle = editorContainer.style;\n      iframe = editor.getContentAreaContainer().firstChild;\n      iframeStyle = iframe.style;\n      if (!fullscreenInfo) {\n        var newFullScreenInfo = {\n          scrollPos: getScrollPos(),\n          containerWidth: editorContainerStyle.width,\n          containerHeight: editorContainerStyle.height,\n          iframeWidth: iframeStyle.width,\n          iframeHeight: iframeStyle.height,\n          resizeHandler: resize,\n          removeHandler: removeResize\n        };\n        iframeStyle.width = iframeStyle.height = '100%';\n        editorContainerStyle.width = editorContainerStyle.height = '';\n        DOM.addClass(body, 'mce-fullscreen');\n        DOM.addClass(documentElement, 'mce-fullscreen');\n        DOM.addClass(editorContainer, 'mce-fullscreen');\n        DOM.bind(domGlobals.window, 'resize', resize);\n        editor.on('remove', removeResize);\n        resize();\n        fullscreenState.set(newFullScreenInfo);\n        Events.fireFullscreenStateChanged(editor, true);\n      } else {\n        iframeStyle.width = fullscreenInfo.iframeWidth;\n        iframeStyle.height = fullscreenInfo.iframeHeight;\n        if (fullscreenInfo.containerWidth) {\n          editorContainerStyle.width = fullscreenInfo.containerWidth;\n        }\n        if (fullscreenInfo.containerHeight) {\n          editorContainerStyle.height = fullscreenInfo.containerHeight;\n        }\n        DOM.removeClass(body, 'mce-fullscreen');\n        DOM.removeClass(documentElement, 'mce-fullscreen');\n        DOM.removeClass(editorContainer, 'mce-fullscreen');\n        setScrollPos(fullscreenInfo.scrollPos);\n        DOM.unbind(domGlobals.window, 'resize', fullscreenInfo.resizeHandler);\n        editor.off('remove', fullscreenInfo.removeHandler);\n        fullscreenState.set(null);\n        Events.fireFullscreenStateChanged(editor, false);\n      }\n    };\n    var Actions = { toggleFullscreen: toggleFullscreen };\n\n    var register = function (editor, fullscreenState) {\n      editor.addCommand('mceFullScreen', function () {\n        Actions.toggleFullscreen(editor, fullscreenState);\n      });\n    };\n    var Commands = { register: register };\n\n    var postRender = function (editor) {\n      return function (e) {\n        var ctrl = e.control;\n        editor.on('FullscreenStateChanged', function (e) {\n          ctrl.active(e.state);\n        });\n      };\n    };\n    var register$1 = function (editor) {\n      editor.addMenuItem('fullscreen', {\n        text: 'Fullscreen',\n        shortcut: 'Ctrl+Shift+F',\n        selectable: true,\n        cmd: 'mceFullScreen',\n        onPostRender: postRender(editor),\n        context: 'view'\n      });\n      editor.addButton('fullscreen', {\n        active: false,\n        tooltip: 'Fullscreen',\n        cmd: 'mceFullScreen',\n        onPostRender: postRender(editor)\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('fullscreen', function (editor) {\n      var fullscreenState = Cell(null);\n      if (editor.settings.inline) {\n        return Api.get(fullscreenState);\n      }\n      Commands.register(editor, fullscreenState);\n      Buttons.register(editor);\n      editor.addShortcut('Ctrl+Shift+F', '', 'mceFullScreen');\n      return Api.get(fullscreenState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/29.a4be8b93622d6ded40dc.js","// Exports the \"fullscreen\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/fullscreen')\n//   ES2015:\n//     import 'tinymce/plugins/fullscreen'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/fullscreen/index.js\n// module id = 3OjJ\n// module chunks = 29","(function () {\nvar fullscreen = (function (domGlobals) {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      var clone = function () {\n        return Cell(get());\n      };\n      return {\n        get: get,\n        set: set,\n        clone: clone\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var get = function (fullscreenState) {\n      return {\n        isFullscreen: function () {\n          return fullscreenState.get() !== null;\n        }\n      };\n    };\n    var Api = { get: get };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var fireFullscreenStateChanged = function (editor, state) {\n      editor.fire('FullscreenStateChanged', { state: state });\n    };\n    var Events = { fireFullscreenStateChanged: fireFullscreenStateChanged };\n\n    var DOM = global$1.DOM;\n    var getWindowSize = function () {\n      var w;\n      var h;\n      var win = domGlobals.window;\n      var doc = domGlobals.document;\n      var body = doc.body;\n      if (body.offsetWidth) {\n        w = body.offsetWidth;\n        h = body.offsetHeight;\n      }\n      if (win.innerWidth && win.innerHeight) {\n        w = win.innerWidth;\n        h = win.innerHeight;\n      }\n      return {\n        w: w,\n        h: h\n      };\n    };\n    var getScrollPos = function () {\n      var vp = DOM.getViewPort();\n      return {\n        x: vp.x,\n        y: vp.y\n      };\n    };\n    var setScrollPos = function (pos) {\n      domGlobals.window.scrollTo(pos.x, pos.y);\n    };\n    var toggleFullscreen = function (editor, fullscreenState) {\n      var body = domGlobals.document.body;\n      var documentElement = domGlobals.document.documentElement;\n      var editorContainerStyle;\n      var editorContainer, iframe, iframeStyle;\n      var fullscreenInfo = fullscreenState.get();\n      var resize = function () {\n        DOM.setStyle(iframe, 'height', getWindowSize().h - (editorContainer.clientHeight - iframe.clientHeight));\n      };\n      var removeResize = function () {\n        DOM.unbind(domGlobals.window, 'resize', resize);\n      };\n      editorContainer = editor.getContainer();\n      editorContainerStyle = editorContainer.style;\n      iframe = editor.getContentAreaContainer().firstChild;\n      iframeStyle = iframe.style;\n      if (!fullscreenInfo) {\n        var newFullScreenInfo = {\n          scrollPos: getScrollPos(),\n          containerWidth: editorContainerStyle.width,\n          containerHeight: editorContainerStyle.height,\n          iframeWidth: iframeStyle.width,\n          iframeHeight: iframeStyle.height,\n          resizeHandler: resize,\n          removeHandler: removeResize\n        };\n        iframeStyle.width = iframeStyle.height = '100%';\n        editorContainerStyle.width = editorContainerStyle.height = '';\n        DOM.addClass(body, 'mce-fullscreen');\n        DOM.addClass(documentElement, 'mce-fullscreen');\n        DOM.addClass(editorContainer, 'mce-fullscreen');\n        DOM.bind(domGlobals.window, 'resize', resize);\n        editor.on('remove', removeResize);\n        resize();\n        fullscreenState.set(newFullScreenInfo);\n        Events.fireFullscreenStateChanged(editor, true);\n      } else {\n        iframeStyle.width = fullscreenInfo.iframeWidth;\n        iframeStyle.height = fullscreenInfo.iframeHeight;\n        if (fullscreenInfo.containerWidth) {\n          editorContainerStyle.width = fullscreenInfo.containerWidth;\n        }\n        if (fullscreenInfo.containerHeight) {\n          editorContainerStyle.height = fullscreenInfo.containerHeight;\n        }\n        DOM.removeClass(body, 'mce-fullscreen');\n        DOM.removeClass(documentElement, 'mce-fullscreen');\n        DOM.removeClass(editorContainer, 'mce-fullscreen');\n        setScrollPos(fullscreenInfo.scrollPos);\n        DOM.unbind(domGlobals.window, 'resize', fullscreenInfo.resizeHandler);\n        editor.off('remove', fullscreenInfo.removeHandler);\n        fullscreenState.set(null);\n        Events.fireFullscreenStateChanged(editor, false);\n      }\n    };\n    var Actions = { toggleFullscreen: toggleFullscreen };\n\n    var register = function (editor, fullscreenState) {\n      editor.addCommand('mceFullScreen', function () {\n        Actions.toggleFullscreen(editor, fullscreenState);\n      });\n    };\n    var Commands = { register: register };\n\n    var postRender = function (editor) {\n      return function (e) {\n        var ctrl = e.control;\n        editor.on('FullscreenStateChanged', function (e) {\n          ctrl.active(e.state);\n        });\n      };\n    };\n    var register$1 = function (editor) {\n      editor.addMenuItem('fullscreen', {\n        text: 'Fullscreen',\n        shortcut: 'Ctrl+Shift+F',\n        selectable: true,\n        cmd: 'mceFullScreen',\n        onPostRender: postRender(editor),\n        context: 'view'\n      });\n      editor.addButton('fullscreen', {\n        active: false,\n        tooltip: 'Fullscreen',\n        cmd: 'mceFullScreen',\n        onPostRender: postRender(editor)\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('fullscreen', function (editor) {\n      var fullscreenState = Cell(null);\n      if (editor.settings.inline) {\n        return Api.get(fullscreenState);\n      }\n      Commands.register(editor, fullscreenState);\n      Buttons.register(editor);\n      editor.addShortcut('Ctrl+Shift+F', '', 'mceFullScreen');\n      return Api.get(fullscreenState);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}(window));\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/fullscreen/plugin.js\n// module id = WA99\n// module chunks = 29"],"sourceRoot":""}