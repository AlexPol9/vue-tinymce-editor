{"version":3,"sources":["webpack:///static/js/16.b0658d76a7ae0ced14a0.js","webpack:///./~/tinymce/plugins/pagebreak/index.js","webpack:///./~/tinymce/plugins/pagebreak/plugin.js"],"names":["webpackJsonp","5bBJ","module","exports","__webpack_require__","Z8GW","Plugin","global","tinymce","util","Tools","resolve","global$1","getSeparatorHtml","editor","getParam","shouldSplitBlock","Settings","getPageBreakClass","getPlaceholderHtml","transparentSrc","setup","separatorHtml","pageBreakSeparatorRegExp","RegExp","replace","a","on","e","content","serializer","addNodeFilter","nodes","node","className","i","length","attr","indexOf","parentNode","parent","schema","getBlockElements","name","type","value","raw","remove","FilterContent","register","addCommand","settings","pagebreak_split_block","insertContent","Commands","setup$1","target","nodeName","dom","hasClass","ResolveName","register$1","addButton","title","cmd","addMenuItem","text","icon","context","Buttons","add"],"mappings":"AAAAA,cAAc,KAERC,OACA,SAAUC,EAAQC,EAASC,GCGjC,EAAQ,SDSFC,KACA,SAAUH,EAAQC,IEhBxB,YACiB,WACb,YAoGA,SAASG,MAlGT,GAAIC,GAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,eAEtCE,EAAmB,SAAUC,GAC/B,MAAOA,GAAOC,SAAS,sBAAuB,6BAE5CC,EAAmB,SAAUF,GAC/B,MAAOA,GAAOC,SAAS,yBAAyB,IAE9CE,GACFJ,iBAAkBA,EAClBG,iBAAkBA,GAGhBE,EAAoB,WACtB,MAAO,iBAELC,EAAqB,WACvB,MAAO,aAAeP,EAASQ,eAAiB,2EAE9CC,EAAQ,SAAUP,GACpB,GAAIQ,GAAgBL,EAASJ,iBAAiBC,GAC1CS,EAA2B,GAAIC,QAAOF,EAAcG,QAAQ,gCAAiC,SAAUC,GACzG,MAAO,KAAOA,IACZ,KACJZ,GAAOa,GAAG,mBAAoB,SAAUC,GACtCA,EAAEC,QAAUD,EAAEC,QAAQJ,QAAQF,EAA0BJ,OAE1DL,EAAOa,GAAG,UAAW,WACnBb,EAAOgB,WAAWC,cAAc,MAAO,SAAUC,GAE/C,IADA,GAAsBC,GAAMC,EAAxBC,EAAIH,EAAMI,OACPD,KAGL,GAFAF,EAAOD,EAAMG,IACbD,EAAYD,EAAKI,KAAK,YACmC,IAAxCH,EAAUI,QAAQ,iBAAyB,CAC1D,GAAIC,GAAaN,EAAKO,MACtB,IAAI1B,EAAO2B,OAAOC,mBAAmBH,EAAWI,OAAS1B,EAASD,iBAAiBF,GAAS,CAC1FyB,EAAWK,KAAO,EAClBL,EAAWM,MAAQvB,EACnBiB,EAAWO,KAAM,EACjBb,EAAKc,QACL,UAEFd,EAAKW,KAAO,EACZX,EAAKY,MAAQvB,EACbW,EAAKa,KAAM,QAMjBE,GACF3B,MAAOA,EACPF,mBAAoBA,EACpBD,kBAAmBA,GAGjB+B,EAAW,SAAUnC,GACvBA,EAAOoC,WAAW,eAAgB,WAC5BpC,EAAOqC,SAASC,sBAClBtC,EAAOuC,cAAc,MAAQL,EAAc7B,qBAAuB,QAElEL,EAAOuC,cAAcL,EAAc7B,yBAIrCmC,GAAaL,SAAUA,GAEvBM,EAAU,SAAUzC,GACtBA,EAAOa,GAAG,cAAe,SAAUC,GACP,QAAtBA,EAAE4B,OAAOC,UAAsB3C,EAAO4C,IAAIC,SAAS/B,EAAE4B,OAAQR,EAAc9B,uBAC7EU,EAAEe,KAAO,gBAIXiB,GAAgBvC,MAAOkC,GAEvBM,EAAa,SAAU/C,GACzBA,EAAOgD,UAAU,aACfC,MAAO,aACPC,IAAK,iBAEPlD,EAAOmD,YAAY,aACjBC,KAAM,aACNC,KAAM,YACNH,IAAK,eACLI,QAAS,YAGTC,GAAYpB,SAAUY,EAE1BtD,GAAO+D,IAAI,YAAa,SAAUxD,GAChCwC,EAASL,SAASnC,GAClBuD,EAAQpB,SAASnC,GACjBkC,EAAc3B,MAAMP,GACpB8C,EAAYvC,MAAMP","file":"static/js/16.b0658d76a7ae0ced14a0.js","sourcesContent":["webpackJsonp([16],{\n\n/***/ \"5bBJ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"pagebreak\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/pagebreak')\n//   ES2015:\n//     import 'tinymce/plugins/pagebreak'\n__webpack_require__(\"Z8GW\");\n\n/***/ }),\n\n/***/ \"Z8GW\":\n/***/ (function(module, exports) {\n\n(function () {\nvar pagebreak = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var getSeparatorHtml = function (editor) {\n      return editor.getParam('pagebreak_separator', '<!-- pagebreak -->');\n    };\n    var shouldSplitBlock = function (editor) {\n      return editor.getParam('pagebreak_split_block', false);\n    };\n    var Settings = {\n      getSeparatorHtml: getSeparatorHtml,\n      shouldSplitBlock: shouldSplitBlock\n    };\n\n    var getPageBreakClass = function () {\n      return 'mce-pagebreak';\n    };\n    var getPlaceholderHtml = function () {\n      return '<img src=\"' + global$1.transparentSrc + '\" class=\"' + getPageBreakClass() + '\" data-mce-resize=\"false\" data-mce-placeholder />';\n    };\n    var setup = function (editor) {\n      var separatorHtml = Settings.getSeparatorHtml(editor);\n      var pageBreakSeparatorRegExp = new RegExp(separatorHtml.replace(/[\\?\\.\\*\\[\\]\\(\\)\\{\\}\\+\\^\\$\\:]/g, function (a) {\n        return '\\\\' + a;\n      }), 'gi');\n      editor.on('BeforeSetContent', function (e) {\n        e.content = e.content.replace(pageBreakSeparatorRegExp, getPlaceholderHtml());\n      });\n      editor.on('PreInit', function () {\n        editor.serializer.addNodeFilter('img', function (nodes) {\n          var i = nodes.length, node, className;\n          while (i--) {\n            node = nodes[i];\n            className = node.attr('class');\n            if (className && className.indexOf('mce-pagebreak') !== -1) {\n              var parentNode = node.parent;\n              if (editor.schema.getBlockElements()[parentNode.name] && Settings.shouldSplitBlock(editor)) {\n                parentNode.type = 3;\n                parentNode.value = separatorHtml;\n                parentNode.raw = true;\n                node.remove();\n                continue;\n              }\n              node.type = 3;\n              node.value = separatorHtml;\n              node.raw = true;\n            }\n          }\n        });\n      });\n    };\n    var FilterContent = {\n      setup: setup,\n      getPlaceholderHtml: getPlaceholderHtml,\n      getPageBreakClass: getPageBreakClass\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mcePageBreak', function () {\n        if (editor.settings.pagebreak_split_block) {\n          editor.insertContent('<p>' + FilterContent.getPlaceholderHtml() + '</p>');\n        } else {\n          editor.insertContent(FilterContent.getPlaceholderHtml());\n        }\n      });\n    };\n    var Commands = { register: register };\n\n    var setup$1 = function (editor) {\n      editor.on('ResolveName', function (e) {\n        if (e.target.nodeName === 'IMG' && editor.dom.hasClass(e.target, FilterContent.getPageBreakClass())) {\n          e.name = 'pagebreak';\n        }\n      });\n    };\n    var ResolveName = { setup: setup$1 };\n\n    var register$1 = function (editor) {\n      editor.addButton('pagebreak', {\n        title: 'Page break',\n        cmd: 'mcePageBreak'\n      });\n      editor.addMenuItem('pagebreak', {\n        text: 'Page break',\n        icon: 'pagebreak',\n        cmd: 'mcePageBreak',\n        context: 'insert'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('pagebreak', function (editor) {\n      Commands.register(editor);\n      Buttons.register(editor);\n      FilterContent.setup(editor);\n      ResolveName.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/16.b0658d76a7ae0ced14a0.js","// Exports the \"pagebreak\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/pagebreak')\n//   ES2015:\n//     import 'tinymce/plugins/pagebreak'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/pagebreak/index.js\n// module id = 5bBJ\n// module chunks = 16","(function () {\nvar pagebreak = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var getSeparatorHtml = function (editor) {\n      return editor.getParam('pagebreak_separator', '<!-- pagebreak -->');\n    };\n    var shouldSplitBlock = function (editor) {\n      return editor.getParam('pagebreak_split_block', false);\n    };\n    var Settings = {\n      getSeparatorHtml: getSeparatorHtml,\n      shouldSplitBlock: shouldSplitBlock\n    };\n\n    var getPageBreakClass = function () {\n      return 'mce-pagebreak';\n    };\n    var getPlaceholderHtml = function () {\n      return '<img src=\"' + global$1.transparentSrc + '\" class=\"' + getPageBreakClass() + '\" data-mce-resize=\"false\" data-mce-placeholder />';\n    };\n    var setup = function (editor) {\n      var separatorHtml = Settings.getSeparatorHtml(editor);\n      var pageBreakSeparatorRegExp = new RegExp(separatorHtml.replace(/[\\?\\.\\*\\[\\]\\(\\)\\{\\}\\+\\^\\$\\:]/g, function (a) {\n        return '\\\\' + a;\n      }), 'gi');\n      editor.on('BeforeSetContent', function (e) {\n        e.content = e.content.replace(pageBreakSeparatorRegExp, getPlaceholderHtml());\n      });\n      editor.on('PreInit', function () {\n        editor.serializer.addNodeFilter('img', function (nodes) {\n          var i = nodes.length, node, className;\n          while (i--) {\n            node = nodes[i];\n            className = node.attr('class');\n            if (className && className.indexOf('mce-pagebreak') !== -1) {\n              var parentNode = node.parent;\n              if (editor.schema.getBlockElements()[parentNode.name] && Settings.shouldSplitBlock(editor)) {\n                parentNode.type = 3;\n                parentNode.value = separatorHtml;\n                parentNode.raw = true;\n                node.remove();\n                continue;\n              }\n              node.type = 3;\n              node.value = separatorHtml;\n              node.raw = true;\n            }\n          }\n        });\n      });\n    };\n    var FilterContent = {\n      setup: setup,\n      getPlaceholderHtml: getPlaceholderHtml,\n      getPageBreakClass: getPageBreakClass\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mcePageBreak', function () {\n        if (editor.settings.pagebreak_split_block) {\n          editor.insertContent('<p>' + FilterContent.getPlaceholderHtml() + '</p>');\n        } else {\n          editor.insertContent(FilterContent.getPlaceholderHtml());\n        }\n      });\n    };\n    var Commands = { register: register };\n\n    var setup$1 = function (editor) {\n      editor.on('ResolveName', function (e) {\n        if (e.target.nodeName === 'IMG' && editor.dom.hasClass(e.target, FilterContent.getPageBreakClass())) {\n          e.name = 'pagebreak';\n        }\n      });\n    };\n    var ResolveName = { setup: setup$1 };\n\n    var register$1 = function (editor) {\n      editor.addButton('pagebreak', {\n        title: 'Page break',\n        cmd: 'mcePageBreak'\n      });\n      editor.addMenuItem('pagebreak', {\n        text: 'Page break',\n        icon: 'pagebreak',\n        cmd: 'mcePageBreak',\n        context: 'insert'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('pagebreak', function (editor) {\n      Commands.register(editor);\n      Buttons.register(editor);\n      FilterContent.setup(editor);\n      ResolveName.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/pagebreak/plugin.js\n// module id = Z8GW\n// module chunks = 16"],"sourceRoot":""}