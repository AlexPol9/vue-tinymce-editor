{"version":3,"sources":["webpack:///static/js/18.86cc32d9d209e0ab8f87.js","webpack:///./~/tinymce/plugins/nonbreaking/plugin.js","webpack:///./~/tinymce/plugins/nonbreaking/index.js"],"names":["webpackJsonp","3dPY","module","exports","Plugin","global","tinymce","util","Tools","resolve","stringRepeat","string","repeats","str","index","isVisualCharsEnabled","editor","plugins","visualchars","isEnabled","insertNbsp","times","nbsp","insertContent","dom","setAttrib","select","Actions","register","addCommand","Commands","global$1","getKeyboardSpaces","spaces","getParam","Settings","setup","on","e","keyCode","TAB","isDefaultPrevented","shiftKey","preventDefault","stopImmediatePropagation","Keyboard","register$1","addButton","title","cmd","addMenuItem","icon","text","context","Buttons","add","eGY0","__webpack_require__"],"mappings":"AAAAA,cAAc,KAERC,OACA,SAAUC,EAAQC,ICHxB,YACmB,WACf,YA4EA,SAASC,MA1ET,GAAIC,GAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEpCC,EAAe,SAAUC,EAAQC,GAEnC,IAAK,GADDC,GAAM,GACDC,EAAQ,EAAGA,EAAQF,EAASE,IACnCD,GAAOF,CAET,OAAOE,IAELE,EAAuB,SAAUC,GACnC,QAAOA,EAAOC,QAAQC,aAAcF,EAAOC,QAAQC,YAAYC,aAE7DC,EAAa,SAAUJ,EAAQK,GACjC,GAAIC,GAAOP,EAAqBC,GAAU,uCAAyC,QACnFA,GAAOO,cAAcb,EAAaY,EAAMD,IACxCL,EAAOQ,IAAIC,UAAUT,EAAOQ,IAAIE,OAAO,iBAAkB,iBAAkB,MAEzEC,GAAYP,WAAYA,GAExBQ,EAAW,SAAUZ,GACvBA,EAAOa,WAAW,iBAAkB,WAClCF,EAAQP,WAAWJ,EAAQ,MAG3Bc,GAAaF,SAAUA,GAEvBG,EAAWzB,QAAQC,KAAKC,MAAMC,QAAQ,mBAEtCuB,EAAoB,SAAUhB,GAChC,GAAIiB,GAASjB,EAAOkB,SAAS,wBAAyB,EACtD,OAAsB,iBAAXD,IACS,IAAXA,EAAkB,EAAI,EAEtBA,GAGPE,GAAaH,kBAAmBA,GAEhCI,EAAQ,SAAUpB,GACpB,GAAIiB,GAASE,EAASH,kBAAkBhB,EACpCiB,GAAS,GACXjB,EAAOqB,GAAG,UAAW,SAAUC,GAC7B,GAAIA,EAAEC,UAAYR,EAASS,MAAQF,EAAEG,qBAAsB,CACzD,GAAIH,EAAEI,SACJ,MAEFJ,GAAEK,iBACFL,EAAEM,2BACFjB,EAAQP,WAAWJ,EAAQiB,OAK/BY,GAAaT,MAAOA,GAEpBU,EAAa,SAAU9B,GACzBA,EAAO+B,UAAU,eACfC,MAAO,oBACPC,IAAK,mBAEPjC,EAAOkC,YAAY,eACjBC,KAAM,cACNC,KAAM,oBACNH,IAAK,iBACLI,QAAS,YAGTC,GAAY1B,SAAUkB,EAE1BzC,GAAOkD,IAAI,cAAe,SAAUvC,GAClCc,EAASF,SAASZ,GAClBsC,EAAQ1B,SAASZ,GACjB6B,EAAST,MAAMpB,YDkBfwC,KACA,SAAUtD,EAAQC,EAASsD,GEzFjC,EAAQ","file":"static/js/18.86cc32d9d209e0ab8f87.js","sourcesContent":["webpackJsonp([18],{\n\n/***/ \"3dPY\":\n/***/ (function(module, exports) {\n\n(function () {\nvar nonbreaking = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var stringRepeat = function (string, repeats) {\n      var str = '';\n      for (var index = 0; index < repeats; index++) {\n        str += string;\n      }\n      return str;\n    };\n    var isVisualCharsEnabled = function (editor) {\n      return editor.plugins.visualchars ? editor.plugins.visualchars.isEnabled() : false;\n    };\n    var insertNbsp = function (editor, times) {\n      var nbsp = isVisualCharsEnabled(editor) ? '<span class=\"mce-nbsp\">&nbsp;</span>' : '&nbsp;';\n      editor.insertContent(stringRepeat(nbsp, times));\n      editor.dom.setAttrib(editor.dom.select('span.mce-nbsp'), 'data-mce-bogus', '1');\n    };\n    var Actions = { insertNbsp: insertNbsp };\n\n    var register = function (editor) {\n      editor.addCommand('mceNonBreaking', function () {\n        Actions.insertNbsp(editor, 1);\n      });\n    };\n    var Commands = { register: register };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var getKeyboardSpaces = function (editor) {\n      var spaces = editor.getParam('nonbreaking_force_tab', 0);\n      if (typeof spaces === 'boolean') {\n        return spaces === true ? 3 : 0;\n      } else {\n        return spaces;\n      }\n    };\n    var Settings = { getKeyboardSpaces: getKeyboardSpaces };\n\n    var setup = function (editor) {\n      var spaces = Settings.getKeyboardSpaces(editor);\n      if (spaces > 0) {\n        editor.on('keydown', function (e) {\n          if (e.keyCode === global$1.TAB && !e.isDefaultPrevented()) {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            Actions.insertNbsp(editor, spaces);\n          }\n        });\n      }\n    };\n    var Keyboard = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.addButton('nonbreaking', {\n        title: 'Nonbreaking space',\n        cmd: 'mceNonBreaking'\n      });\n      editor.addMenuItem('nonbreaking', {\n        icon: 'nonbreaking',\n        text: 'Nonbreaking space',\n        cmd: 'mceNonBreaking',\n        context: 'insert'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('nonbreaking', function (editor) {\n      Commands.register(editor);\n      Buttons.register(editor);\n      Keyboard.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ }),\n\n/***/ \"eGY0\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"nonbreaking\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/nonbreaking')\n//   ES2015:\n//     import 'tinymce/plugins/nonbreaking'\n__webpack_require__(\"3dPY\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/18.86cc32d9d209e0ab8f87.js","(function () {\nvar nonbreaking = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var stringRepeat = function (string, repeats) {\n      var str = '';\n      for (var index = 0; index < repeats; index++) {\n        str += string;\n      }\n      return str;\n    };\n    var isVisualCharsEnabled = function (editor) {\n      return editor.plugins.visualchars ? editor.plugins.visualchars.isEnabled() : false;\n    };\n    var insertNbsp = function (editor, times) {\n      var nbsp = isVisualCharsEnabled(editor) ? '<span class=\"mce-nbsp\">&nbsp;</span>' : '&nbsp;';\n      editor.insertContent(stringRepeat(nbsp, times));\n      editor.dom.setAttrib(editor.dom.select('span.mce-nbsp'), 'data-mce-bogus', '1');\n    };\n    var Actions = { insertNbsp: insertNbsp };\n\n    var register = function (editor) {\n      editor.addCommand('mceNonBreaking', function () {\n        Actions.insertNbsp(editor, 1);\n      });\n    };\n    var Commands = { register: register };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var getKeyboardSpaces = function (editor) {\n      var spaces = editor.getParam('nonbreaking_force_tab', 0);\n      if (typeof spaces === 'boolean') {\n        return spaces === true ? 3 : 0;\n      } else {\n        return spaces;\n      }\n    };\n    var Settings = { getKeyboardSpaces: getKeyboardSpaces };\n\n    var setup = function (editor) {\n      var spaces = Settings.getKeyboardSpaces(editor);\n      if (spaces > 0) {\n        editor.on('keydown', function (e) {\n          if (e.keyCode === global$1.TAB && !e.isDefaultPrevented()) {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            Actions.insertNbsp(editor, spaces);\n          }\n        });\n      }\n    };\n    var Keyboard = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.addButton('nonbreaking', {\n        title: 'Nonbreaking space',\n        cmd: 'mceNonBreaking'\n      });\n      editor.addMenuItem('nonbreaking', {\n        icon: 'nonbreaking',\n        text: 'Nonbreaking space',\n        cmd: 'mceNonBreaking',\n        context: 'insert'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('nonbreaking', function (editor) {\n      Commands.register(editor);\n      Buttons.register(editor);\n      Keyboard.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/nonbreaking/plugin.js\n// module id = 3dPY\n// module chunks = 18","// Exports the \"nonbreaking\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/nonbreaking')\n//   ES2015:\n//     import 'tinymce/plugins/nonbreaking'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/nonbreaking/index.js\n// module id = eGY0\n// module chunks = 18"],"sourceRoot":""}