{"version":3,"sources":["webpack:///static/js/17.93d1d30bfb549f749cd7.js","webpack:///./~/tinymce/plugins/noneditable/plugin.js","webpack:///./~/tinymce/plugins/noneditable/index.js"],"names":["webpackJsonp","UIH9","module","exports","Plugin","global","tinymce","util","Tools","resolve","global$1","getNonEditableClass","editor","getParam","getEditableClass","getNonEditableRegExps","nonEditableRegExps","constructor","RegExp","Settings","hasClass","checkClassName","node","attr","indexOf","replaceMatchWithSpan","content","cls","match","args","arguments","index","length","prevChar","charAt","findStartTagIndex","lastIndexOf","substring","dom","encode","convertRegExpsToNonEditable","e","i","format","replace","setup","editClass","nonEditClass","trim","hasEditClass","hasNonEditClass","on","parser","addAttributeFilter","nodes","serializer","name","type","raw","value","FilterContent","add","dH/N","__webpack_require__"],"mappings":"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","file":"static/js/17.93d1d30bfb549f749cd7.js","sourcesContent":["webpackJsonp([17],{\n\n/***/ \"UIH9\":\n/***/ (function(module, exports) {\n\n(function () {\nvar noneditable = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getNonEditableClass = function (editor) {\n      return editor.getParam('noneditable_noneditable_class', 'mceNonEditable');\n    };\n    var getEditableClass = function (editor) {\n      return editor.getParam('noneditable_editable_class', 'mceEditable');\n    };\n    var getNonEditableRegExps = function (editor) {\n      var nonEditableRegExps = editor.getParam('noneditable_regexp', []);\n      if (nonEditableRegExps && nonEditableRegExps.constructor === RegExp) {\n        return [nonEditableRegExps];\n      } else {\n        return nonEditableRegExps;\n      }\n    };\n    var Settings = {\n      getNonEditableClass: getNonEditableClass,\n      getEditableClass: getEditableClass,\n      getNonEditableRegExps: getNonEditableRegExps\n    };\n\n    var hasClass = function (checkClassName) {\n      return function (node) {\n        return (' ' + node.attr('class') + ' ').indexOf(checkClassName) !== -1;\n      };\n    };\n    var replaceMatchWithSpan = function (editor, content, cls) {\n      return function (match) {\n        var args = arguments, index = args[args.length - 2];\n        var prevChar = index > 0 ? content.charAt(index - 1) : '';\n        if (prevChar === '\"') {\n          return match;\n        }\n        if (prevChar === '>') {\n          var findStartTagIndex = content.lastIndexOf('<', index);\n          if (findStartTagIndex !== -1) {\n            var tagHtml = content.substring(findStartTagIndex, index);\n            if (tagHtml.indexOf('contenteditable=\"false\"') !== -1) {\n              return match;\n            }\n          }\n        }\n        return '<span class=\"' + cls + '\" data-mce-content=\"' + editor.dom.encode(args[0]) + '\">' + editor.dom.encode(typeof args[1] === 'string' ? args[1] : args[0]) + '</span>';\n      };\n    };\n    var convertRegExpsToNonEditable = function (editor, nonEditableRegExps, e) {\n      var i = nonEditableRegExps.length, content = e.content;\n      if (e.format === 'raw') {\n        return;\n      }\n      while (i--) {\n        content = content.replace(nonEditableRegExps[i], replaceMatchWithSpan(editor, content, Settings.getNonEditableClass(editor)));\n      }\n      e.content = content;\n    };\n    var setup = function (editor) {\n      var editClass, nonEditClass;\n      var contentEditableAttrName = 'contenteditable';\n      editClass = ' ' + global$1.trim(Settings.getEditableClass(editor)) + ' ';\n      nonEditClass = ' ' + global$1.trim(Settings.getNonEditableClass(editor)) + ' ';\n      var hasEditClass = hasClass(editClass);\n      var hasNonEditClass = hasClass(nonEditClass);\n      var nonEditableRegExps = Settings.getNonEditableRegExps(editor);\n      editor.on('PreInit', function () {\n        if (nonEditableRegExps.length > 0) {\n          editor.on('BeforeSetContent', function (e) {\n            convertRegExpsToNonEditable(editor, nonEditableRegExps, e);\n          });\n        }\n        editor.parser.addAttributeFilter('class', function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (hasEditClass(node)) {\n              node.attr(contentEditableAttrName, 'true');\n            } else if (hasNonEditClass(node)) {\n              node.attr(contentEditableAttrName, 'false');\n            }\n          }\n        });\n        editor.serializer.addAttributeFilter(contentEditableAttrName, function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (!hasEditClass(node) && !hasNonEditClass(node)) {\n              continue;\n            }\n            if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {\n              node.name = '#text';\n              node.type = 3;\n              node.raw = true;\n              node.value = node.attr('data-mce-content');\n            } else {\n              node.attr(contentEditableAttrName, null);\n            }\n          }\n        });\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    global.add('noneditable', function (editor) {\n      FilterContent.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n/***/ }),\n\n/***/ \"dH/N\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Exports the \"noneditable\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/noneditable')\n//   ES2015:\n//     import 'tinymce/plugins/noneditable'\n__webpack_require__(\"UIH9\");\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/17.93d1d30bfb549f749cd7.js","(function () {\nvar noneditable = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getNonEditableClass = function (editor) {\n      return editor.getParam('noneditable_noneditable_class', 'mceNonEditable');\n    };\n    var getEditableClass = function (editor) {\n      return editor.getParam('noneditable_editable_class', 'mceEditable');\n    };\n    var getNonEditableRegExps = function (editor) {\n      var nonEditableRegExps = editor.getParam('noneditable_regexp', []);\n      if (nonEditableRegExps && nonEditableRegExps.constructor === RegExp) {\n        return [nonEditableRegExps];\n      } else {\n        return nonEditableRegExps;\n      }\n    };\n    var Settings = {\n      getNonEditableClass: getNonEditableClass,\n      getEditableClass: getEditableClass,\n      getNonEditableRegExps: getNonEditableRegExps\n    };\n\n    var hasClass = function (checkClassName) {\n      return function (node) {\n        return (' ' + node.attr('class') + ' ').indexOf(checkClassName) !== -1;\n      };\n    };\n    var replaceMatchWithSpan = function (editor, content, cls) {\n      return function (match) {\n        var args = arguments, index = args[args.length - 2];\n        var prevChar = index > 0 ? content.charAt(index - 1) : '';\n        if (prevChar === '\"') {\n          return match;\n        }\n        if (prevChar === '>') {\n          var findStartTagIndex = content.lastIndexOf('<', index);\n          if (findStartTagIndex !== -1) {\n            var tagHtml = content.substring(findStartTagIndex, index);\n            if (tagHtml.indexOf('contenteditable=\"false\"') !== -1) {\n              return match;\n            }\n          }\n        }\n        return '<span class=\"' + cls + '\" data-mce-content=\"' + editor.dom.encode(args[0]) + '\">' + editor.dom.encode(typeof args[1] === 'string' ? args[1] : args[0]) + '</span>';\n      };\n    };\n    var convertRegExpsToNonEditable = function (editor, nonEditableRegExps, e) {\n      var i = nonEditableRegExps.length, content = e.content;\n      if (e.format === 'raw') {\n        return;\n      }\n      while (i--) {\n        content = content.replace(nonEditableRegExps[i], replaceMatchWithSpan(editor, content, Settings.getNonEditableClass(editor)));\n      }\n      e.content = content;\n    };\n    var setup = function (editor) {\n      var editClass, nonEditClass;\n      var contentEditableAttrName = 'contenteditable';\n      editClass = ' ' + global$1.trim(Settings.getEditableClass(editor)) + ' ';\n      nonEditClass = ' ' + global$1.trim(Settings.getNonEditableClass(editor)) + ' ';\n      var hasEditClass = hasClass(editClass);\n      var hasNonEditClass = hasClass(nonEditClass);\n      var nonEditableRegExps = Settings.getNonEditableRegExps(editor);\n      editor.on('PreInit', function () {\n        if (nonEditableRegExps.length > 0) {\n          editor.on('BeforeSetContent', function (e) {\n            convertRegExpsToNonEditable(editor, nonEditableRegExps, e);\n          });\n        }\n        editor.parser.addAttributeFilter('class', function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (hasEditClass(node)) {\n              node.attr(contentEditableAttrName, 'true');\n            } else if (hasNonEditClass(node)) {\n              node.attr(contentEditableAttrName, 'false');\n            }\n          }\n        });\n        editor.serializer.addAttributeFilter(contentEditableAttrName, function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (!hasEditClass(node) && !hasNonEditClass(node)) {\n              continue;\n            }\n            if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {\n              node.name = '#text';\n              node.type = 3;\n              node.raw = true;\n              node.value = node.attr('data-mce-content');\n            } else {\n              node.attr(contentEditableAttrName, null);\n            }\n          }\n        });\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    global.add('noneditable', function (editor) {\n      FilterContent.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/noneditable/plugin.js\n// module id = UIH9\n// module chunks = 17","// Exports the \"noneditable\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/noneditable')\n//   ES2015:\n//     import 'tinymce/plugins/noneditable'\nrequire('./plugin.js');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinymce/plugins/noneditable/index.js\n// module id = dH/N\n// module chunks = 17"],"sourceRoot":""}